// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{Object,Service};
use glib::{prelude::*,translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "IBusConfigService")]
    pub struct ConfigService(Object<ffi::IBusConfigService, ffi::IBusConfigServiceClass>) @extends Service, Object;

    match fn {
        type_ => || ffi::ibus_config_service_get_type(),
    }
}

impl ConfigService {
        pub const NONE: Option<&'static ConfigService> = None;
    

    #[doc(alias = "ibus_config_service_new")]
    pub fn new(connection: &gio::DBusConnection) -> ConfigService {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_config_service_new(connection.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`ConfigService`] objects.
            ///
            /// This method returns an instance of [`ConfigServiceBuilder`](crate::builders::ConfigServiceBuilder) which can be used to create [`ConfigService`] objects.
            pub fn builder() -> ConfigServiceBuilder {
                ConfigServiceBuilder::new()
            }
        
}

impl Default for ConfigService {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`ConfigService`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ConfigServiceBuilder {
            builder: glib::object::ObjectBuilder<'static, ConfigService>,
        }

        impl ConfigServiceBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn connection(self, connection: &gio::DBusConnection) -> Self {
                            Self { builder: self.builder.property("connection", connection.clone()), }
                        }

                            pub fn object_path(self, object_path: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("object-path", object_path.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`ConfigService`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> ConfigService {
    self.builder.build() }
}

pub trait ConfigServiceExt: 'static {
    #[doc(alias = "ibus_config_service_value_changed")]
    fn value_changed(&self, section: &str, name: &str, value: &glib::Variant);
}

impl<O: IsA<ConfigService>> ConfigServiceExt for O {
    fn value_changed(&self, section: &str, name: &str, value: &glib::Variant) {
        unsafe {
            ffi::ibus_config_service_value_changed(self.as_ref().to_glib_none().0, section.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0);
        }
    }
}

impl fmt::Display for ConfigService {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ConfigService")
    }
}
