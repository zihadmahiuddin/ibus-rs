// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{EngineDesc,LookupTable,PropList,Property,Proxy,Text};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute,ptr};

#[cfg(any(feature = "gio_v2_26", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
glib::wrapper! {
    #[doc(alias = "IBusInputContext")]
    pub struct InputContext(Object<ffi::IBusInputContext, ffi::IBusInputContextClass>) @extends Proxy, gio::DBusProxy, @implements gio::AsyncInitable, gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::ibus_input_context_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_26", feature = "dox")))]
#[cfg(any(feature = "gio_v2_22", feature = "dox"))]
glib::wrapper! {
    #[doc(alias = "IBusInputContext")]
    pub struct InputContext(Object<ffi::IBusInputContext, ffi::IBusInputContextClass>) @extends Proxy, @implements gio::AsyncInitable, gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::ibus_input_context_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_22", feature = "dox")))]
#[cfg(any(feature = "gio_v2_30", feature = "dox"))]
glib::wrapper! {
    #[doc(alias = "IBusInputContext")]
    pub struct InputContext(Object<ffi::IBusInputContext, ffi::IBusInputContextClass>) @extends Proxy, @implements gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::ibus_input_context_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_30", feature = "dox")))]
#[cfg(any(feature = "gio_v2_22", feature = "dox"))]
glib::wrapper! {
    #[doc(alias = "IBusInputContext")]
    pub struct InputContext(Object<ffi::IBusInputContext, ffi::IBusInputContextClass>) @extends Proxy, @implements gio::Initable;

    match fn {
        type_ => || ffi::ibus_input_context_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_22", feature = "dox")))]
glib::wrapper! {
    #[doc(alias = "IBusInputContext")]
    pub struct InputContext(Object<ffi::IBusInputContext, ffi::IBusInputContextClass>) @extends Proxy;

    match fn {
        type_ => || ffi::ibus_input_context_get_type(),
    }
}

impl InputContext {
        pub const NONE: Option<&'static InputContext> = None;
    

    #[doc(alias = "ibus_input_context_new")]
    pub fn new(path: &str, connection: &gio::DBusConnection, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<InputContext, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::ibus_input_context_new(path.to_glib_none().0, connection.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`InputContext`] objects.
            ///
            /// This method returns an instance of [`InputContextBuilder`](crate::builders::InputContextBuilder) which can be used to create [`InputContext`] objects.
            pub fn builder() -> InputContextBuilder {
                InputContextBuilder::new()
            }
        

    #[doc(alias = "ibus_input_context_get_input_context")]
    #[doc(alias = "get_input_context")]
    pub fn input_context(path: &str, connection: &gio::DBusConnection) -> Option<InputContext> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_input_context_get_input_context(path.to_glib_none().0, connection.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_input_context_get_input_context_async")]
    //#[doc(alias = "get_input_context_async")]
    //pub fn input_context_async<P: FnOnce(Result<(), glib::Error>) + 'static>(path: &str, connection: &gio::DBusConnection, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_input_context_get_input_context_async() }
    //}

    //#[doc(alias = "ibus_input_context_new_async")]
    //pub fn new_async<P: FnOnce(Result<(), glib::Error>) + 'static>(path: &str, connection: &gio::DBusConnection, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_input_context_new_async() }
    //}
}

impl Default for InputContext {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`InputContext`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct InputContextBuilder {
            builder: glib::object::ObjectBuilder<'static, InputContext>,
        }

        impl InputContextBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                        //    #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    //pub fn g_bus_type(self, g_bus_type: /*Ignored*/gio::BusType) -> Self {
                        //    Self { builder: self.builder.property("g-bus-type", g_bus_type), }
                        //}

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_connection(self, g_connection: &gio::DBusConnection) -> Self {
                            Self { builder: self.builder.property("g-connection", g_connection.clone()), }
                        }

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_default_timeout(self, g_default_timeout: i32) -> Self {
                            Self { builder: self.builder.property("g-default-timeout", g_default_timeout), }
                        }

                        //    #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    //pub fn g_flags(self, g_flags: /*Ignored*/gio::DBusProxyFlags) -> Self {
                        //    Self { builder: self.builder.property("g-flags", g_flags), }
                        //}

                        //    #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    //pub fn g_interface_info(self, g_interface_info: /*Ignored*/&gio::DBusInterfaceInfo) -> Self {
                        //    Self { builder: self.builder.property("g-interface-info", g_interface_info), }
                        //}

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_interface_name(self, g_interface_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("g-interface-name", g_interface_name.into()), }
                        }

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_name(self, g_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("g-name", g_name.into()), }
                        }

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_object_path(self, g_object_path: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("g-object-path", g_object_path.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`InputContext`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> InputContext {
    self.builder.build() }
}

pub trait InputContextExt: 'static {
    #[doc(alias = "ibus_input_context_cancel_hand_writing")]
    fn cancel_hand_writing(&self, n_strokes: u32);

    #[doc(alias = "ibus_input_context_focus_in")]
    fn focus_in(&self);

    #[doc(alias = "ibus_input_context_focus_out")]
    fn focus_out(&self);

    #[doc(alias = "ibus_input_context_get_engine")]
    #[doc(alias = "get_engine")]
    fn engine(&self) -> Option<EngineDesc>;

    //#[doc(alias = "ibus_input_context_get_engine_async")]
    //#[doc(alias = "get_engine_async")]
    //fn engine_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P);

    #[doc(alias = "ibus_input_context_needs_surrounding_text")]
    fn needs_surrounding_text(&self) -> bool;

    #[doc(alias = "ibus_input_context_process_key_event")]
    fn process_key_event(&self, keyval: u32, keycode: u32, state: u32) -> bool;

    //#[doc(alias = "ibus_input_context_process_key_event_async")]
    //fn process_key_event_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, keyval: u32, keycode: u32, state: u32, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P);

    #[doc(alias = "ibus_input_context_property_activate")]
    fn property_activate(&self, prop_name: &str, state: u32);

    #[doc(alias = "ibus_input_context_reset")]
    fn reset(&self);

    #[doc(alias = "ibus_input_context_set_capabilities")]
    fn set_capabilities(&self, capabilities: u32);

    #[doc(alias = "ibus_input_context_set_client_commit_preedit")]
    fn set_client_commit_preedit(&self, client_commit: bool);

    #[doc(alias = "ibus_input_context_set_content_type")]
    fn set_content_type(&self, purpose: u32, hints: u32);

    #[doc(alias = "ibus_input_context_set_cursor_location")]
    fn set_cursor_location(&self, x: i32, y: i32, w: i32, h: i32);

    #[doc(alias = "ibus_input_context_set_cursor_location_relative")]
    fn set_cursor_location_relative(&self, x: i32, y: i32, w: i32, h: i32);

    #[doc(alias = "ibus_input_context_set_engine")]
    fn set_engine(&self, name: &str);

    #[doc(alias = "ibus_input_context_set_surrounding_text")]
    fn set_surrounding_text(&self, text: &impl IsA<Text>, cursor_pos: u32, anchor_pos: u32);

    #[doc(alias = "commit-text")]
    fn connect_commit_text<F: Fn(&Self, &Text) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-down-lookup-table")]
    fn connect_cursor_down_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-up-lookup-table")]
    fn connect_cursor_up_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "delete-surrounding-text")]
    fn connect_delete_surrounding_text<F: Fn(&Self, i32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "disabled")]
    fn connect_disabled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "enabled")]
    fn connect_enabled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "forward-key-event")]
    fn connect_forward_key_event<F: Fn(&Self, u32, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hide-auxiliary-text")]
    fn connect_hide_auxiliary_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hide-lookup-table")]
    fn connect_hide_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hide-preedit-text")]
    fn connect_hide_preedit_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "page-down-lookup-table")]
    fn connect_page_down_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "page-up-lookup-table")]
    fn connect_page_up_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "register-properties")]
    fn connect_register_properties<F: Fn(&Self, &PropList) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-auxiliary-text")]
    fn connect_show_auxiliary_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-lookup-table")]
    fn connect_show_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-preedit-text")]
    fn connect_show_preedit_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-auxiliary-text")]
    fn connect_update_auxiliary_text<F: Fn(&Self, &Text, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-lookup-table")]
    fn connect_update_lookup_table<F: Fn(&Self, &LookupTable, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-preedit-text")]
    fn connect_update_preedit_text<F: Fn(&Self, &Text, u32, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-preedit-text-with-mode")]
    fn connect_update_preedit_text_with_mode<F: Fn(&Self, &Text, u32, bool, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-property")]
    fn connect_update_property<F: Fn(&Self, &Property) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<InputContext>> InputContextExt for O {
    fn cancel_hand_writing(&self, n_strokes: u32) {
        unsafe {
            ffi::ibus_input_context_cancel_hand_writing(self.as_ref().to_glib_none().0, n_strokes);
        }
    }

    fn focus_in(&self) {
        unsafe {
            ffi::ibus_input_context_focus_in(self.as_ref().to_glib_none().0);
        }
    }

    fn focus_out(&self) {
        unsafe {
            ffi::ibus_input_context_focus_out(self.as_ref().to_glib_none().0);
        }
    }

    fn engine(&self) -> Option<EngineDesc> {
        unsafe {
            from_glib_none(ffi::ibus_input_context_get_engine(self.as_ref().to_glib_none().0))
        }
    }

    //fn engine_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_input_context_get_engine_async() }
    //}

    fn needs_surrounding_text(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_input_context_needs_surrounding_text(self.as_ref().to_glib_none().0))
        }
    }

    fn process_key_event(&self, keyval: u32, keycode: u32, state: u32) -> bool {
        unsafe {
            from_glib(ffi::ibus_input_context_process_key_event(self.as_ref().to_glib_none().0, keyval, keycode, state))
        }
    }

    //fn process_key_event_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, keyval: u32, keycode: u32, state: u32, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_input_context_process_key_event_async() }
    //}

    fn property_activate(&self, prop_name: &str, state: u32) {
        unsafe {
            ffi::ibus_input_context_property_activate(self.as_ref().to_glib_none().0, prop_name.to_glib_none().0, state);
        }
    }

    fn reset(&self) {
        unsafe {
            ffi::ibus_input_context_reset(self.as_ref().to_glib_none().0);
        }
    }

    fn set_capabilities(&self, capabilities: u32) {
        unsafe {
            ffi::ibus_input_context_set_capabilities(self.as_ref().to_glib_none().0, capabilities);
        }
    }

    fn set_client_commit_preedit(&self, client_commit: bool) {
        unsafe {
            ffi::ibus_input_context_set_client_commit_preedit(self.as_ref().to_glib_none().0, client_commit.into_glib());
        }
    }

    fn set_content_type(&self, purpose: u32, hints: u32) {
        unsafe {
            ffi::ibus_input_context_set_content_type(self.as_ref().to_glib_none().0, purpose, hints);
        }
    }

    fn set_cursor_location(&self, x: i32, y: i32, w: i32, h: i32) {
        unsafe {
            ffi::ibus_input_context_set_cursor_location(self.as_ref().to_glib_none().0, x, y, w, h);
        }
    }

    fn set_cursor_location_relative(&self, x: i32, y: i32, w: i32, h: i32) {
        unsafe {
            ffi::ibus_input_context_set_cursor_location_relative(self.as_ref().to_glib_none().0, x, y, w, h);
        }
    }

    fn set_engine(&self, name: &str) {
        unsafe {
            ffi::ibus_input_context_set_engine(self.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn set_surrounding_text(&self, text: &impl IsA<Text>, cursor_pos: u32, anchor_pos: u32) {
        unsafe {
            ffi::ibus_input_context_set_surrounding_text(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0, cursor_pos, anchor_pos);
        }
    }

    fn connect_commit_text<F: Fn(&Self, &Text) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn commit_text_trampoline<P: IsA<InputContext>, F: Fn(&P, &Text) + 'static>(this: *mut ffi::IBusInputContext, text: *mut ffi::IBusText, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(text))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"commit-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(commit_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cursor_down_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_down_lookup_table_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cursor-down-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cursor_down_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cursor_up_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_up_lookup_table_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cursor-up-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cursor_up_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_delete_surrounding_text<F: Fn(&Self, i32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn delete_surrounding_text_trampoline<P: IsA<InputContext>, F: Fn(&P, i32, u32) + 'static>(this: *mut ffi::IBusInputContext, offset: libc::c_int, n_chars: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), offset, n_chars)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"delete-surrounding-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(delete_surrounding_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_disabled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn disabled_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"disabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(disabled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_enabled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn enabled_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(enabled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_forward_key_event<F: Fn(&Self, u32, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn forward_key_event_trampoline<P: IsA<InputContext>, F: Fn(&P, u32, u32, u32) + 'static>(this: *mut ffi::IBusInputContext, keyval: libc::c_uint, keycode: libc::c_uint, modifiers: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), keyval, keycode, modifiers)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"forward-key-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(forward_key_event_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_hide_auxiliary_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_auxiliary_text_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide-auxiliary-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hide_auxiliary_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_hide_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_lookup_table_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hide_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_hide_preedit_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_preedit_text_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide-preedit-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hide_preedit_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_page_down_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn page_down_lookup_table_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"page-down-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(page_down_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_page_up_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn page_up_lookup_table_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"page-up-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(page_up_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_register_properties<F: Fn(&Self, &PropList) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn register_properties_trampoline<P: IsA<InputContext>, F: Fn(&P, &PropList) + 'static>(this: *mut ffi::IBusInputContext, props: *mut ffi::IBusPropList, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(props))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"register-properties\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(register_properties_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_show_auxiliary_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_auxiliary_text_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-auxiliary-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_auxiliary_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_show_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_lookup_table_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_show_preedit_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_preedit_text_trampoline<P: IsA<InputContext>, F: Fn(&P) + 'static>(this: *mut ffi::IBusInputContext, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-preedit-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_preedit_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_auxiliary_text<F: Fn(&Self, &Text, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_auxiliary_text_trampoline<P: IsA<InputContext>, F: Fn(&P, &Text, bool) + 'static>(this: *mut ffi::IBusInputContext, text: *mut ffi::IBusText, visible: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(text), from_glib(visible))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-auxiliary-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_auxiliary_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_lookup_table<F: Fn(&Self, &LookupTable, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_lookup_table_trampoline<P: IsA<InputContext>, F: Fn(&P, &LookupTable, bool) + 'static>(this: *mut ffi::IBusInputContext, table: *mut ffi::IBusLookupTable, visible: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(table), from_glib(visible))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_preedit_text<F: Fn(&Self, &Text, u32, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_preedit_text_trampoline<P: IsA<InputContext>, F: Fn(&P, &Text, u32, bool) + 'static>(this: *mut ffi::IBusInputContext, text: *mut ffi::IBusText, cursor_pos: libc::c_uint, visible: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(text), cursor_pos, from_glib(visible))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-preedit-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_preedit_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_preedit_text_with_mode<F: Fn(&Self, &Text, u32, bool, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_preedit_text_with_mode_trampoline<P: IsA<InputContext>, F: Fn(&P, &Text, u32, bool, u32) + 'static>(this: *mut ffi::IBusInputContext, text: *mut ffi::IBusText, cursor_pos: libc::c_uint, visible: glib::ffi::gboolean, mode: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(text), cursor_pos, from_glib(visible), mode)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-preedit-text-with-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_preedit_text_with_mode_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_property<F: Fn(&Self, &Property) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_property_trampoline<P: IsA<InputContext>, F: Fn(&P, &Property) + 'static>(this: *mut ffi::IBusInputContext, prop: *mut ffi::IBusProperty, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputContext::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(prop))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-property\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_property_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for InputContext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("InputContext")
    }
}
