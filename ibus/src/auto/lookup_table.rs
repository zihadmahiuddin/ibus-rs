// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{Object,Serializable,Text};
use glib::{prelude::*,translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "IBusLookupTable")]
    pub struct LookupTable(Object<ffi::IBusLookupTable, ffi::IBusLookupTableClass>) @extends Serializable, Object;

    match fn {
        type_ => || ffi::ibus_lookup_table_get_type(),
    }
}

impl LookupTable {
        pub const NONE: Option<&'static LookupTable> = None;
    

    #[doc(alias = "ibus_lookup_table_new")]
    pub fn new(page_size: u32, cursor_pos: u32, cursor_visible: bool, round: bool) -> LookupTable {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_lookup_table_new(page_size, cursor_pos, cursor_visible.into_glib(), round.into_glib()))
        }
    }
}

unsafe impl Send for LookupTable {}
unsafe impl Sync for LookupTable {}

pub trait LookupTableExt: 'static {
    #[doc(alias = "ibus_lookup_table_append_candidate")]
    fn append_candidate(&self, text: &impl IsA<Text>);

    #[doc(alias = "ibus_lookup_table_append_label")]
    fn append_label(&self, text: &impl IsA<Text>);

    #[doc(alias = "ibus_lookup_table_clear")]
    fn clear(&self);

    #[doc(alias = "ibus_lookup_table_cursor_down")]
    fn cursor_down(&self) -> bool;

    #[doc(alias = "ibus_lookup_table_cursor_up")]
    fn cursor_up(&self) -> bool;

    #[doc(alias = "ibus_lookup_table_get_candidate")]
    #[doc(alias = "get_candidate")]
    fn candidate(&self, index: u32) -> Option<Text>;

    #[doc(alias = "ibus_lookup_table_get_cursor_in_page")]
    #[doc(alias = "get_cursor_in_page")]
    fn cursor_in_page(&self) -> u32;

    #[doc(alias = "ibus_lookup_table_get_cursor_pos")]
    #[doc(alias = "get_cursor_pos")]
    fn cursor_pos(&self) -> u32;

    #[doc(alias = "ibus_lookup_table_get_label")]
    #[doc(alias = "get_label")]
    fn label(&self, index: u32) -> Option<Text>;

    #[doc(alias = "ibus_lookup_table_get_number_of_candidates")]
    #[doc(alias = "get_number_of_candidates")]
    fn number_of_candidates(&self) -> u32;

    #[doc(alias = "ibus_lookup_table_get_orientation")]
    #[doc(alias = "get_orientation")]
    fn orientation(&self) -> i32;

    #[doc(alias = "ibus_lookup_table_get_page_size")]
    #[doc(alias = "get_page_size")]
    fn page_size(&self) -> u32;

    #[doc(alias = "ibus_lookup_table_is_cursor_visible")]
    fn is_cursor_visible(&self) -> bool;

    #[doc(alias = "ibus_lookup_table_is_round")]
    fn is_round(&self) -> bool;

    #[doc(alias = "ibus_lookup_table_page_down")]
    fn page_down(&self) -> bool;

    #[doc(alias = "ibus_lookup_table_page_up")]
    fn page_up(&self) -> bool;

    #[doc(alias = "ibus_lookup_table_set_cursor_pos")]
    fn set_cursor_pos(&self, cursor_pos: u32);

    #[doc(alias = "ibus_lookup_table_set_cursor_visible")]
    fn set_cursor_visible(&self, visible: bool);

    #[doc(alias = "ibus_lookup_table_set_label")]
    fn set_label(&self, index: u32, text: &impl IsA<Text>);

    #[doc(alias = "ibus_lookup_table_set_page_size")]
    fn set_page_size(&self, page_size: u32);

    #[doc(alias = "ibus_lookup_table_set_round")]
    fn set_round(&self, round: bool);
}

impl<O: IsA<LookupTable>> LookupTableExt for O {
    fn append_candidate(&self, text: &impl IsA<Text>) {
        unsafe {
            ffi::ibus_lookup_table_append_candidate(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0);
        }
    }

    fn append_label(&self, text: &impl IsA<Text>) {
        unsafe {
            ffi::ibus_lookup_table_append_label(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0);
        }
    }

    fn clear(&self) {
        unsafe {
            ffi::ibus_lookup_table_clear(self.as_ref().to_glib_none().0);
        }
    }

    fn cursor_down(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_lookup_table_cursor_down(self.as_ref().to_glib_none().0))
        }
    }

    fn cursor_up(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_lookup_table_cursor_up(self.as_ref().to_glib_none().0))
        }
    }

    fn candidate(&self, index: u32) -> Option<Text> {
        unsafe {
            from_glib_none(ffi::ibus_lookup_table_get_candidate(self.as_ref().to_glib_none().0, index))
        }
    }

    fn cursor_in_page(&self) -> u32 {
        unsafe {
            ffi::ibus_lookup_table_get_cursor_in_page(self.as_ref().to_glib_none().0)
        }
    }

    fn cursor_pos(&self) -> u32 {
        unsafe {
            ffi::ibus_lookup_table_get_cursor_pos(self.as_ref().to_glib_none().0)
        }
    }

    fn label(&self, index: u32) -> Option<Text> {
        unsafe {
            from_glib_none(ffi::ibus_lookup_table_get_label(self.as_ref().to_glib_none().0, index))
        }
    }

    fn number_of_candidates(&self) -> u32 {
        unsafe {
            ffi::ibus_lookup_table_get_number_of_candidates(self.as_ref().to_glib_none().0)
        }
    }

    fn orientation(&self) -> i32 {
        unsafe {
            ffi::ibus_lookup_table_get_orientation(self.as_ref().to_glib_none().0)
        }
    }

    fn page_size(&self) -> u32 {
        unsafe {
            ffi::ibus_lookup_table_get_page_size(self.as_ref().to_glib_none().0)
        }
    }

    fn is_cursor_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_lookup_table_is_cursor_visible(self.as_ref().to_glib_none().0))
        }
    }

    fn is_round(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_lookup_table_is_round(self.as_ref().to_glib_none().0))
        }
    }

    fn page_down(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_lookup_table_page_down(self.as_ref().to_glib_none().0))
        }
    }

    fn page_up(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_lookup_table_page_up(self.as_ref().to_glib_none().0))
        }
    }

    fn set_cursor_pos(&self, cursor_pos: u32) {
        unsafe {
            ffi::ibus_lookup_table_set_cursor_pos(self.as_ref().to_glib_none().0, cursor_pos);
        }
    }

    fn set_cursor_visible(&self, visible: bool) {
        unsafe {
            ffi::ibus_lookup_table_set_cursor_visible(self.as_ref().to_glib_none().0, visible.into_glib());
        }
    }

    fn set_label(&self, index: u32, text: &impl IsA<Text>) {
        unsafe {
            ffi::ibus_lookup_table_set_label(self.as_ref().to_glib_none().0, index, text.as_ref().to_glib_none().0);
        }
    }

    fn set_page_size(&self, page_size: u32) {
        unsafe {
            ffi::ibus_lookup_table_set_page_size(self.as_ref().to_glib_none().0, page_size);
        }
    }

    fn set_round(&self, round: bool) {
        unsafe {
            ffi::ibus_lookup_table_set_round(self.as_ref().to_glib_none().0, round.into_glib());
        }
    }
}

impl fmt::Display for LookupTable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("LookupTable")
    }
}
