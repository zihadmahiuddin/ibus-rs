// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{Component,Object,ObservedPath,Serializable};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute};

glib::wrapper! {
    #[doc(alias = "IBusRegistry")]
    pub struct Registry(Object<ffi::IBusRegistry, ffi::IBusRegistryClass>) @extends Serializable, Object;

    match fn {
        type_ => || ffi::ibus_registry_get_type(),
    }
}

impl Registry {
        pub const NONE: Option<&'static Registry> = None;
    

    #[doc(alias = "ibus_registry_new")]
    pub fn new() -> Registry {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_registry_new())
        }
    }
}

impl Default for Registry {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait RegistryExt: 'static {
    #[doc(alias = "ibus_registry_check_modification")]
    fn check_modification(&self) -> bool;

    #[doc(alias = "ibus_registry_get_components")]
    #[doc(alias = "get_components")]
    fn components(&self) -> Vec<Component>;

    #[doc(alias = "ibus_registry_get_observed_paths")]
    #[doc(alias = "get_observed_paths")]
    fn observed_paths(&self) -> Vec<ObservedPath>;

    #[doc(alias = "ibus_registry_load")]
    fn load(&self);

    #[doc(alias = "ibus_registry_load_cache")]
    fn load_cache(&self, is_user: bool) -> bool;

    #[doc(alias = "ibus_registry_load_cache_file")]
    fn load_cache_file(&self, filename: &str) -> bool;

    #[doc(alias = "ibus_registry_load_in_dir")]
    fn load_in_dir(&self, dirname: &str);

    #[doc(alias = "ibus_registry_save_cache")]
    fn save_cache(&self, is_user: bool) -> bool;

    #[doc(alias = "ibus_registry_save_cache_file")]
    fn save_cache_file(&self, filename: &str) -> bool;

    #[doc(alias = "ibus_registry_start_monitor_changes")]
    fn start_monitor_changes(&self);

    #[doc(alias = "changed")]
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Registry>> RegistryExt for O {
    fn check_modification(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_registry_check_modification(self.as_ref().to_glib_none().0))
        }
    }

    fn components(&self) -> Vec<Component> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::ibus_registry_get_components(self.as_ref().to_glib_none().0))
        }
    }

    fn observed_paths(&self) -> Vec<ObservedPath> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::ibus_registry_get_observed_paths(self.as_ref().to_glib_none().0))
        }
    }

    fn load(&self) {
        unsafe {
            ffi::ibus_registry_load(self.as_ref().to_glib_none().0);
        }
    }

    fn load_cache(&self, is_user: bool) -> bool {
        unsafe {
            from_glib(ffi::ibus_registry_load_cache(self.as_ref().to_glib_none().0, is_user.into_glib()))
        }
    }

    fn load_cache_file(&self, filename: &str) -> bool {
        unsafe {
            from_glib(ffi::ibus_registry_load_cache_file(self.as_ref().to_glib_none().0, filename.to_glib_none().0))
        }
    }

    fn load_in_dir(&self, dirname: &str) {
        unsafe {
            ffi::ibus_registry_load_in_dir(self.as_ref().to_glib_none().0, dirname.to_glib_none().0);
        }
    }

    fn save_cache(&self, is_user: bool) -> bool {
        unsafe {
            from_glib(ffi::ibus_registry_save_cache(self.as_ref().to_glib_none().0, is_user.into_glib()))
        }
    }

    fn save_cache_file(&self, filename: &str) -> bool {
        unsafe {
            from_glib(ffi::ibus_registry_save_cache_file(self.as_ref().to_glib_none().0, filename.to_glib_none().0))
        }
    }

    fn start_monitor_changes(&self) {
        unsafe {
            ffi::ibus_registry_start_monitor_changes(self.as_ref().to_glib_none().0);
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P: IsA<Registry>, F: Fn(&P) + 'static>(this: *mut ffi::IBusRegistry, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Registry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Registry {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Registry")
    }
}
