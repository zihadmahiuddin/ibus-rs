// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{Object,Serializable};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute};

glib::wrapper! {
    #[doc(alias = "IBusExtensionEvent")]
    pub struct ExtensionEvent(Object<ffi::IBusExtensionEvent, ffi::IBusExtensionEventClass>) @extends Serializable, Object;

    match fn {
        type_ => || ffi::ibus_extension_event_get_type(),
    }
}

impl ExtensionEvent {
        pub const NONE: Option<&'static ExtensionEvent> = None;
    

    //#[doc(alias = "ibus_extension_event_new")]
    //pub fn new(first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) -> ExtensionEvent {
    //    unsafe { TODO: call ffi:ibus_extension_event_new() }
    //}

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`ExtensionEvent`] objects.
            ///
            /// This method returns an instance of [`ExtensionEventBuilder`](crate::builders::ExtensionEventBuilder) which can be used to create [`ExtensionEvent`] objects.
            pub fn builder() -> ExtensionEventBuilder {
                ExtensionEventBuilder::new()
            }
        
}

impl Default for ExtensionEvent {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`ExtensionEvent`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ExtensionEventBuilder {
            builder: glib::object::ObjectBuilder<'static, ExtensionEvent>,
        }

        impl ExtensionEventBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn is_enabled(self, is_enabled: bool) -> Self {
                            Self { builder: self.builder.property("is-enabled", is_enabled), }
                        }

                            pub fn is_extension(self, is_extension: bool) -> Self {
                            Self { builder: self.builder.property("is-extension", is_extension), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn params(self, params: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("params", params.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`ExtensionEvent`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> ExtensionEvent {
    self.builder.build() }
}

pub trait ExtensionEventExt: 'static {
    #[doc(alias = "ibus_extension_event_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_extension_event_get_params")]
    #[doc(alias = "get_params")]
    fn params(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_extension_event_get_version")]
    #[doc(alias = "get_version")]
    fn version(&self) -> u32;

    #[doc(alias = "ibus_extension_event_is_enabled")]
    fn is_enabled(&self) -> bool;

    #[doc(alias = "ibus_extension_event_is_extension")]
    fn is_extension(&self) -> bool;

    #[doc(alias = "version")]
    fn connect_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ExtensionEvent>> ExtensionEventExt for O {
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_extension_event_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn params(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_extension_event_get_params(self.as_ref().to_glib_none().0))
        }
    }

    fn version(&self) -> u32 {
        unsafe {
            ffi::ibus_extension_event_get_version(self.as_ref().to_glib_none().0)
        }
    }

    fn is_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_extension_event_is_enabled(self.as_ref().to_glib_none().0))
        }
    }

    fn is_extension(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_extension_event_is_extension(self.as_ref().to_glib_none().0))
        }
    }

    fn connect_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<P: IsA<ExtensionEvent>, F: Fn(&P) + 'static>(this: *mut ffi::IBusExtensionEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(ExtensionEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_version_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for ExtensionEvent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ExtensionEvent")
    }
}
