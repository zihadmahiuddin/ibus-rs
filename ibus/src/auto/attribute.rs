// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{Object,Serializable};
use glib::{prelude::*,translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "IBusAttribute")]
    pub struct Attribute(Object<ffi::IBusAttribute, ffi::IBusAttributeClass>) @extends Serializable, Object;

    match fn {
        type_ => || ffi::ibus_attribute_get_type(),
    }
}

impl Attribute {
        pub const NONE: Option<&'static Attribute> = None;
    

    #[doc(alias = "ibus_attribute_new")]
    pub fn new(type_: u32, value: u32, start_index: u32, end_index: u32) -> Attribute {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_attribute_new(type_, value, start_index, end_index))
        }
    }
}

pub trait AttributeExt: 'static {
    #[doc(alias = "ibus_attribute_get_attr_type")]
    #[doc(alias = "get_attr_type")]
    fn attr_type(&self) -> u32;

    #[doc(alias = "ibus_attribute_get_end_index")]
    #[doc(alias = "get_end_index")]
    fn end_index(&self) -> u32;

    #[doc(alias = "ibus_attribute_get_start_index")]
    #[doc(alias = "get_start_index")]
    fn start_index(&self) -> u32;

    #[doc(alias = "ibus_attribute_get_value")]
    #[doc(alias = "get_value")]
    fn value(&self) -> u32;
}

impl<O: IsA<Attribute>> AttributeExt for O {
    fn attr_type(&self) -> u32 {
        unsafe {
            ffi::ibus_attribute_get_attr_type(self.as_ref().to_glib_none().0)
        }
    }

    fn end_index(&self) -> u32 {
        unsafe {
            ffi::ibus_attribute_get_end_index(self.as_ref().to_glib_none().0)
        }
    }

    fn start_index(&self) -> u32 {
        unsafe {
            ffi::ibus_attribute_get_start_index(self.as_ref().to_glib_none().0)
        }
    }

    fn value(&self) -> u32 {
        unsafe {
            ffi::ibus_attribute_get_value(self.as_ref().to_glib_none().0)
        }
    }
}

impl fmt::Display for Attribute {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Attribute")
    }
}
