// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../gir-files
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]


#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type IBusAttrType = c_int;
pub const IBUS_ATTR_TYPE_UNDERLINE: IBusAttrType = 1;
pub const IBUS_ATTR_TYPE_FOREGROUND: IBusAttrType = 2;
pub const IBUS_ATTR_TYPE_BACKGROUND: IBusAttrType = 3;

pub type IBusAttrUnderline = c_int;
pub const IBUS_ATTR_UNDERLINE_NONE: IBusAttrUnderline = 0;
pub const IBUS_ATTR_UNDERLINE_SINGLE: IBusAttrUnderline = 1;
pub const IBUS_ATTR_UNDERLINE_DOUBLE: IBusAttrUnderline = 2;
pub const IBUS_ATTR_UNDERLINE_LOW: IBusAttrUnderline = 3;
pub const IBUS_ATTR_UNDERLINE_ERROR: IBusAttrUnderline = 4;

pub type IBusBusRequestNameReply = c_int;
pub const IBUS_BUS_REQUEST_NAME_REPLY_PRIMARY_OWNER: IBusBusRequestNameReply = 1;
pub const IBUS_BUS_REQUEST_NAME_REPLY_IN_QUEUE: IBusBusRequestNameReply = 2;
pub const IBUS_BUS_REQUEST_NAME_REPLY_EXISTS: IBusBusRequestNameReply = 3;
pub const IBUS_BUS_REQUEST_NAME_REPLY_ALREADY_OWNER: IBusBusRequestNameReply = 4;

pub type IBusBusStartServiceByNameReply = c_int;
pub const IBUS_BUS_START_REPLY_SUCCESS: IBusBusStartServiceByNameReply = 1;
pub const IBUS_BUS_START_REPLY_ALREADY_RUNNING: IBusBusStartServiceByNameReply = 2;

pub type IBusError = c_int;
pub const IBUS_ERROR_NO_ENGINE: IBusError = 0;
pub const IBUS_ERROR_NO_CONFIG: IBusError = 1;
pub const IBUS_ERROR_FAILED: IBusError = 2;

pub type IBusInputPurpose = c_int;
pub const IBUS_INPUT_PURPOSE_FREE_FORM: IBusInputPurpose = 0;
pub const IBUS_INPUT_PURPOSE_ALPHA: IBusInputPurpose = 1;
pub const IBUS_INPUT_PURPOSE_DIGITS: IBusInputPurpose = 2;
pub const IBUS_INPUT_PURPOSE_NUMBER: IBusInputPurpose = 3;
pub const IBUS_INPUT_PURPOSE_PHONE: IBusInputPurpose = 4;
pub const IBUS_INPUT_PURPOSE_URL: IBusInputPurpose = 5;
pub const IBUS_INPUT_PURPOSE_EMAIL: IBusInputPurpose = 6;
pub const IBUS_INPUT_PURPOSE_NAME: IBusInputPurpose = 7;
pub const IBUS_INPUT_PURPOSE_PASSWORD: IBusInputPurpose = 8;
pub const IBUS_INPUT_PURPOSE_PIN: IBusInputPurpose = 9;
pub const IBUS_INPUT_PURPOSE_TERMINAL: IBusInputPurpose = 10;

pub type IBusOrientation = c_int;
pub const IBUS_ORIENTATION_HORIZONTAL: IBusOrientation = 0;
pub const IBUS_ORIENTATION_VERTICAL: IBusOrientation = 1;
pub const IBUS_ORIENTATION_SYSTEM: IBusOrientation = 2;

pub type IBusPreeditFocusMode = c_int;
pub const IBUS_ENGINE_PREEDIT_CLEAR: IBusPreeditFocusMode = 0;
pub const IBUS_ENGINE_PREEDIT_COMMIT: IBusPreeditFocusMode = 1;

pub type IBusPropState = c_int;
pub const PROP_STATE_UNCHECKED: IBusPropState = 0;
pub const PROP_STATE_CHECKED: IBusPropState = 1;
pub const PROP_STATE_INCONSISTENT: IBusPropState = 2;

pub type IBusPropType = c_int;
pub const PROP_TYPE_NORMAL: IBusPropType = 0;
pub const PROP_TYPE_TOGGLE: IBusPropType = 1;
pub const PROP_TYPE_RADIO: IBusPropType = 2;
pub const PROP_TYPE_MENU: IBusPropType = 3;
pub const PROP_TYPE_SEPARATOR: IBusPropType = 4;

pub type IBusXEventType = c_int;
pub const IBUS_X_EVENT_NOTHING: IBusXEventType = -1;
pub const IBUS_X_EVENT_KEY_PRESS: IBusXEventType = 0;
pub const IBUS_X_EVENT_KEY_RELEASE: IBusXEventType = 1;
pub const IBUS_X_EVENT_OTHER: IBusXEventType = 2;
pub const IBUS_X_EVENT_EVENT_LAST: IBusXEventType = 3;

// Constants
pub const IBUS_0: c_int = 48;
pub const IBUS_1: c_int = 49;
pub const IBUS_2: c_int = 50;
pub const IBUS_3: c_int = 51;
pub const IBUS_3270_AltCursor: c_int = 64784;
pub const IBUS_3270_Attn: c_int = 64782;
pub const IBUS_3270_BackTab: c_int = 64773;
pub const IBUS_3270_ChangeScreen: c_int = 64793;
pub const IBUS_3270_Copy: c_int = 64789;
pub const IBUS_3270_CursorBlink: c_int = 64783;
pub const IBUS_3270_CursorSelect: c_int = 64796;
pub const IBUS_3270_DeleteWord: c_int = 64794;
pub const IBUS_3270_Duplicate: c_int = 64769;
pub const IBUS_3270_Enter: c_int = 64798;
pub const IBUS_3270_EraseEOF: c_int = 64774;
pub const IBUS_3270_EraseInput: c_int = 64775;
pub const IBUS_3270_ExSelect: c_int = 64795;
pub const IBUS_3270_FieldMark: c_int = 64770;
pub const IBUS_3270_Ident: c_int = 64787;
pub const IBUS_3270_Jump: c_int = 64786;
pub const IBUS_3270_KeyClick: c_int = 64785;
pub const IBUS_3270_Left2: c_int = 64772;
pub const IBUS_3270_PA1: c_int = 64778;
pub const IBUS_3270_PA2: c_int = 64779;
pub const IBUS_3270_PA3: c_int = 64780;
pub const IBUS_3270_Play: c_int = 64790;
pub const IBUS_3270_PrintScreen: c_int = 64797;
pub const IBUS_3270_Quit: c_int = 64777;
pub const IBUS_3270_Record: c_int = 64792;
pub const IBUS_3270_Reset: c_int = 64776;
pub const IBUS_3270_Right2: c_int = 64771;
pub const IBUS_3270_Rule: c_int = 64788;
pub const IBUS_3270_Setup: c_int = 64791;
pub const IBUS_3270_Test: c_int = 64781;
pub const IBUS_4: c_int = 52;
pub const IBUS_5: c_int = 53;
pub const IBUS_6: c_int = 54;
pub const IBUS_7: c_int = 55;
pub const IBUS_8: c_int = 56;
pub const IBUS_9: c_int = 57;
pub const IBUS_A: c_int = 65;
pub const IBUS_AE: c_int = 198;
pub const IBUS_Aacute: c_int = 193;
pub const IBUS_Abelowdot: c_int = 16785056;
pub const IBUS_Abreve: c_int = 451;
pub const IBUS_Abreveacute: c_int = 16785070;
pub const IBUS_Abrevebelowdot: c_int = 16785078;
pub const IBUS_Abrevegrave: c_int = 16785072;
pub const IBUS_Abrevehook: c_int = 16785074;
pub const IBUS_Abrevetilde: c_int = 16785076;
pub const IBUS_AccessX_Enable: c_int = 65136;
pub const IBUS_AccessX_Feedback_Enable: c_int = 65137;
pub const IBUS_Acircumflex: c_int = 194;
pub const IBUS_Acircumflexacute: c_int = 16785060;
pub const IBUS_Acircumflexbelowdot: c_int = 16785068;
pub const IBUS_Acircumflexgrave: c_int = 16785062;
pub const IBUS_Acircumflexhook: c_int = 16785064;
pub const IBUS_Acircumflextilde: c_int = 16785066;
pub const IBUS_Adiaeresis: c_int = 196;
pub const IBUS_Agrave: c_int = 192;
pub const IBUS_Ahook: c_int = 16785058;
pub const IBUS_Alt_L: c_int = 65513;
pub const IBUS_Alt_R: c_int = 65514;
pub const IBUS_Amacron: c_int = 960;
pub const IBUS_Aogonek: c_int = 417;
pub const IBUS_Arabic_0: c_int = 16778848;
pub const IBUS_Arabic_1: c_int = 16778849;
pub const IBUS_Arabic_2: c_int = 16778850;
pub const IBUS_Arabic_3: c_int = 16778851;
pub const IBUS_Arabic_4: c_int = 16778852;
pub const IBUS_Arabic_5: c_int = 16778853;
pub const IBUS_Arabic_6: c_int = 16778854;
pub const IBUS_Arabic_7: c_int = 16778855;
pub const IBUS_Arabic_8: c_int = 16778856;
pub const IBUS_Arabic_9: c_int = 16778857;
pub const IBUS_Arabic_ain: c_int = 1497;
pub const IBUS_Arabic_alef: c_int = 1479;
pub const IBUS_Arabic_alefmaksura: c_int = 1513;
pub const IBUS_Arabic_beh: c_int = 1480;
pub const IBUS_Arabic_comma: c_int = 1452;
pub const IBUS_Arabic_dad: c_int = 1494;
pub const IBUS_Arabic_dal: c_int = 1487;
pub const IBUS_Arabic_damma: c_int = 1519;
pub const IBUS_Arabic_dammatan: c_int = 1516;
pub const IBUS_Arabic_ddal: c_int = 16778888;
pub const IBUS_Arabic_farsi_yeh: c_int = 16778956;
pub const IBUS_Arabic_fatha: c_int = 1518;
pub const IBUS_Arabic_fathatan: c_int = 1515;
pub const IBUS_Arabic_feh: c_int = 1505;
pub const IBUS_Arabic_fullstop: c_int = 16778964;
pub const IBUS_Arabic_gaf: c_int = 16778927;
pub const IBUS_Arabic_ghain: c_int = 1498;
pub const IBUS_Arabic_ha: c_int = 1511;
pub const IBUS_Arabic_hah: c_int = 1485;
pub const IBUS_Arabic_hamza: c_int = 1473;
pub const IBUS_Arabic_hamza_above: c_int = 16778836;
pub const IBUS_Arabic_hamza_below: c_int = 16778837;
pub const IBUS_Arabic_hamzaonalef: c_int = 1475;
pub const IBUS_Arabic_hamzaonwaw: c_int = 1476;
pub const IBUS_Arabic_hamzaonyeh: c_int = 1478;
pub const IBUS_Arabic_hamzaunderalef: c_int = 1477;
pub const IBUS_Arabic_heh: c_int = 1511;
pub const IBUS_Arabic_heh_doachashmee: c_int = 16778942;
pub const IBUS_Arabic_heh_goal: c_int = 16778945;
pub const IBUS_Arabic_jeem: c_int = 1484;
pub const IBUS_Arabic_jeh: c_int = 16778904;
pub const IBUS_Arabic_kaf: c_int = 1507;
pub const IBUS_Arabic_kasra: c_int = 1520;
pub const IBUS_Arabic_kasratan: c_int = 1517;
pub const IBUS_Arabic_keheh: c_int = 16778921;
pub const IBUS_Arabic_khah: c_int = 1486;
pub const IBUS_Arabic_lam: c_int = 1508;
pub const IBUS_Arabic_madda_above: c_int = 16778835;
pub const IBUS_Arabic_maddaonalef: c_int = 1474;
pub const IBUS_Arabic_meem: c_int = 1509;
pub const IBUS_Arabic_noon: c_int = 1510;
pub const IBUS_Arabic_noon_ghunna: c_int = 16778938;
pub const IBUS_Arabic_peh: c_int = 16778878;
pub const IBUS_Arabic_percent: c_int = 16778858;
pub const IBUS_Arabic_qaf: c_int = 1506;
pub const IBUS_Arabic_question_mark: c_int = 1471;
pub const IBUS_Arabic_ra: c_int = 1489;
pub const IBUS_Arabic_rreh: c_int = 16778897;
pub const IBUS_Arabic_sad: c_int = 1493;
pub const IBUS_Arabic_seen: c_int = 1491;
pub const IBUS_Arabic_semicolon: c_int = 1467;
pub const IBUS_Arabic_shadda: c_int = 1521;
pub const IBUS_Arabic_sheen: c_int = 1492;
pub const IBUS_Arabic_sukun: c_int = 1522;
pub const IBUS_Arabic_superscript_alef: c_int = 16778864;
pub const IBUS_Arabic_switch: c_int = 65406;
pub const IBUS_Arabic_tah: c_int = 1495;
pub const IBUS_Arabic_tatweel: c_int = 1504;
pub const IBUS_Arabic_tcheh: c_int = 16778886;
pub const IBUS_Arabic_teh: c_int = 1482;
pub const IBUS_Arabic_tehmarbuta: c_int = 1481;
pub const IBUS_Arabic_thal: c_int = 1488;
pub const IBUS_Arabic_theh: c_int = 1483;
pub const IBUS_Arabic_tteh: c_int = 16778873;
pub const IBUS_Arabic_veh: c_int = 16778916;
pub const IBUS_Arabic_waw: c_int = 1512;
pub const IBUS_Arabic_yeh: c_int = 1514;
pub const IBUS_Arabic_yeh_baree: c_int = 16778962;
pub const IBUS_Arabic_zah: c_int = 1496;
pub const IBUS_Arabic_zain: c_int = 1490;
pub const IBUS_Aring: c_int = 197;
pub const IBUS_Armenian_AT: c_int = 16778552;
pub const IBUS_Armenian_AYB: c_int = 16778545;
pub const IBUS_Armenian_BEN: c_int = 16778546;
pub const IBUS_Armenian_CHA: c_int = 16778569;
pub const IBUS_Armenian_DA: c_int = 16778548;
pub const IBUS_Armenian_DZA: c_int = 16778561;
pub const IBUS_Armenian_E: c_int = 16778551;
pub const IBUS_Armenian_FE: c_int = 16778582;
pub const IBUS_Armenian_GHAT: c_int = 16778562;
pub const IBUS_Armenian_GIM: c_int = 16778547;
pub const IBUS_Armenian_HI: c_int = 16778565;
pub const IBUS_Armenian_HO: c_int = 16778560;
pub const IBUS_Armenian_INI: c_int = 16778555;
pub const IBUS_Armenian_JE: c_int = 16778571;
pub const IBUS_Armenian_KE: c_int = 16778580;
pub const IBUS_Armenian_KEN: c_int = 16778559;
pub const IBUS_Armenian_KHE: c_int = 16778557;
pub const IBUS_Armenian_LYUN: c_int = 16778556;
pub const IBUS_Armenian_MEN: c_int = 16778564;
pub const IBUS_Armenian_NU: c_int = 16778566;
pub const IBUS_Armenian_O: c_int = 16778581;
pub const IBUS_Armenian_PE: c_int = 16778570;
pub const IBUS_Armenian_PYUR: c_int = 16778579;
pub const IBUS_Armenian_RA: c_int = 16778572;
pub const IBUS_Armenian_RE: c_int = 16778576;
pub const IBUS_Armenian_SE: c_int = 16778573;
pub const IBUS_Armenian_SHA: c_int = 16778567;
pub const IBUS_Armenian_TCHE: c_int = 16778563;
pub const IBUS_Armenian_TO: c_int = 16778553;
pub const IBUS_Armenian_TSA: c_int = 16778558;
pub const IBUS_Armenian_TSO: c_int = 16778577;
pub const IBUS_Armenian_TYUN: c_int = 16778575;
pub const IBUS_Armenian_VEV: c_int = 16778574;
pub const IBUS_Armenian_VO: c_int = 16778568;
pub const IBUS_Armenian_VYUN: c_int = 16778578;
pub const IBUS_Armenian_YECH: c_int = 16778549;
pub const IBUS_Armenian_ZA: c_int = 16778550;
pub const IBUS_Armenian_ZHE: c_int = 16778554;
pub const IBUS_Armenian_accent: c_int = 16778587;
pub const IBUS_Armenian_amanak: c_int = 16778588;
pub const IBUS_Armenian_apostrophe: c_int = 16778586;
pub const IBUS_Armenian_at: c_int = 16778600;
pub const IBUS_Armenian_ayb: c_int = 16778593;
pub const IBUS_Armenian_ben: c_int = 16778594;
pub const IBUS_Armenian_but: c_int = 16778589;
pub const IBUS_Armenian_cha: c_int = 16778617;
pub const IBUS_Armenian_da: c_int = 16778596;
pub const IBUS_Armenian_dza: c_int = 16778609;
pub const IBUS_Armenian_e: c_int = 16778599;
pub const IBUS_Armenian_exclam: c_int = 16778588;
pub const IBUS_Armenian_fe: c_int = 16778630;
pub const IBUS_Armenian_full_stop: c_int = 16778633;
pub const IBUS_Armenian_ghat: c_int = 16778610;
pub const IBUS_Armenian_gim: c_int = 16778595;
pub const IBUS_Armenian_hi: c_int = 16778613;
pub const IBUS_Armenian_ho: c_int = 16778608;
pub const IBUS_Armenian_hyphen: c_int = 16778634;
pub const IBUS_Armenian_ini: c_int = 16778603;
pub const IBUS_Armenian_je: c_int = 16778619;
pub const IBUS_Armenian_ke: c_int = 16778628;
pub const IBUS_Armenian_ken: c_int = 16778607;
pub const IBUS_Armenian_khe: c_int = 16778605;
pub const IBUS_Armenian_ligature_ew: c_int = 16778631;
pub const IBUS_Armenian_lyun: c_int = 16778604;
pub const IBUS_Armenian_men: c_int = 16778612;
pub const IBUS_Armenian_nu: c_int = 16778614;
pub const IBUS_Armenian_o: c_int = 16778629;
pub const IBUS_Armenian_paruyk: c_int = 16778590;
pub const IBUS_Armenian_pe: c_int = 16778618;
pub const IBUS_Armenian_pyur: c_int = 16778627;
pub const IBUS_Armenian_question: c_int = 16778590;
pub const IBUS_Armenian_ra: c_int = 16778620;
pub const IBUS_Armenian_re: c_int = 16778624;
pub const IBUS_Armenian_se: c_int = 16778621;
pub const IBUS_Armenian_separation_mark: c_int = 16778589;
pub const IBUS_Armenian_sha: c_int = 16778615;
pub const IBUS_Armenian_shesht: c_int = 16778587;
pub const IBUS_Armenian_tche: c_int = 16778611;
pub const IBUS_Armenian_to: c_int = 16778601;
pub const IBUS_Armenian_tsa: c_int = 16778606;
pub const IBUS_Armenian_tso: c_int = 16778625;
pub const IBUS_Armenian_tyun: c_int = 16778623;
pub const IBUS_Armenian_verjaket: c_int = 16778633;
pub const IBUS_Armenian_vev: c_int = 16778622;
pub const IBUS_Armenian_vo: c_int = 16778616;
pub const IBUS_Armenian_vyun: c_int = 16778626;
pub const IBUS_Armenian_yech: c_int = 16778597;
pub const IBUS_Armenian_yentamna: c_int = 16778634;
pub const IBUS_Armenian_za: c_int = 16778598;
pub const IBUS_Armenian_zhe: c_int = 16778602;
pub const IBUS_Atilde: c_int = 195;
pub const IBUS_AudibleBell_Enable: c_int = 65146;
pub const IBUS_B: c_int = 66;
pub const IBUS_Babovedot: c_int = 16784898;
pub const IBUS_BackSpace: c_int = 65288;
pub const IBUS_Begin: c_int = 65368;
pub const IBUS_BounceKeys_Enable: c_int = 65140;
pub const IBUS_Break: c_int = 65387;
pub const IBUS_Byelorussian_SHORTU: c_int = 1726;
pub const IBUS_Byelorussian_shortu: c_int = 1710;
pub const IBUS_C: c_int = 67;
pub const IBUS_Cabovedot: c_int = 709;
pub const IBUS_Cacute: c_int = 454;
pub const IBUS_Cancel: c_int = 65385;
pub const IBUS_Caps_Lock: c_int = 65509;
pub const IBUS_Ccaron: c_int = 456;
pub const IBUS_Ccedilla: c_int = 199;
pub const IBUS_Ccircumflex: c_int = 710;
pub const IBUS_Clear: c_int = 65291;
pub const IBUS_Codeinput: c_int = 65335;
pub const IBUS_ColonSign: c_int = 16785569;
pub const IBUS_Control_L: c_int = 65507;
pub const IBUS_Control_R: c_int = 65508;
pub const IBUS_CruzeiroSign: c_int = 16785570;
pub const IBUS_Cyrillic_A: c_int = 1761;
pub const IBUS_Cyrillic_BE: c_int = 1762;
pub const IBUS_Cyrillic_CHE: c_int = 1790;
pub const IBUS_Cyrillic_CHE_descender: c_int = 16778422;
pub const IBUS_Cyrillic_CHE_vertstroke: c_int = 16778424;
pub const IBUS_Cyrillic_DE: c_int = 1764;
pub const IBUS_Cyrillic_DZHE: c_int = 1727;
pub const IBUS_Cyrillic_E: c_int = 1788;
pub const IBUS_Cyrillic_EF: c_int = 1766;
pub const IBUS_Cyrillic_EL: c_int = 1772;
pub const IBUS_Cyrillic_EM: c_int = 1773;
pub const IBUS_Cyrillic_EN: c_int = 1774;
pub const IBUS_Cyrillic_EN_descender: c_int = 16778402;
pub const IBUS_Cyrillic_ER: c_int = 1778;
pub const IBUS_Cyrillic_ES: c_int = 1779;
pub const IBUS_Cyrillic_GHE: c_int = 1767;
pub const IBUS_Cyrillic_GHE_bar: c_int = 16778386;
pub const IBUS_Cyrillic_HA: c_int = 1768;
pub const IBUS_Cyrillic_HARDSIGN: c_int = 1791;
pub const IBUS_Cyrillic_HA_descender: c_int = 16778418;
pub const IBUS_Cyrillic_I: c_int = 1769;
pub const IBUS_Cyrillic_IE: c_int = 1765;
pub const IBUS_Cyrillic_IO: c_int = 1715;
pub const IBUS_Cyrillic_I_macron: c_int = 16778466;
pub const IBUS_Cyrillic_JE: c_int = 1720;
pub const IBUS_Cyrillic_KA: c_int = 1771;
pub const IBUS_Cyrillic_KA_descender: c_int = 16778394;
pub const IBUS_Cyrillic_KA_vertstroke: c_int = 16778396;
pub const IBUS_Cyrillic_LJE: c_int = 1721;
pub const IBUS_Cyrillic_NJE: c_int = 1722;
pub const IBUS_Cyrillic_O: c_int = 1775;
pub const IBUS_Cyrillic_O_bar: c_int = 16778472;
pub const IBUS_Cyrillic_PE: c_int = 1776;
pub const IBUS_Cyrillic_SCHWA: c_int = 16778456;
pub const IBUS_Cyrillic_SHA: c_int = 1787;
pub const IBUS_Cyrillic_SHCHA: c_int = 1789;
pub const IBUS_Cyrillic_SHHA: c_int = 16778426;
pub const IBUS_Cyrillic_SHORTI: c_int = 1770;
pub const IBUS_Cyrillic_SOFTSIGN: c_int = 1784;
pub const IBUS_Cyrillic_TE: c_int = 1780;
pub const IBUS_Cyrillic_TSE: c_int = 1763;
pub const IBUS_Cyrillic_U: c_int = 1781;
pub const IBUS_Cyrillic_U_macron: c_int = 16778478;
pub const IBUS_Cyrillic_U_straight: c_int = 16778414;
pub const IBUS_Cyrillic_U_straight_bar: c_int = 16778416;
pub const IBUS_Cyrillic_VE: c_int = 1783;
pub const IBUS_Cyrillic_YA: c_int = 1777;
pub const IBUS_Cyrillic_YERU: c_int = 1785;
pub const IBUS_Cyrillic_YU: c_int = 1760;
pub const IBUS_Cyrillic_ZE: c_int = 1786;
pub const IBUS_Cyrillic_ZHE: c_int = 1782;
pub const IBUS_Cyrillic_ZHE_descender: c_int = 16778390;
pub const IBUS_Cyrillic_a: c_int = 1729;
pub const IBUS_Cyrillic_be: c_int = 1730;
pub const IBUS_Cyrillic_che: c_int = 1758;
pub const IBUS_Cyrillic_che_descender: c_int = 16778423;
pub const IBUS_Cyrillic_che_vertstroke: c_int = 16778425;
pub const IBUS_Cyrillic_de: c_int = 1732;
pub const IBUS_Cyrillic_dzhe: c_int = 1711;
pub const IBUS_Cyrillic_e: c_int = 1756;
pub const IBUS_Cyrillic_ef: c_int = 1734;
pub const IBUS_Cyrillic_el: c_int = 1740;
pub const IBUS_Cyrillic_em: c_int = 1741;
pub const IBUS_Cyrillic_en: c_int = 1742;
pub const IBUS_Cyrillic_en_descender: c_int = 16778403;
pub const IBUS_Cyrillic_er: c_int = 1746;
pub const IBUS_Cyrillic_es: c_int = 1747;
pub const IBUS_Cyrillic_ghe: c_int = 1735;
pub const IBUS_Cyrillic_ghe_bar: c_int = 16778387;
pub const IBUS_Cyrillic_ha: c_int = 1736;
pub const IBUS_Cyrillic_ha_descender: c_int = 16778419;
pub const IBUS_Cyrillic_hardsign: c_int = 1759;
pub const IBUS_Cyrillic_i: c_int = 1737;
pub const IBUS_Cyrillic_i_macron: c_int = 16778467;
pub const IBUS_Cyrillic_ie: c_int = 1733;
pub const IBUS_Cyrillic_io: c_int = 1699;
pub const IBUS_Cyrillic_je: c_int = 1704;
pub const IBUS_Cyrillic_ka: c_int = 1739;
pub const IBUS_Cyrillic_ka_descender: c_int = 16778395;
pub const IBUS_Cyrillic_ka_vertstroke: c_int = 16778397;
pub const IBUS_Cyrillic_lje: c_int = 1705;
pub const IBUS_Cyrillic_nje: c_int = 1706;
pub const IBUS_Cyrillic_o: c_int = 1743;
pub const IBUS_Cyrillic_o_bar: c_int = 16778473;
pub const IBUS_Cyrillic_pe: c_int = 1744;
pub const IBUS_Cyrillic_schwa: c_int = 16778457;
pub const IBUS_Cyrillic_sha: c_int = 1755;
pub const IBUS_Cyrillic_shcha: c_int = 1757;
pub const IBUS_Cyrillic_shha: c_int = 16778427;
pub const IBUS_Cyrillic_shorti: c_int = 1738;
pub const IBUS_Cyrillic_softsign: c_int = 1752;
pub const IBUS_Cyrillic_te: c_int = 1748;
pub const IBUS_Cyrillic_tse: c_int = 1731;
pub const IBUS_Cyrillic_u: c_int = 1749;
pub const IBUS_Cyrillic_u_macron: c_int = 16778479;
pub const IBUS_Cyrillic_u_straight: c_int = 16778415;
pub const IBUS_Cyrillic_u_straight_bar: c_int = 16778417;
pub const IBUS_Cyrillic_ve: c_int = 1751;
pub const IBUS_Cyrillic_ya: c_int = 1745;
pub const IBUS_Cyrillic_yeru: c_int = 1753;
pub const IBUS_Cyrillic_yu: c_int = 1728;
pub const IBUS_Cyrillic_ze: c_int = 1754;
pub const IBUS_Cyrillic_zhe: c_int = 1750;
pub const IBUS_Cyrillic_zhe_descender: c_int = 16778391;
pub const IBUS_D: c_int = 68;
pub const IBUS_Dabovedot: c_int = 16784906;
pub const IBUS_Dcaron: c_int = 463;
pub const IBUS_Delete: c_int = 65535;
pub const IBUS_DongSign: c_int = 16785579;
pub const IBUS_Down: c_int = 65364;
pub const IBUS_Dstroke: c_int = 464;
pub const IBUS_E: c_int = 69;
pub const IBUS_ENG: c_int = 957;
pub const IBUS_ETH: c_int = 208;
pub const IBUS_Eabovedot: c_int = 972;
pub const IBUS_Eacute: c_int = 201;
pub const IBUS_Ebelowdot: c_int = 16785080;
pub const IBUS_Ecaron: c_int = 460;
pub const IBUS_Ecircumflex: c_int = 202;
pub const IBUS_Ecircumflexacute: c_int = 16785086;
pub const IBUS_Ecircumflexbelowdot: c_int = 16785094;
pub const IBUS_Ecircumflexgrave: c_int = 16785088;
pub const IBUS_Ecircumflexhook: c_int = 16785090;
pub const IBUS_Ecircumflextilde: c_int = 16785092;
pub const IBUS_EcuSign: c_int = 16785568;
pub const IBUS_Ediaeresis: c_int = 203;
pub const IBUS_Egrave: c_int = 200;
pub const IBUS_Ehook: c_int = 16785082;
pub const IBUS_Eisu_Shift: c_int = 65327;
pub const IBUS_Eisu_toggle: c_int = 65328;
pub const IBUS_Emacron: c_int = 938;
pub const IBUS_End: c_int = 65367;
pub const IBUS_Eogonek: c_int = 458;
pub const IBUS_Escape: c_int = 65307;
pub const IBUS_Eth: c_int = 208;
pub const IBUS_Etilde: c_int = 16785084;
pub const IBUS_EuroSign: c_int = 8364;
pub const IBUS_Execute: c_int = 65378;
pub const IBUS_F: c_int = 70;
pub const IBUS_F1: c_int = 65470;
pub const IBUS_F10: c_int = 65479;
pub const IBUS_F11: c_int = 65480;
pub const IBUS_F12: c_int = 65481;
pub const IBUS_F13: c_int = 65482;
pub const IBUS_F14: c_int = 65483;
pub const IBUS_F15: c_int = 65484;
pub const IBUS_F16: c_int = 65485;
pub const IBUS_F17: c_int = 65486;
pub const IBUS_F18: c_int = 65487;
pub const IBUS_F19: c_int = 65488;
pub const IBUS_F2: c_int = 65471;
pub const IBUS_F20: c_int = 65489;
pub const IBUS_F21: c_int = 65490;
pub const IBUS_F22: c_int = 65491;
pub const IBUS_F23: c_int = 65492;
pub const IBUS_F24: c_int = 65493;
pub const IBUS_F25: c_int = 65494;
pub const IBUS_F26: c_int = 65495;
pub const IBUS_F27: c_int = 65496;
pub const IBUS_F28: c_int = 65497;
pub const IBUS_F29: c_int = 65498;
pub const IBUS_F3: c_int = 65472;
pub const IBUS_F30: c_int = 65499;
pub const IBUS_F31: c_int = 65500;
pub const IBUS_F32: c_int = 65501;
pub const IBUS_F33: c_int = 65502;
pub const IBUS_F34: c_int = 65503;
pub const IBUS_F35: c_int = 65504;
pub const IBUS_F4: c_int = 65473;
pub const IBUS_F5: c_int = 65474;
pub const IBUS_F6: c_int = 65475;
pub const IBUS_F7: c_int = 65476;
pub const IBUS_F8: c_int = 65477;
pub const IBUS_F9: c_int = 65478;
pub const IBUS_FFrancSign: c_int = 16785571;
pub const IBUS_Fabovedot: c_int = 16784926;
pub const IBUS_Farsi_0: c_int = 16778992;
pub const IBUS_Farsi_1: c_int = 16778993;
pub const IBUS_Farsi_2: c_int = 16778994;
pub const IBUS_Farsi_3: c_int = 16778995;
pub const IBUS_Farsi_4: c_int = 16778996;
pub const IBUS_Farsi_5: c_int = 16778997;
pub const IBUS_Farsi_6: c_int = 16778998;
pub const IBUS_Farsi_7: c_int = 16778999;
pub const IBUS_Farsi_8: c_int = 16779000;
pub const IBUS_Farsi_9: c_int = 16779001;
pub const IBUS_Farsi_yeh: c_int = 16778956;
pub const IBUS_Find: c_int = 65384;
pub const IBUS_First_Virtual_Screen: c_int = 65232;
pub const IBUS_G: c_int = 71;
pub const IBUS_Gabovedot: c_int = 725;
pub const IBUS_Gbreve: c_int = 683;
pub const IBUS_Gcaron: c_int = 16777702;
pub const IBUS_Gcedilla: c_int = 939;
pub const IBUS_Gcircumflex: c_int = 728;
pub const IBUS_Georgian_an: c_int = 16781520;
pub const IBUS_Georgian_ban: c_int = 16781521;
pub const IBUS_Georgian_can: c_int = 16781546;
pub const IBUS_Georgian_char: c_int = 16781549;
pub const IBUS_Georgian_chin: c_int = 16781545;
pub const IBUS_Georgian_cil: c_int = 16781548;
pub const IBUS_Georgian_don: c_int = 16781523;
pub const IBUS_Georgian_en: c_int = 16781524;
pub const IBUS_Georgian_fi: c_int = 16781558;
pub const IBUS_Georgian_gan: c_int = 16781522;
pub const IBUS_Georgian_ghan: c_int = 16781542;
pub const IBUS_Georgian_hae: c_int = 16781552;
pub const IBUS_Georgian_har: c_int = 16781556;
pub const IBUS_Georgian_he: c_int = 16781553;
pub const IBUS_Georgian_hie: c_int = 16781554;
pub const IBUS_Georgian_hoe: c_int = 16781557;
pub const IBUS_Georgian_in: c_int = 16781528;
pub const IBUS_Georgian_jhan: c_int = 16781551;
pub const IBUS_Georgian_jil: c_int = 16781547;
pub const IBUS_Georgian_kan: c_int = 16781529;
pub const IBUS_Georgian_khar: c_int = 16781541;
pub const IBUS_Georgian_las: c_int = 16781530;
pub const IBUS_Georgian_man: c_int = 16781531;
pub const IBUS_Georgian_nar: c_int = 16781532;
pub const IBUS_Georgian_on: c_int = 16781533;
pub const IBUS_Georgian_par: c_int = 16781534;
pub const IBUS_Georgian_phar: c_int = 16781540;
pub const IBUS_Georgian_qar: c_int = 16781543;
pub const IBUS_Georgian_rae: c_int = 16781536;
pub const IBUS_Georgian_san: c_int = 16781537;
pub const IBUS_Georgian_shin: c_int = 16781544;
pub const IBUS_Georgian_tan: c_int = 16781527;
pub const IBUS_Georgian_tar: c_int = 16781538;
pub const IBUS_Georgian_un: c_int = 16781539;
pub const IBUS_Georgian_vin: c_int = 16781525;
pub const IBUS_Georgian_we: c_int = 16781555;
pub const IBUS_Georgian_xan: c_int = 16781550;
pub const IBUS_Georgian_zen: c_int = 16781526;
pub const IBUS_Georgian_zhar: c_int = 16781535;
pub const IBUS_Greek_ALPHA: c_int = 1985;
pub const IBUS_Greek_ALPHAaccent: c_int = 1953;
pub const IBUS_Greek_BETA: c_int = 1986;
pub const IBUS_Greek_CHI: c_int = 2007;
pub const IBUS_Greek_DELTA: c_int = 1988;
pub const IBUS_Greek_EPSILON: c_int = 1989;
pub const IBUS_Greek_EPSILONaccent: c_int = 1954;
pub const IBUS_Greek_ETA: c_int = 1991;
pub const IBUS_Greek_ETAaccent: c_int = 1955;
pub const IBUS_Greek_GAMMA: c_int = 1987;
pub const IBUS_Greek_IOTA: c_int = 1993;
pub const IBUS_Greek_IOTAaccent: c_int = 1956;
pub const IBUS_Greek_IOTAdiaeresis: c_int = 1957;
pub const IBUS_Greek_IOTAdieresis: c_int = 1957;
pub const IBUS_Greek_KAPPA: c_int = 1994;
pub const IBUS_Greek_LAMBDA: c_int = 1995;
pub const IBUS_Greek_LAMDA: c_int = 1995;
pub const IBUS_Greek_MU: c_int = 1996;
pub const IBUS_Greek_NU: c_int = 1997;
pub const IBUS_Greek_OMEGA: c_int = 2009;
pub const IBUS_Greek_OMEGAaccent: c_int = 1963;
pub const IBUS_Greek_OMICRON: c_int = 1999;
pub const IBUS_Greek_OMICRONaccent: c_int = 1959;
pub const IBUS_Greek_PHI: c_int = 2006;
pub const IBUS_Greek_PI: c_int = 2000;
pub const IBUS_Greek_PSI: c_int = 2008;
pub const IBUS_Greek_RHO: c_int = 2001;
pub const IBUS_Greek_SIGMA: c_int = 2002;
pub const IBUS_Greek_TAU: c_int = 2004;
pub const IBUS_Greek_THETA: c_int = 1992;
pub const IBUS_Greek_UPSILON: c_int = 2005;
pub const IBUS_Greek_UPSILONaccent: c_int = 1960;
pub const IBUS_Greek_UPSILONdieresis: c_int = 1961;
pub const IBUS_Greek_XI: c_int = 1998;
pub const IBUS_Greek_ZETA: c_int = 1990;
pub const IBUS_Greek_accentdieresis: c_int = 1966;
pub const IBUS_Greek_alpha: c_int = 2017;
pub const IBUS_Greek_alphaaccent: c_int = 1969;
pub const IBUS_Greek_beta: c_int = 2018;
pub const IBUS_Greek_chi: c_int = 2039;
pub const IBUS_Greek_delta: c_int = 2020;
pub const IBUS_Greek_epsilon: c_int = 2021;
pub const IBUS_Greek_epsilonaccent: c_int = 1970;
pub const IBUS_Greek_eta: c_int = 2023;
pub const IBUS_Greek_etaaccent: c_int = 1971;
pub const IBUS_Greek_finalsmallsigma: c_int = 2035;
pub const IBUS_Greek_gamma: c_int = 2019;
pub const IBUS_Greek_horizbar: c_int = 1967;
pub const IBUS_Greek_iota: c_int = 2025;
pub const IBUS_Greek_iotaaccent: c_int = 1972;
pub const IBUS_Greek_iotaaccentdieresis: c_int = 1974;
pub const IBUS_Greek_iotadieresis: c_int = 1973;
pub const IBUS_Greek_kappa: c_int = 2026;
pub const IBUS_Greek_lambda: c_int = 2027;
pub const IBUS_Greek_lamda: c_int = 2027;
pub const IBUS_Greek_mu: c_int = 2028;
pub const IBUS_Greek_nu: c_int = 2029;
pub const IBUS_Greek_omega: c_int = 2041;
pub const IBUS_Greek_omegaaccent: c_int = 1979;
pub const IBUS_Greek_omicron: c_int = 2031;
pub const IBUS_Greek_omicronaccent: c_int = 1975;
pub const IBUS_Greek_phi: c_int = 2038;
pub const IBUS_Greek_pi: c_int = 2032;
pub const IBUS_Greek_psi: c_int = 2040;
pub const IBUS_Greek_rho: c_int = 2033;
pub const IBUS_Greek_sigma: c_int = 2034;
pub const IBUS_Greek_switch: c_int = 65406;
pub const IBUS_Greek_tau: c_int = 2036;
pub const IBUS_Greek_theta: c_int = 2024;
pub const IBUS_Greek_upsilon: c_int = 2037;
pub const IBUS_Greek_upsilonaccent: c_int = 1976;
pub const IBUS_Greek_upsilonaccentdieresis: c_int = 1978;
pub const IBUS_Greek_upsilondieresis: c_int = 1977;
pub const IBUS_Greek_xi: c_int = 2030;
pub const IBUS_Greek_zeta: c_int = 2022;
pub const IBUS_H: c_int = 72;
pub const IBUS_Hangul: c_int = 65329;
pub const IBUS_Hangul_A: c_int = 3775;
pub const IBUS_Hangul_AE: c_int = 3776;
pub const IBUS_Hangul_AraeA: c_int = 3830;
pub const IBUS_Hangul_AraeAE: c_int = 3831;
pub const IBUS_Hangul_Banja: c_int = 65337;
pub const IBUS_Hangul_Cieuc: c_int = 3770;
pub const IBUS_Hangul_Codeinput: c_int = 65335;
pub const IBUS_Hangul_Dikeud: c_int = 3751;
pub const IBUS_Hangul_E: c_int = 3780;
pub const IBUS_Hangul_EO: c_int = 3779;
pub const IBUS_Hangul_EU: c_int = 3793;
pub const IBUS_Hangul_End: c_int = 65331;
pub const IBUS_Hangul_Hanja: c_int = 65332;
pub const IBUS_Hangul_Hieuh: c_int = 3774;
pub const IBUS_Hangul_I: c_int = 3795;
pub const IBUS_Hangul_Ieung: c_int = 3767;
pub const IBUS_Hangul_J_Cieuc: c_int = 3818;
pub const IBUS_Hangul_J_Dikeud: c_int = 3802;
pub const IBUS_Hangul_J_Hieuh: c_int = 3822;
pub const IBUS_Hangul_J_Ieung: c_int = 3816;
pub const IBUS_Hangul_J_Jieuj: c_int = 3817;
pub const IBUS_Hangul_J_Khieuq: c_int = 3819;
pub const IBUS_Hangul_J_Kiyeog: c_int = 3796;
pub const IBUS_Hangul_J_KiyeogSios: c_int = 3798;
pub const IBUS_Hangul_J_KkogjiDalrinIeung: c_int = 3833;
pub const IBUS_Hangul_J_Mieum: c_int = 3811;
pub const IBUS_Hangul_J_Nieun: c_int = 3799;
pub const IBUS_Hangul_J_NieunHieuh: c_int = 3801;
pub const IBUS_Hangul_J_NieunJieuj: c_int = 3800;
pub const IBUS_Hangul_J_PanSios: c_int = 3832;
pub const IBUS_Hangul_J_Phieuf: c_int = 3821;
pub const IBUS_Hangul_J_Pieub: c_int = 3812;
pub const IBUS_Hangul_J_PieubSios: c_int = 3813;
pub const IBUS_Hangul_J_Rieul: c_int = 3803;
pub const IBUS_Hangul_J_RieulHieuh: c_int = 3810;
pub const IBUS_Hangul_J_RieulKiyeog: c_int = 3804;
pub const IBUS_Hangul_J_RieulMieum: c_int = 3805;
pub const IBUS_Hangul_J_RieulPhieuf: c_int = 3809;
pub const IBUS_Hangul_J_RieulPieub: c_int = 3806;
pub const IBUS_Hangul_J_RieulSios: c_int = 3807;
pub const IBUS_Hangul_J_RieulTieut: c_int = 3808;
pub const IBUS_Hangul_J_Sios: c_int = 3814;
pub const IBUS_Hangul_J_SsangKiyeog: c_int = 3797;
pub const IBUS_Hangul_J_SsangSios: c_int = 3815;
pub const IBUS_Hangul_J_Tieut: c_int = 3820;
pub const IBUS_Hangul_J_YeorinHieuh: c_int = 3834;
pub const IBUS_Hangul_Jamo: c_int = 65333;
pub const IBUS_Hangul_Jeonja: c_int = 65336;
pub const IBUS_Hangul_Jieuj: c_int = 3768;
pub const IBUS_Hangul_Khieuq: c_int = 3771;
pub const IBUS_Hangul_Kiyeog: c_int = 3745;
pub const IBUS_Hangul_KiyeogSios: c_int = 3747;
pub const IBUS_Hangul_KkogjiDalrinIeung: c_int = 3827;
pub const IBUS_Hangul_Mieum: c_int = 3761;
pub const IBUS_Hangul_MultipleCandidate: c_int = 65341;
pub const IBUS_Hangul_Nieun: c_int = 3748;
pub const IBUS_Hangul_NieunHieuh: c_int = 3750;
pub const IBUS_Hangul_NieunJieuj: c_int = 3749;
pub const IBUS_Hangul_O: c_int = 3783;
pub const IBUS_Hangul_OE: c_int = 3786;
pub const IBUS_Hangul_PanSios: c_int = 3826;
pub const IBUS_Hangul_Phieuf: c_int = 3773;
pub const IBUS_Hangul_Pieub: c_int = 3762;
pub const IBUS_Hangul_PieubSios: c_int = 3764;
pub const IBUS_Hangul_PostHanja: c_int = 65339;
pub const IBUS_Hangul_PreHanja: c_int = 65338;
pub const IBUS_Hangul_PreviousCandidate: c_int = 65342;
pub const IBUS_Hangul_Rieul: c_int = 3753;
pub const IBUS_Hangul_RieulHieuh: c_int = 3760;
pub const IBUS_Hangul_RieulKiyeog: c_int = 3754;
pub const IBUS_Hangul_RieulMieum: c_int = 3755;
pub const IBUS_Hangul_RieulPhieuf: c_int = 3759;
pub const IBUS_Hangul_RieulPieub: c_int = 3756;
pub const IBUS_Hangul_RieulSios: c_int = 3757;
pub const IBUS_Hangul_RieulTieut: c_int = 3758;
pub const IBUS_Hangul_RieulYeorinHieuh: c_int = 3823;
pub const IBUS_Hangul_Romaja: c_int = 65334;
pub const IBUS_Hangul_SingleCandidate: c_int = 65340;
pub const IBUS_Hangul_Sios: c_int = 3765;
pub const IBUS_Hangul_Special: c_int = 65343;
pub const IBUS_Hangul_SsangDikeud: c_int = 3752;
pub const IBUS_Hangul_SsangJieuj: c_int = 3769;
pub const IBUS_Hangul_SsangKiyeog: c_int = 3746;
pub const IBUS_Hangul_SsangPieub: c_int = 3763;
pub const IBUS_Hangul_SsangSios: c_int = 3766;
pub const IBUS_Hangul_Start: c_int = 65330;
pub const IBUS_Hangul_SunkyeongeumMieum: c_int = 3824;
pub const IBUS_Hangul_SunkyeongeumPhieuf: c_int = 3828;
pub const IBUS_Hangul_SunkyeongeumPieub: c_int = 3825;
pub const IBUS_Hangul_Tieut: c_int = 3772;
pub const IBUS_Hangul_U: c_int = 3788;
pub const IBUS_Hangul_WA: c_int = 3784;
pub const IBUS_Hangul_WAE: c_int = 3785;
pub const IBUS_Hangul_WE: c_int = 3790;
pub const IBUS_Hangul_WEO: c_int = 3789;
pub const IBUS_Hangul_WI: c_int = 3791;
pub const IBUS_Hangul_YA: c_int = 3777;
pub const IBUS_Hangul_YAE: c_int = 3778;
pub const IBUS_Hangul_YE: c_int = 3782;
pub const IBUS_Hangul_YEO: c_int = 3781;
pub const IBUS_Hangul_YI: c_int = 3794;
pub const IBUS_Hangul_YO: c_int = 3787;
pub const IBUS_Hangul_YU: c_int = 3792;
pub const IBUS_Hangul_YeorinHieuh: c_int = 3829;
pub const IBUS_Hangul_switch: c_int = 65406;
pub const IBUS_Hankaku: c_int = 65321;
pub const IBUS_Hcircumflex: c_int = 678;
pub const IBUS_Hebrew_switch: c_int = 65406;
pub const IBUS_Help: c_int = 65386;
pub const IBUS_Henkan: c_int = 65315;
pub const IBUS_Henkan_Mode: c_int = 65315;
pub const IBUS_Hiragana: c_int = 65317;
pub const IBUS_Hiragana_Katakana: c_int = 65319;
pub const IBUS_Home: c_int = 65360;
pub const IBUS_Hstroke: c_int = 673;
pub const IBUS_Hyper_L: c_int = 65517;
pub const IBUS_Hyper_R: c_int = 65518;
pub const IBUS_I: c_int = 73;
pub const IBUS_INTERFACE_CONFIG: &[u8] = b"org.freedesktop.IBus.Config\0";
pub const IBUS_INTERFACE_ENGINE: &[u8] = b"org.freedesktop.IBus.Engine\0";
pub const IBUS_INTERFACE_FACTORY: &[u8] = b"org.freedesktop.IBus.Factory\0";
pub const IBUS_INTERFACE_IBUS: &[u8] = b"org.freedesktop.IBus\0";
pub const IBUS_INTERFACE_INPUT_CONTEXT: &[u8] = b"org.freedesktop.IBus.InputContext\0";
pub const IBUS_INTERFACE_NOTIFICATIONS: &[u8] = b"org.freedesktop.IBus.Notifications\0";
pub const IBUS_INTERFACE_PANEL: &[u8] = b"org.freedesktop.IBus.Panel\0";
pub const IBUS_INTERFACE_PORTAL: &[u8] = b"org.freedesktop.IBus.Portal\0";
pub const IBUS_ISO_Center_Object: c_int = 65075;
pub const IBUS_ISO_Continuous_Underline: c_int = 65072;
pub const IBUS_ISO_Discontinuous_Underline: c_int = 65073;
pub const IBUS_ISO_Emphasize: c_int = 65074;
pub const IBUS_ISO_Enter: c_int = 65076;
pub const IBUS_ISO_Fast_Cursor_Down: c_int = 65071;
pub const IBUS_ISO_Fast_Cursor_Left: c_int = 65068;
pub const IBUS_ISO_Fast_Cursor_Right: c_int = 65069;
pub const IBUS_ISO_Fast_Cursor_Up: c_int = 65070;
pub const IBUS_ISO_First_Group: c_int = 65036;
pub const IBUS_ISO_First_Group_Lock: c_int = 65037;
pub const IBUS_ISO_Group_Latch: c_int = 65030;
pub const IBUS_ISO_Group_Lock: c_int = 65031;
pub const IBUS_ISO_Group_Shift: c_int = 65406;
pub const IBUS_ISO_Last_Group: c_int = 65038;
pub const IBUS_ISO_Last_Group_Lock: c_int = 65039;
pub const IBUS_ISO_Left_Tab: c_int = 65056;
pub const IBUS_ISO_Level2_Latch: c_int = 65026;
pub const IBUS_ISO_Level3_Latch: c_int = 65028;
pub const IBUS_ISO_Level3_Lock: c_int = 65029;
pub const IBUS_ISO_Level3_Shift: c_int = 65027;
pub const IBUS_ISO_Level5_Latch: c_int = 65042;
pub const IBUS_ISO_Level5_Lock: c_int = 65043;
pub const IBUS_ISO_Level5_Shift: c_int = 65041;
pub const IBUS_ISO_Lock: c_int = 65025;
pub const IBUS_ISO_Move_Line_Down: c_int = 65058;
pub const IBUS_ISO_Move_Line_Up: c_int = 65057;
pub const IBUS_ISO_Next_Group: c_int = 65032;
pub const IBUS_ISO_Next_Group_Lock: c_int = 65033;
pub const IBUS_ISO_Partial_Line_Down: c_int = 65060;
pub const IBUS_ISO_Partial_Line_Up: c_int = 65059;
pub const IBUS_ISO_Partial_Space_Left: c_int = 65061;
pub const IBUS_ISO_Partial_Space_Right: c_int = 65062;
pub const IBUS_ISO_Prev_Group: c_int = 65034;
pub const IBUS_ISO_Prev_Group_Lock: c_int = 65035;
pub const IBUS_ISO_Release_Both_Margins: c_int = 65067;
pub const IBUS_ISO_Release_Margin_Left: c_int = 65065;
pub const IBUS_ISO_Release_Margin_Right: c_int = 65066;
pub const IBUS_ISO_Set_Margin_Left: c_int = 65063;
pub const IBUS_ISO_Set_Margin_Right: c_int = 65064;
pub const IBUS_Iabovedot: c_int = 681;
pub const IBUS_Iacute: c_int = 205;
pub const IBUS_Ibelowdot: c_int = 16785098;
pub const IBUS_Ibreve: c_int = 16777516;
pub const IBUS_Icircumflex: c_int = 206;
pub const IBUS_Idiaeresis: c_int = 207;
pub const IBUS_Igrave: c_int = 204;
pub const IBUS_Ihook: c_int = 16785096;
pub const IBUS_Imacron: c_int = 975;
pub const IBUS_Insert: c_int = 65379;
pub const IBUS_Iogonek: c_int = 967;
pub const IBUS_Itilde: c_int = 933;
pub const IBUS_J: c_int = 74;
pub const IBUS_Jcircumflex: c_int = 684;
pub const IBUS_K: c_int = 75;
pub const IBUS_KEY_0: c_int = 48;
pub const IBUS_KEY_1: c_int = 49;
pub const IBUS_KEY_2: c_int = 50;
pub const IBUS_KEY_3: c_int = 51;
pub const IBUS_KEY_3270_AltCursor: c_int = 64784;
pub const IBUS_KEY_3270_Attn: c_int = 64782;
pub const IBUS_KEY_3270_BackTab: c_int = 64773;
pub const IBUS_KEY_3270_ChangeScreen: c_int = 64793;
pub const IBUS_KEY_3270_Copy: c_int = 64789;
pub const IBUS_KEY_3270_CursorBlink: c_int = 64783;
pub const IBUS_KEY_3270_CursorSelect: c_int = 64796;
pub const IBUS_KEY_3270_DeleteWord: c_int = 64794;
pub const IBUS_KEY_3270_Duplicate: c_int = 64769;
pub const IBUS_KEY_3270_Enter: c_int = 64798;
pub const IBUS_KEY_3270_EraseEOF: c_int = 64774;
pub const IBUS_KEY_3270_EraseInput: c_int = 64775;
pub const IBUS_KEY_3270_ExSelect: c_int = 64795;
pub const IBUS_KEY_3270_FieldMark: c_int = 64770;
pub const IBUS_KEY_3270_Ident: c_int = 64787;
pub const IBUS_KEY_3270_Jump: c_int = 64786;
pub const IBUS_KEY_3270_KeyClick: c_int = 64785;
pub const IBUS_KEY_3270_Left2: c_int = 64772;
pub const IBUS_KEY_3270_PA1: c_int = 64778;
pub const IBUS_KEY_3270_PA2: c_int = 64779;
pub const IBUS_KEY_3270_PA3: c_int = 64780;
pub const IBUS_KEY_3270_Play: c_int = 64790;
pub const IBUS_KEY_3270_PrintScreen: c_int = 64797;
pub const IBUS_KEY_3270_Quit: c_int = 64777;
pub const IBUS_KEY_3270_Record: c_int = 64792;
pub const IBUS_KEY_3270_Reset: c_int = 64776;
pub const IBUS_KEY_3270_Right2: c_int = 64771;
pub const IBUS_KEY_3270_Rule: c_int = 64788;
pub const IBUS_KEY_3270_Setup: c_int = 64791;
pub const IBUS_KEY_3270_Test: c_int = 64781;
pub const IBUS_KEY_4: c_int = 52;
pub const IBUS_KEY_5: c_int = 53;
pub const IBUS_KEY_6: c_int = 54;
pub const IBUS_KEY_7: c_int = 55;
pub const IBUS_KEY_8: c_int = 56;
pub const IBUS_KEY_9: c_int = 57;
pub const IBUS_KEY_A: c_int = 65;
pub const IBUS_KEY_AE: c_int = 198;
pub const IBUS_KEY_Aacute: c_int = 193;
pub const IBUS_KEY_Abelowdot: c_int = 16785056;
pub const IBUS_KEY_Abreve: c_int = 451;
pub const IBUS_KEY_Abreveacute: c_int = 16785070;
pub const IBUS_KEY_Abrevebelowdot: c_int = 16785078;
pub const IBUS_KEY_Abrevegrave: c_int = 16785072;
pub const IBUS_KEY_Abrevehook: c_int = 16785074;
pub const IBUS_KEY_Abrevetilde: c_int = 16785076;
pub const IBUS_KEY_AccessX_Enable: c_int = 65136;
pub const IBUS_KEY_AccessX_Feedback_Enable: c_int = 65137;
pub const IBUS_KEY_Acircumflex: c_int = 194;
pub const IBUS_KEY_Acircumflexacute: c_int = 16785060;
pub const IBUS_KEY_Acircumflexbelowdot: c_int = 16785068;
pub const IBUS_KEY_Acircumflexgrave: c_int = 16785062;
pub const IBUS_KEY_Acircumflexhook: c_int = 16785064;
pub const IBUS_KEY_Acircumflextilde: c_int = 16785066;
pub const IBUS_KEY_AddFavorite: c_int = 269025081;
pub const IBUS_KEY_Adiaeresis: c_int = 196;
pub const IBUS_KEY_Agrave: c_int = 192;
pub const IBUS_KEY_Ahook: c_int = 16785058;
pub const IBUS_KEY_Alt_L: c_int = 65513;
pub const IBUS_KEY_Alt_R: c_int = 65514;
pub const IBUS_KEY_Amacron: c_int = 960;
pub const IBUS_KEY_Aogonek: c_int = 417;
pub const IBUS_KEY_ApplicationLeft: c_int = 269025104;
pub const IBUS_KEY_ApplicationRight: c_int = 269025105;
pub const IBUS_KEY_Arabic_0: c_int = 16778848;
pub const IBUS_KEY_Arabic_1: c_int = 16778849;
pub const IBUS_KEY_Arabic_2: c_int = 16778850;
pub const IBUS_KEY_Arabic_3: c_int = 16778851;
pub const IBUS_KEY_Arabic_4: c_int = 16778852;
pub const IBUS_KEY_Arabic_5: c_int = 16778853;
pub const IBUS_KEY_Arabic_6: c_int = 16778854;
pub const IBUS_KEY_Arabic_7: c_int = 16778855;
pub const IBUS_KEY_Arabic_8: c_int = 16778856;
pub const IBUS_KEY_Arabic_9: c_int = 16778857;
pub const IBUS_KEY_Arabic_ain: c_int = 1497;
pub const IBUS_KEY_Arabic_alef: c_int = 1479;
pub const IBUS_KEY_Arabic_alefmaksura: c_int = 1513;
pub const IBUS_KEY_Arabic_beh: c_int = 1480;
pub const IBUS_KEY_Arabic_comma: c_int = 1452;
pub const IBUS_KEY_Arabic_dad: c_int = 1494;
pub const IBUS_KEY_Arabic_dal: c_int = 1487;
pub const IBUS_KEY_Arabic_damma: c_int = 1519;
pub const IBUS_KEY_Arabic_dammatan: c_int = 1516;
pub const IBUS_KEY_Arabic_ddal: c_int = 16778888;
pub const IBUS_KEY_Arabic_farsi_yeh: c_int = 16778956;
pub const IBUS_KEY_Arabic_fatha: c_int = 1518;
pub const IBUS_KEY_Arabic_fathatan: c_int = 1515;
pub const IBUS_KEY_Arabic_feh: c_int = 1505;
pub const IBUS_KEY_Arabic_fullstop: c_int = 16778964;
pub const IBUS_KEY_Arabic_gaf: c_int = 16778927;
pub const IBUS_KEY_Arabic_ghain: c_int = 1498;
pub const IBUS_KEY_Arabic_ha: c_int = 1511;
pub const IBUS_KEY_Arabic_hah: c_int = 1485;
pub const IBUS_KEY_Arabic_hamza: c_int = 1473;
pub const IBUS_KEY_Arabic_hamza_above: c_int = 16778836;
pub const IBUS_KEY_Arabic_hamza_below: c_int = 16778837;
pub const IBUS_KEY_Arabic_hamzaonalef: c_int = 1475;
pub const IBUS_KEY_Arabic_hamzaonwaw: c_int = 1476;
pub const IBUS_KEY_Arabic_hamzaonyeh: c_int = 1478;
pub const IBUS_KEY_Arabic_hamzaunderalef: c_int = 1477;
pub const IBUS_KEY_Arabic_heh: c_int = 1511;
pub const IBUS_KEY_Arabic_heh_doachashmee: c_int = 16778942;
pub const IBUS_KEY_Arabic_heh_goal: c_int = 16778945;
pub const IBUS_KEY_Arabic_jeem: c_int = 1484;
pub const IBUS_KEY_Arabic_jeh: c_int = 16778904;
pub const IBUS_KEY_Arabic_kaf: c_int = 1507;
pub const IBUS_KEY_Arabic_kasra: c_int = 1520;
pub const IBUS_KEY_Arabic_kasratan: c_int = 1517;
pub const IBUS_KEY_Arabic_keheh: c_int = 16778921;
pub const IBUS_KEY_Arabic_khah: c_int = 1486;
pub const IBUS_KEY_Arabic_lam: c_int = 1508;
pub const IBUS_KEY_Arabic_madda_above: c_int = 16778835;
pub const IBUS_KEY_Arabic_maddaonalef: c_int = 1474;
pub const IBUS_KEY_Arabic_meem: c_int = 1509;
pub const IBUS_KEY_Arabic_noon: c_int = 1510;
pub const IBUS_KEY_Arabic_noon_ghunna: c_int = 16778938;
pub const IBUS_KEY_Arabic_peh: c_int = 16778878;
pub const IBUS_KEY_Arabic_percent: c_int = 16778858;
pub const IBUS_KEY_Arabic_qaf: c_int = 1506;
pub const IBUS_KEY_Arabic_question_mark: c_int = 1471;
pub const IBUS_KEY_Arabic_ra: c_int = 1489;
pub const IBUS_KEY_Arabic_rreh: c_int = 16778897;
pub const IBUS_KEY_Arabic_sad: c_int = 1493;
pub const IBUS_KEY_Arabic_seen: c_int = 1491;
pub const IBUS_KEY_Arabic_semicolon: c_int = 1467;
pub const IBUS_KEY_Arabic_shadda: c_int = 1521;
pub const IBUS_KEY_Arabic_sheen: c_int = 1492;
pub const IBUS_KEY_Arabic_sukun: c_int = 1522;
pub const IBUS_KEY_Arabic_superscript_alef: c_int = 16778864;
pub const IBUS_KEY_Arabic_switch: c_int = 65406;
pub const IBUS_KEY_Arabic_tah: c_int = 1495;
pub const IBUS_KEY_Arabic_tatweel: c_int = 1504;
pub const IBUS_KEY_Arabic_tcheh: c_int = 16778886;
pub const IBUS_KEY_Arabic_teh: c_int = 1482;
pub const IBUS_KEY_Arabic_tehmarbuta: c_int = 1481;
pub const IBUS_KEY_Arabic_thal: c_int = 1488;
pub const IBUS_KEY_Arabic_theh: c_int = 1483;
pub const IBUS_KEY_Arabic_tteh: c_int = 16778873;
pub const IBUS_KEY_Arabic_veh: c_int = 16778916;
pub const IBUS_KEY_Arabic_waw: c_int = 1512;
pub const IBUS_KEY_Arabic_yeh: c_int = 1514;
pub const IBUS_KEY_Arabic_yeh_baree: c_int = 16778962;
pub const IBUS_KEY_Arabic_zah: c_int = 1496;
pub const IBUS_KEY_Arabic_zain: c_int = 1490;
pub const IBUS_KEY_Aring: c_int = 197;
pub const IBUS_KEY_Armenian_AT: c_int = 16778552;
pub const IBUS_KEY_Armenian_AYB: c_int = 16778545;
pub const IBUS_KEY_Armenian_BEN: c_int = 16778546;
pub const IBUS_KEY_Armenian_CHA: c_int = 16778569;
pub const IBUS_KEY_Armenian_DA: c_int = 16778548;
pub const IBUS_KEY_Armenian_DZA: c_int = 16778561;
pub const IBUS_KEY_Armenian_E: c_int = 16778551;
pub const IBUS_KEY_Armenian_FE: c_int = 16778582;
pub const IBUS_KEY_Armenian_GHAT: c_int = 16778562;
pub const IBUS_KEY_Armenian_GIM: c_int = 16778547;
pub const IBUS_KEY_Armenian_HI: c_int = 16778565;
pub const IBUS_KEY_Armenian_HO: c_int = 16778560;
pub const IBUS_KEY_Armenian_INI: c_int = 16778555;
pub const IBUS_KEY_Armenian_JE: c_int = 16778571;
pub const IBUS_KEY_Armenian_KE: c_int = 16778580;
pub const IBUS_KEY_Armenian_KEN: c_int = 16778559;
pub const IBUS_KEY_Armenian_KHE: c_int = 16778557;
pub const IBUS_KEY_Armenian_LYUN: c_int = 16778556;
pub const IBUS_KEY_Armenian_MEN: c_int = 16778564;
pub const IBUS_KEY_Armenian_NU: c_int = 16778566;
pub const IBUS_KEY_Armenian_O: c_int = 16778581;
pub const IBUS_KEY_Armenian_PE: c_int = 16778570;
pub const IBUS_KEY_Armenian_PYUR: c_int = 16778579;
pub const IBUS_KEY_Armenian_RA: c_int = 16778572;
pub const IBUS_KEY_Armenian_RE: c_int = 16778576;
pub const IBUS_KEY_Armenian_SE: c_int = 16778573;
pub const IBUS_KEY_Armenian_SHA: c_int = 16778567;
pub const IBUS_KEY_Armenian_TCHE: c_int = 16778563;
pub const IBUS_KEY_Armenian_TO: c_int = 16778553;
pub const IBUS_KEY_Armenian_TSA: c_int = 16778558;
pub const IBUS_KEY_Armenian_TSO: c_int = 16778577;
pub const IBUS_KEY_Armenian_TYUN: c_int = 16778575;
pub const IBUS_KEY_Armenian_VEV: c_int = 16778574;
pub const IBUS_KEY_Armenian_VO: c_int = 16778568;
pub const IBUS_KEY_Armenian_VYUN: c_int = 16778578;
pub const IBUS_KEY_Armenian_YECH: c_int = 16778549;
pub const IBUS_KEY_Armenian_ZA: c_int = 16778550;
pub const IBUS_KEY_Armenian_ZHE: c_int = 16778554;
pub const IBUS_KEY_Armenian_accent: c_int = 16778587;
pub const IBUS_KEY_Armenian_amanak: c_int = 16778588;
pub const IBUS_KEY_Armenian_apostrophe: c_int = 16778586;
pub const IBUS_KEY_Armenian_at: c_int = 16778600;
pub const IBUS_KEY_Armenian_ayb: c_int = 16778593;
pub const IBUS_KEY_Armenian_ben: c_int = 16778594;
pub const IBUS_KEY_Armenian_but: c_int = 16778589;
pub const IBUS_KEY_Armenian_cha: c_int = 16778617;
pub const IBUS_KEY_Armenian_da: c_int = 16778596;
pub const IBUS_KEY_Armenian_dza: c_int = 16778609;
pub const IBUS_KEY_Armenian_e: c_int = 16778599;
pub const IBUS_KEY_Armenian_exclam: c_int = 16778588;
pub const IBUS_KEY_Armenian_fe: c_int = 16778630;
pub const IBUS_KEY_Armenian_full_stop: c_int = 16778633;
pub const IBUS_KEY_Armenian_ghat: c_int = 16778610;
pub const IBUS_KEY_Armenian_gim: c_int = 16778595;
pub const IBUS_KEY_Armenian_hi: c_int = 16778613;
pub const IBUS_KEY_Armenian_ho: c_int = 16778608;
pub const IBUS_KEY_Armenian_hyphen: c_int = 16778634;
pub const IBUS_KEY_Armenian_ini: c_int = 16778603;
pub const IBUS_KEY_Armenian_je: c_int = 16778619;
pub const IBUS_KEY_Armenian_ke: c_int = 16778628;
pub const IBUS_KEY_Armenian_ken: c_int = 16778607;
pub const IBUS_KEY_Armenian_khe: c_int = 16778605;
pub const IBUS_KEY_Armenian_ligature_ew: c_int = 16778631;
pub const IBUS_KEY_Armenian_lyun: c_int = 16778604;
pub const IBUS_KEY_Armenian_men: c_int = 16778612;
pub const IBUS_KEY_Armenian_nu: c_int = 16778614;
pub const IBUS_KEY_Armenian_o: c_int = 16778629;
pub const IBUS_KEY_Armenian_paruyk: c_int = 16778590;
pub const IBUS_KEY_Armenian_pe: c_int = 16778618;
pub const IBUS_KEY_Armenian_pyur: c_int = 16778627;
pub const IBUS_KEY_Armenian_question: c_int = 16778590;
pub const IBUS_KEY_Armenian_ra: c_int = 16778620;
pub const IBUS_KEY_Armenian_re: c_int = 16778624;
pub const IBUS_KEY_Armenian_se: c_int = 16778621;
pub const IBUS_KEY_Armenian_separation_mark: c_int = 16778589;
pub const IBUS_KEY_Armenian_sha: c_int = 16778615;
pub const IBUS_KEY_Armenian_shesht: c_int = 16778587;
pub const IBUS_KEY_Armenian_tche: c_int = 16778611;
pub const IBUS_KEY_Armenian_to: c_int = 16778601;
pub const IBUS_KEY_Armenian_tsa: c_int = 16778606;
pub const IBUS_KEY_Armenian_tso: c_int = 16778625;
pub const IBUS_KEY_Armenian_tyun: c_int = 16778623;
pub const IBUS_KEY_Armenian_verjaket: c_int = 16778633;
pub const IBUS_KEY_Armenian_vev: c_int = 16778622;
pub const IBUS_KEY_Armenian_vo: c_int = 16778616;
pub const IBUS_KEY_Armenian_vyun: c_int = 16778626;
pub const IBUS_KEY_Armenian_yech: c_int = 16778597;
pub const IBUS_KEY_Armenian_yentamna: c_int = 16778634;
pub const IBUS_KEY_Armenian_za: c_int = 16778598;
pub const IBUS_KEY_Armenian_zhe: c_int = 16778602;
pub const IBUS_KEY_Atilde: c_int = 195;
pub const IBUS_KEY_AudibleBell_Enable: c_int = 65146;
pub const IBUS_KEY_AudioCycleTrack: c_int = 269025179;
pub const IBUS_KEY_AudioForward: c_int = 269025175;
pub const IBUS_KEY_AudioLowerVolume: c_int = 269025041;
pub const IBUS_KEY_AudioMedia: c_int = 269025074;
pub const IBUS_KEY_AudioMicMute: c_int = 269025202;
pub const IBUS_KEY_AudioMute: c_int = 269025042;
pub const IBUS_KEY_AudioNext: c_int = 269025047;
pub const IBUS_KEY_AudioPause: c_int = 269025073;
pub const IBUS_KEY_AudioPlay: c_int = 269025044;
pub const IBUS_KEY_AudioPreset: c_int = 269025206;
pub const IBUS_KEY_AudioPrev: c_int = 269025046;
pub const IBUS_KEY_AudioRaiseVolume: c_int = 269025043;
pub const IBUS_KEY_AudioRandomPlay: c_int = 269025177;
pub const IBUS_KEY_AudioRecord: c_int = 269025052;
pub const IBUS_KEY_AudioRepeat: c_int = 269025176;
pub const IBUS_KEY_AudioRewind: c_int = 269025086;
pub const IBUS_KEY_AudioStop: c_int = 269025045;
pub const IBUS_KEY_Away: c_int = 269025165;
pub const IBUS_KEY_B: c_int = 66;
pub const IBUS_KEY_Babovedot: c_int = 16784898;
pub const IBUS_KEY_Back: c_int = 269025062;
pub const IBUS_KEY_BackForward: c_int = 269025087;
pub const IBUS_KEY_BackSpace: c_int = 65288;
pub const IBUS_KEY_Battery: c_int = 269025171;
pub const IBUS_KEY_Begin: c_int = 65368;
pub const IBUS_KEY_Blue: c_int = 269025190;
pub const IBUS_KEY_Bluetooth: c_int = 269025172;
pub const IBUS_KEY_Book: c_int = 269025106;
pub const IBUS_KEY_BounceKeys_Enable: c_int = 65140;
pub const IBUS_KEY_Break: c_int = 65387;
pub const IBUS_KEY_BrightnessAdjust: c_int = 269025083;
pub const IBUS_KEY_Byelorussian_SHORTU: c_int = 1726;
pub const IBUS_KEY_Byelorussian_shortu: c_int = 1710;
pub const IBUS_KEY_C: c_int = 67;
pub const IBUS_KEY_CD: c_int = 269025107;
pub const IBUS_KEY_CH: c_int = 65186;
pub const IBUS_KEY_C_H: c_int = 65189;
pub const IBUS_KEY_C_h: c_int = 65188;
pub const IBUS_KEY_Cabovedot: c_int = 709;
pub const IBUS_KEY_Cacute: c_int = 454;
pub const IBUS_KEY_Calculator: c_int = 269025053;
pub const IBUS_KEY_Calendar: c_int = 269025056;
pub const IBUS_KEY_Cancel: c_int = 65385;
pub const IBUS_KEY_Caps_Lock: c_int = 65509;
pub const IBUS_KEY_Ccaron: c_int = 456;
pub const IBUS_KEY_Ccedilla: c_int = 199;
pub const IBUS_KEY_Ccircumflex: c_int = 710;
pub const IBUS_KEY_Ch: c_int = 65185;
pub const IBUS_KEY_Clear: c_int = 65291;
pub const IBUS_KEY_ClearGrab: c_int = 269024801;
pub const IBUS_KEY_Close: c_int = 269025110;
pub const IBUS_KEY_Codeinput: c_int = 65335;
pub const IBUS_KEY_ColonSign: c_int = 16785569;
pub const IBUS_KEY_Community: c_int = 269025085;
pub const IBUS_KEY_ContrastAdjust: c_int = 269025058;
pub const IBUS_KEY_Control_L: c_int = 65507;
pub const IBUS_KEY_Control_R: c_int = 65508;
pub const IBUS_KEY_Copy: c_int = 269025111;
pub const IBUS_KEY_CruzeiroSign: c_int = 16785570;
pub const IBUS_KEY_Cut: c_int = 269025112;
pub const IBUS_KEY_CycleAngle: c_int = 269025180;
pub const IBUS_KEY_Cyrillic_A: c_int = 1761;
pub const IBUS_KEY_Cyrillic_BE: c_int = 1762;
pub const IBUS_KEY_Cyrillic_CHE: c_int = 1790;
pub const IBUS_KEY_Cyrillic_CHE_descender: c_int = 16778422;
pub const IBUS_KEY_Cyrillic_CHE_vertstroke: c_int = 16778424;
pub const IBUS_KEY_Cyrillic_DE: c_int = 1764;
pub const IBUS_KEY_Cyrillic_DZHE: c_int = 1727;
pub const IBUS_KEY_Cyrillic_E: c_int = 1788;
pub const IBUS_KEY_Cyrillic_EF: c_int = 1766;
pub const IBUS_KEY_Cyrillic_EL: c_int = 1772;
pub const IBUS_KEY_Cyrillic_EM: c_int = 1773;
pub const IBUS_KEY_Cyrillic_EN: c_int = 1774;
pub const IBUS_KEY_Cyrillic_EN_descender: c_int = 16778402;
pub const IBUS_KEY_Cyrillic_ER: c_int = 1778;
pub const IBUS_KEY_Cyrillic_ES: c_int = 1779;
pub const IBUS_KEY_Cyrillic_GHE: c_int = 1767;
pub const IBUS_KEY_Cyrillic_GHE_bar: c_int = 16778386;
pub const IBUS_KEY_Cyrillic_HA: c_int = 1768;
pub const IBUS_KEY_Cyrillic_HARDSIGN: c_int = 1791;
pub const IBUS_KEY_Cyrillic_HA_descender: c_int = 16778418;
pub const IBUS_KEY_Cyrillic_I: c_int = 1769;
pub const IBUS_KEY_Cyrillic_IE: c_int = 1765;
pub const IBUS_KEY_Cyrillic_IO: c_int = 1715;
pub const IBUS_KEY_Cyrillic_I_macron: c_int = 16778466;
pub const IBUS_KEY_Cyrillic_JE: c_int = 1720;
pub const IBUS_KEY_Cyrillic_KA: c_int = 1771;
pub const IBUS_KEY_Cyrillic_KA_descender: c_int = 16778394;
pub const IBUS_KEY_Cyrillic_KA_vertstroke: c_int = 16778396;
pub const IBUS_KEY_Cyrillic_LJE: c_int = 1721;
pub const IBUS_KEY_Cyrillic_NJE: c_int = 1722;
pub const IBUS_KEY_Cyrillic_O: c_int = 1775;
pub const IBUS_KEY_Cyrillic_O_bar: c_int = 16778472;
pub const IBUS_KEY_Cyrillic_PE: c_int = 1776;
pub const IBUS_KEY_Cyrillic_SCHWA: c_int = 16778456;
pub const IBUS_KEY_Cyrillic_SHA: c_int = 1787;
pub const IBUS_KEY_Cyrillic_SHCHA: c_int = 1789;
pub const IBUS_KEY_Cyrillic_SHHA: c_int = 16778426;
pub const IBUS_KEY_Cyrillic_SHORTI: c_int = 1770;
pub const IBUS_KEY_Cyrillic_SOFTSIGN: c_int = 1784;
pub const IBUS_KEY_Cyrillic_TE: c_int = 1780;
pub const IBUS_KEY_Cyrillic_TSE: c_int = 1763;
pub const IBUS_KEY_Cyrillic_U: c_int = 1781;
pub const IBUS_KEY_Cyrillic_U_macron: c_int = 16778478;
pub const IBUS_KEY_Cyrillic_U_straight: c_int = 16778414;
pub const IBUS_KEY_Cyrillic_U_straight_bar: c_int = 16778416;
pub const IBUS_KEY_Cyrillic_VE: c_int = 1783;
pub const IBUS_KEY_Cyrillic_YA: c_int = 1777;
pub const IBUS_KEY_Cyrillic_YERU: c_int = 1785;
pub const IBUS_KEY_Cyrillic_YU: c_int = 1760;
pub const IBUS_KEY_Cyrillic_ZE: c_int = 1786;
pub const IBUS_KEY_Cyrillic_ZHE: c_int = 1782;
pub const IBUS_KEY_Cyrillic_ZHE_descender: c_int = 16778390;
pub const IBUS_KEY_Cyrillic_a: c_int = 1729;
pub const IBUS_KEY_Cyrillic_be: c_int = 1730;
pub const IBUS_KEY_Cyrillic_che: c_int = 1758;
pub const IBUS_KEY_Cyrillic_che_descender: c_int = 16778423;
pub const IBUS_KEY_Cyrillic_che_vertstroke: c_int = 16778425;
pub const IBUS_KEY_Cyrillic_de: c_int = 1732;
pub const IBUS_KEY_Cyrillic_dzhe: c_int = 1711;
pub const IBUS_KEY_Cyrillic_e: c_int = 1756;
pub const IBUS_KEY_Cyrillic_ef: c_int = 1734;
pub const IBUS_KEY_Cyrillic_el: c_int = 1740;
pub const IBUS_KEY_Cyrillic_em: c_int = 1741;
pub const IBUS_KEY_Cyrillic_en: c_int = 1742;
pub const IBUS_KEY_Cyrillic_en_descender: c_int = 16778403;
pub const IBUS_KEY_Cyrillic_er: c_int = 1746;
pub const IBUS_KEY_Cyrillic_es: c_int = 1747;
pub const IBUS_KEY_Cyrillic_ghe: c_int = 1735;
pub const IBUS_KEY_Cyrillic_ghe_bar: c_int = 16778387;
pub const IBUS_KEY_Cyrillic_ha: c_int = 1736;
pub const IBUS_KEY_Cyrillic_ha_descender: c_int = 16778419;
pub const IBUS_KEY_Cyrillic_hardsign: c_int = 1759;
pub const IBUS_KEY_Cyrillic_i: c_int = 1737;
pub const IBUS_KEY_Cyrillic_i_macron: c_int = 16778467;
pub const IBUS_KEY_Cyrillic_ie: c_int = 1733;
pub const IBUS_KEY_Cyrillic_io: c_int = 1699;
pub const IBUS_KEY_Cyrillic_je: c_int = 1704;
pub const IBUS_KEY_Cyrillic_ka: c_int = 1739;
pub const IBUS_KEY_Cyrillic_ka_descender: c_int = 16778395;
pub const IBUS_KEY_Cyrillic_ka_vertstroke: c_int = 16778397;
pub const IBUS_KEY_Cyrillic_lje: c_int = 1705;
pub const IBUS_KEY_Cyrillic_nje: c_int = 1706;
pub const IBUS_KEY_Cyrillic_o: c_int = 1743;
pub const IBUS_KEY_Cyrillic_o_bar: c_int = 16778473;
pub const IBUS_KEY_Cyrillic_pe: c_int = 1744;
pub const IBUS_KEY_Cyrillic_schwa: c_int = 16778457;
pub const IBUS_KEY_Cyrillic_sha: c_int = 1755;
pub const IBUS_KEY_Cyrillic_shcha: c_int = 1757;
pub const IBUS_KEY_Cyrillic_shha: c_int = 16778427;
pub const IBUS_KEY_Cyrillic_shorti: c_int = 1738;
pub const IBUS_KEY_Cyrillic_softsign: c_int = 1752;
pub const IBUS_KEY_Cyrillic_te: c_int = 1748;
pub const IBUS_KEY_Cyrillic_tse: c_int = 1731;
pub const IBUS_KEY_Cyrillic_u: c_int = 1749;
pub const IBUS_KEY_Cyrillic_u_macron: c_int = 16778479;
pub const IBUS_KEY_Cyrillic_u_straight: c_int = 16778415;
pub const IBUS_KEY_Cyrillic_u_straight_bar: c_int = 16778417;
pub const IBUS_KEY_Cyrillic_ve: c_int = 1751;
pub const IBUS_KEY_Cyrillic_ya: c_int = 1745;
pub const IBUS_KEY_Cyrillic_yeru: c_int = 1753;
pub const IBUS_KEY_Cyrillic_yu: c_int = 1728;
pub const IBUS_KEY_Cyrillic_ze: c_int = 1754;
pub const IBUS_KEY_Cyrillic_zhe: c_int = 1750;
pub const IBUS_KEY_Cyrillic_zhe_descender: c_int = 16778391;
pub const IBUS_KEY_D: c_int = 68;
pub const IBUS_KEY_DOS: c_int = 269025114;
pub const IBUS_KEY_Dabovedot: c_int = 16784906;
pub const IBUS_KEY_Dcaron: c_int = 463;
pub const IBUS_KEY_Delete: c_int = 65535;
pub const IBUS_KEY_Display: c_int = 269025113;
pub const IBUS_KEY_Documents: c_int = 269025115;
pub const IBUS_KEY_DongSign: c_int = 16785579;
pub const IBUS_KEY_Down: c_int = 65364;
pub const IBUS_KEY_Dstroke: c_int = 464;
pub const IBUS_KEY_E: c_int = 69;
pub const IBUS_KEY_ENG: c_int = 957;
pub const IBUS_KEY_ETH: c_int = 208;
pub const IBUS_KEY_EZH: c_int = 16777655;
pub const IBUS_KEY_Eabovedot: c_int = 972;
pub const IBUS_KEY_Eacute: c_int = 201;
pub const IBUS_KEY_Ebelowdot: c_int = 16785080;
pub const IBUS_KEY_Ecaron: c_int = 460;
pub const IBUS_KEY_Ecircumflex: c_int = 202;
pub const IBUS_KEY_Ecircumflexacute: c_int = 16785086;
pub const IBUS_KEY_Ecircumflexbelowdot: c_int = 16785094;
pub const IBUS_KEY_Ecircumflexgrave: c_int = 16785088;
pub const IBUS_KEY_Ecircumflexhook: c_int = 16785090;
pub const IBUS_KEY_Ecircumflextilde: c_int = 16785092;
pub const IBUS_KEY_EcuSign: c_int = 16785568;
pub const IBUS_KEY_Ediaeresis: c_int = 203;
pub const IBUS_KEY_Egrave: c_int = 200;
pub const IBUS_KEY_Ehook: c_int = 16785082;
pub const IBUS_KEY_Eisu_Shift: c_int = 65327;
pub const IBUS_KEY_Eisu_toggle: c_int = 65328;
pub const IBUS_KEY_Eject: c_int = 269025068;
pub const IBUS_KEY_Emacron: c_int = 938;
pub const IBUS_KEY_End: c_int = 65367;
pub const IBUS_KEY_Eogonek: c_int = 458;
pub const IBUS_KEY_Escape: c_int = 65307;
pub const IBUS_KEY_Eth: c_int = 208;
pub const IBUS_KEY_Etilde: c_int = 16785084;
pub const IBUS_KEY_EuroSign: c_int = 8364;
pub const IBUS_KEY_Excel: c_int = 269025116;
pub const IBUS_KEY_Execute: c_int = 65378;
pub const IBUS_KEY_Explorer: c_int = 269025117;
pub const IBUS_KEY_F: c_int = 70;
pub const IBUS_KEY_F1: c_int = 65470;
pub const IBUS_KEY_F10: c_int = 65479;
pub const IBUS_KEY_F11: c_int = 65480;
pub const IBUS_KEY_F12: c_int = 65481;
pub const IBUS_KEY_F13: c_int = 65482;
pub const IBUS_KEY_F14: c_int = 65483;
pub const IBUS_KEY_F15: c_int = 65484;
pub const IBUS_KEY_F16: c_int = 65485;
pub const IBUS_KEY_F17: c_int = 65486;
pub const IBUS_KEY_F18: c_int = 65487;
pub const IBUS_KEY_F19: c_int = 65488;
pub const IBUS_KEY_F2: c_int = 65471;
pub const IBUS_KEY_F20: c_int = 65489;
pub const IBUS_KEY_F21: c_int = 65490;
pub const IBUS_KEY_F22: c_int = 65491;
pub const IBUS_KEY_F23: c_int = 65492;
pub const IBUS_KEY_F24: c_int = 65493;
pub const IBUS_KEY_F25: c_int = 65494;
pub const IBUS_KEY_F26: c_int = 65495;
pub const IBUS_KEY_F27: c_int = 65496;
pub const IBUS_KEY_F28: c_int = 65497;
pub const IBUS_KEY_F29: c_int = 65498;
pub const IBUS_KEY_F3: c_int = 65472;
pub const IBUS_KEY_F30: c_int = 65499;
pub const IBUS_KEY_F31: c_int = 65500;
pub const IBUS_KEY_F32: c_int = 65501;
pub const IBUS_KEY_F33: c_int = 65502;
pub const IBUS_KEY_F34: c_int = 65503;
pub const IBUS_KEY_F35: c_int = 65504;
pub const IBUS_KEY_F4: c_int = 65473;
pub const IBUS_KEY_F5: c_int = 65474;
pub const IBUS_KEY_F6: c_int = 65475;
pub const IBUS_KEY_F7: c_int = 65476;
pub const IBUS_KEY_F8: c_int = 65477;
pub const IBUS_KEY_F9: c_int = 65478;
pub const IBUS_KEY_FFrancSign: c_int = 16785571;
pub const IBUS_KEY_Fabovedot: c_int = 16784926;
pub const IBUS_KEY_Farsi_0: c_int = 16778992;
pub const IBUS_KEY_Farsi_1: c_int = 16778993;
pub const IBUS_KEY_Farsi_2: c_int = 16778994;
pub const IBUS_KEY_Farsi_3: c_int = 16778995;
pub const IBUS_KEY_Farsi_4: c_int = 16778996;
pub const IBUS_KEY_Farsi_5: c_int = 16778997;
pub const IBUS_KEY_Farsi_6: c_int = 16778998;
pub const IBUS_KEY_Farsi_7: c_int = 16778999;
pub const IBUS_KEY_Farsi_8: c_int = 16779000;
pub const IBUS_KEY_Farsi_9: c_int = 16779001;
pub const IBUS_KEY_Farsi_yeh: c_int = 16778956;
pub const IBUS_KEY_Favorites: c_int = 269025072;
pub const IBUS_KEY_Finance: c_int = 269025084;
pub const IBUS_KEY_Find: c_int = 65384;
pub const IBUS_KEY_First_Virtual_Screen: c_int = 65232;
pub const IBUS_KEY_Forward: c_int = 269025063;
pub const IBUS_KEY_FrameBack: c_int = 269025181;
pub const IBUS_KEY_FrameForward: c_int = 269025182;
pub const IBUS_KEY_G: c_int = 71;
pub const IBUS_KEY_Gabovedot: c_int = 725;
pub const IBUS_KEY_Game: c_int = 269025118;
pub const IBUS_KEY_Gbreve: c_int = 683;
pub const IBUS_KEY_Gcaron: c_int = 16777702;
pub const IBUS_KEY_Gcedilla: c_int = 939;
pub const IBUS_KEY_Gcircumflex: c_int = 728;
pub const IBUS_KEY_Georgian_an: c_int = 16781520;
pub const IBUS_KEY_Georgian_ban: c_int = 16781521;
pub const IBUS_KEY_Georgian_can: c_int = 16781546;
pub const IBUS_KEY_Georgian_char: c_int = 16781549;
pub const IBUS_KEY_Georgian_chin: c_int = 16781545;
pub const IBUS_KEY_Georgian_cil: c_int = 16781548;
pub const IBUS_KEY_Georgian_don: c_int = 16781523;
pub const IBUS_KEY_Georgian_en: c_int = 16781524;
pub const IBUS_KEY_Georgian_fi: c_int = 16781558;
pub const IBUS_KEY_Georgian_gan: c_int = 16781522;
pub const IBUS_KEY_Georgian_ghan: c_int = 16781542;
pub const IBUS_KEY_Georgian_hae: c_int = 16781552;
pub const IBUS_KEY_Georgian_har: c_int = 16781556;
pub const IBUS_KEY_Georgian_he: c_int = 16781553;
pub const IBUS_KEY_Georgian_hie: c_int = 16781554;
pub const IBUS_KEY_Georgian_hoe: c_int = 16781557;
pub const IBUS_KEY_Georgian_in: c_int = 16781528;
pub const IBUS_KEY_Georgian_jhan: c_int = 16781551;
pub const IBUS_KEY_Georgian_jil: c_int = 16781547;
pub const IBUS_KEY_Georgian_kan: c_int = 16781529;
pub const IBUS_KEY_Georgian_khar: c_int = 16781541;
pub const IBUS_KEY_Georgian_las: c_int = 16781530;
pub const IBUS_KEY_Georgian_man: c_int = 16781531;
pub const IBUS_KEY_Georgian_nar: c_int = 16781532;
pub const IBUS_KEY_Georgian_on: c_int = 16781533;
pub const IBUS_KEY_Georgian_par: c_int = 16781534;
pub const IBUS_KEY_Georgian_phar: c_int = 16781540;
pub const IBUS_KEY_Georgian_qar: c_int = 16781543;
pub const IBUS_KEY_Georgian_rae: c_int = 16781536;
pub const IBUS_KEY_Georgian_san: c_int = 16781537;
pub const IBUS_KEY_Georgian_shin: c_int = 16781544;
pub const IBUS_KEY_Georgian_tan: c_int = 16781527;
pub const IBUS_KEY_Georgian_tar: c_int = 16781538;
pub const IBUS_KEY_Georgian_un: c_int = 16781539;
pub const IBUS_KEY_Georgian_vin: c_int = 16781525;
pub const IBUS_KEY_Georgian_we: c_int = 16781555;
pub const IBUS_KEY_Georgian_xan: c_int = 16781550;
pub const IBUS_KEY_Georgian_zen: c_int = 16781526;
pub const IBUS_KEY_Georgian_zhar: c_int = 16781535;
pub const IBUS_KEY_Go: c_int = 269025119;
pub const IBUS_KEY_Greek_ALPHA: c_int = 1985;
pub const IBUS_KEY_Greek_ALPHAaccent: c_int = 1953;
pub const IBUS_KEY_Greek_BETA: c_int = 1986;
pub const IBUS_KEY_Greek_CHI: c_int = 2007;
pub const IBUS_KEY_Greek_DELTA: c_int = 1988;
pub const IBUS_KEY_Greek_EPSILON: c_int = 1989;
pub const IBUS_KEY_Greek_EPSILONaccent: c_int = 1954;
pub const IBUS_KEY_Greek_ETA: c_int = 1991;
pub const IBUS_KEY_Greek_ETAaccent: c_int = 1955;
pub const IBUS_KEY_Greek_GAMMA: c_int = 1987;
pub const IBUS_KEY_Greek_IOTA: c_int = 1993;
pub const IBUS_KEY_Greek_IOTAaccent: c_int = 1956;
pub const IBUS_KEY_Greek_IOTAdiaeresis: c_int = 1957;
pub const IBUS_KEY_Greek_IOTAdieresis: c_int = 1957;
pub const IBUS_KEY_Greek_KAPPA: c_int = 1994;
pub const IBUS_KEY_Greek_LAMBDA: c_int = 1995;
pub const IBUS_KEY_Greek_LAMDA: c_int = 1995;
pub const IBUS_KEY_Greek_MU: c_int = 1996;
pub const IBUS_KEY_Greek_NU: c_int = 1997;
pub const IBUS_KEY_Greek_OMEGA: c_int = 2009;
pub const IBUS_KEY_Greek_OMEGAaccent: c_int = 1963;
pub const IBUS_KEY_Greek_OMICRON: c_int = 1999;
pub const IBUS_KEY_Greek_OMICRONaccent: c_int = 1959;
pub const IBUS_KEY_Greek_PHI: c_int = 2006;
pub const IBUS_KEY_Greek_PI: c_int = 2000;
pub const IBUS_KEY_Greek_PSI: c_int = 2008;
pub const IBUS_KEY_Greek_RHO: c_int = 2001;
pub const IBUS_KEY_Greek_SIGMA: c_int = 2002;
pub const IBUS_KEY_Greek_TAU: c_int = 2004;
pub const IBUS_KEY_Greek_THETA: c_int = 1992;
pub const IBUS_KEY_Greek_UPSILON: c_int = 2005;
pub const IBUS_KEY_Greek_UPSILONaccent: c_int = 1960;
pub const IBUS_KEY_Greek_UPSILONdieresis: c_int = 1961;
pub const IBUS_KEY_Greek_XI: c_int = 1998;
pub const IBUS_KEY_Greek_ZETA: c_int = 1990;
pub const IBUS_KEY_Greek_accentdieresis: c_int = 1966;
pub const IBUS_KEY_Greek_alpha: c_int = 2017;
pub const IBUS_KEY_Greek_alphaaccent: c_int = 1969;
pub const IBUS_KEY_Greek_beta: c_int = 2018;
pub const IBUS_KEY_Greek_chi: c_int = 2039;
pub const IBUS_KEY_Greek_delta: c_int = 2020;
pub const IBUS_KEY_Greek_epsilon: c_int = 2021;
pub const IBUS_KEY_Greek_epsilonaccent: c_int = 1970;
pub const IBUS_KEY_Greek_eta: c_int = 2023;
pub const IBUS_KEY_Greek_etaaccent: c_int = 1971;
pub const IBUS_KEY_Greek_finalsmallsigma: c_int = 2035;
pub const IBUS_KEY_Greek_gamma: c_int = 2019;
pub const IBUS_KEY_Greek_horizbar: c_int = 1967;
pub const IBUS_KEY_Greek_iota: c_int = 2025;
pub const IBUS_KEY_Greek_iotaaccent: c_int = 1972;
pub const IBUS_KEY_Greek_iotaaccentdieresis: c_int = 1974;
pub const IBUS_KEY_Greek_iotadieresis: c_int = 1973;
pub const IBUS_KEY_Greek_kappa: c_int = 2026;
pub const IBUS_KEY_Greek_lambda: c_int = 2027;
pub const IBUS_KEY_Greek_lamda: c_int = 2027;
pub const IBUS_KEY_Greek_mu: c_int = 2028;
pub const IBUS_KEY_Greek_nu: c_int = 2029;
pub const IBUS_KEY_Greek_omega: c_int = 2041;
pub const IBUS_KEY_Greek_omegaaccent: c_int = 1979;
pub const IBUS_KEY_Greek_omicron: c_int = 2031;
pub const IBUS_KEY_Greek_omicronaccent: c_int = 1975;
pub const IBUS_KEY_Greek_phi: c_int = 2038;
pub const IBUS_KEY_Greek_pi: c_int = 2032;
pub const IBUS_KEY_Greek_psi: c_int = 2040;
pub const IBUS_KEY_Greek_rho: c_int = 2033;
pub const IBUS_KEY_Greek_sigma: c_int = 2034;
pub const IBUS_KEY_Greek_switch: c_int = 65406;
pub const IBUS_KEY_Greek_tau: c_int = 2036;
pub const IBUS_KEY_Greek_theta: c_int = 2024;
pub const IBUS_KEY_Greek_upsilon: c_int = 2037;
pub const IBUS_KEY_Greek_upsilonaccent: c_int = 1976;
pub const IBUS_KEY_Greek_upsilonaccentdieresis: c_int = 1978;
pub const IBUS_KEY_Greek_upsilondieresis: c_int = 1977;
pub const IBUS_KEY_Greek_xi: c_int = 2030;
pub const IBUS_KEY_Greek_zeta: c_int = 2022;
pub const IBUS_KEY_Green: c_int = 269025188;
pub const IBUS_KEY_H: c_int = 72;
pub const IBUS_KEY_Hangul: c_int = 65329;
pub const IBUS_KEY_Hangul_A: c_int = 3775;
pub const IBUS_KEY_Hangul_AE: c_int = 3776;
pub const IBUS_KEY_Hangul_AraeA: c_int = 3830;
pub const IBUS_KEY_Hangul_AraeAE: c_int = 3831;
pub const IBUS_KEY_Hangul_Banja: c_int = 65337;
pub const IBUS_KEY_Hangul_Cieuc: c_int = 3770;
pub const IBUS_KEY_Hangul_Codeinput: c_int = 65335;
pub const IBUS_KEY_Hangul_Dikeud: c_int = 3751;
pub const IBUS_KEY_Hangul_E: c_int = 3780;
pub const IBUS_KEY_Hangul_EO: c_int = 3779;
pub const IBUS_KEY_Hangul_EU: c_int = 3793;
pub const IBUS_KEY_Hangul_End: c_int = 65331;
pub const IBUS_KEY_Hangul_Hanja: c_int = 65332;
pub const IBUS_KEY_Hangul_Hieuh: c_int = 3774;
pub const IBUS_KEY_Hangul_I: c_int = 3795;
pub const IBUS_KEY_Hangul_Ieung: c_int = 3767;
pub const IBUS_KEY_Hangul_J_Cieuc: c_int = 3818;
pub const IBUS_KEY_Hangul_J_Dikeud: c_int = 3802;
pub const IBUS_KEY_Hangul_J_Hieuh: c_int = 3822;
pub const IBUS_KEY_Hangul_J_Ieung: c_int = 3816;
pub const IBUS_KEY_Hangul_J_Jieuj: c_int = 3817;
pub const IBUS_KEY_Hangul_J_Khieuq: c_int = 3819;
pub const IBUS_KEY_Hangul_J_Kiyeog: c_int = 3796;
pub const IBUS_KEY_Hangul_J_KiyeogSios: c_int = 3798;
pub const IBUS_KEY_Hangul_J_KkogjiDalrinIeung: c_int = 3833;
pub const IBUS_KEY_Hangul_J_Mieum: c_int = 3811;
pub const IBUS_KEY_Hangul_J_Nieun: c_int = 3799;
pub const IBUS_KEY_Hangul_J_NieunHieuh: c_int = 3801;
pub const IBUS_KEY_Hangul_J_NieunJieuj: c_int = 3800;
pub const IBUS_KEY_Hangul_J_PanSios: c_int = 3832;
pub const IBUS_KEY_Hangul_J_Phieuf: c_int = 3821;
pub const IBUS_KEY_Hangul_J_Pieub: c_int = 3812;
pub const IBUS_KEY_Hangul_J_PieubSios: c_int = 3813;
pub const IBUS_KEY_Hangul_J_Rieul: c_int = 3803;
pub const IBUS_KEY_Hangul_J_RieulHieuh: c_int = 3810;
pub const IBUS_KEY_Hangul_J_RieulKiyeog: c_int = 3804;
pub const IBUS_KEY_Hangul_J_RieulMieum: c_int = 3805;
pub const IBUS_KEY_Hangul_J_RieulPhieuf: c_int = 3809;
pub const IBUS_KEY_Hangul_J_RieulPieub: c_int = 3806;
pub const IBUS_KEY_Hangul_J_RieulSios: c_int = 3807;
pub const IBUS_KEY_Hangul_J_RieulTieut: c_int = 3808;
pub const IBUS_KEY_Hangul_J_Sios: c_int = 3814;
pub const IBUS_KEY_Hangul_J_SsangKiyeog: c_int = 3797;
pub const IBUS_KEY_Hangul_J_SsangSios: c_int = 3815;
pub const IBUS_KEY_Hangul_J_Tieut: c_int = 3820;
pub const IBUS_KEY_Hangul_J_YeorinHieuh: c_int = 3834;
pub const IBUS_KEY_Hangul_Jamo: c_int = 65333;
pub const IBUS_KEY_Hangul_Jeonja: c_int = 65336;
pub const IBUS_KEY_Hangul_Jieuj: c_int = 3768;
pub const IBUS_KEY_Hangul_Khieuq: c_int = 3771;
pub const IBUS_KEY_Hangul_Kiyeog: c_int = 3745;
pub const IBUS_KEY_Hangul_KiyeogSios: c_int = 3747;
pub const IBUS_KEY_Hangul_KkogjiDalrinIeung: c_int = 3827;
pub const IBUS_KEY_Hangul_Mieum: c_int = 3761;
pub const IBUS_KEY_Hangul_MultipleCandidate: c_int = 65341;
pub const IBUS_KEY_Hangul_Nieun: c_int = 3748;
pub const IBUS_KEY_Hangul_NieunHieuh: c_int = 3750;
pub const IBUS_KEY_Hangul_NieunJieuj: c_int = 3749;
pub const IBUS_KEY_Hangul_O: c_int = 3783;
pub const IBUS_KEY_Hangul_OE: c_int = 3786;
pub const IBUS_KEY_Hangul_PanSios: c_int = 3826;
pub const IBUS_KEY_Hangul_Phieuf: c_int = 3773;
pub const IBUS_KEY_Hangul_Pieub: c_int = 3762;
pub const IBUS_KEY_Hangul_PieubSios: c_int = 3764;
pub const IBUS_KEY_Hangul_PostHanja: c_int = 65339;
pub const IBUS_KEY_Hangul_PreHanja: c_int = 65338;
pub const IBUS_KEY_Hangul_PreviousCandidate: c_int = 65342;
pub const IBUS_KEY_Hangul_Rieul: c_int = 3753;
pub const IBUS_KEY_Hangul_RieulHieuh: c_int = 3760;
pub const IBUS_KEY_Hangul_RieulKiyeog: c_int = 3754;
pub const IBUS_KEY_Hangul_RieulMieum: c_int = 3755;
pub const IBUS_KEY_Hangul_RieulPhieuf: c_int = 3759;
pub const IBUS_KEY_Hangul_RieulPieub: c_int = 3756;
pub const IBUS_KEY_Hangul_RieulSios: c_int = 3757;
pub const IBUS_KEY_Hangul_RieulTieut: c_int = 3758;
pub const IBUS_KEY_Hangul_RieulYeorinHieuh: c_int = 3823;
pub const IBUS_KEY_Hangul_Romaja: c_int = 65334;
pub const IBUS_KEY_Hangul_SingleCandidate: c_int = 65340;
pub const IBUS_KEY_Hangul_Sios: c_int = 3765;
pub const IBUS_KEY_Hangul_Special: c_int = 65343;
pub const IBUS_KEY_Hangul_SsangDikeud: c_int = 3752;
pub const IBUS_KEY_Hangul_SsangJieuj: c_int = 3769;
pub const IBUS_KEY_Hangul_SsangKiyeog: c_int = 3746;
pub const IBUS_KEY_Hangul_SsangPieub: c_int = 3763;
pub const IBUS_KEY_Hangul_SsangSios: c_int = 3766;
pub const IBUS_KEY_Hangul_Start: c_int = 65330;
pub const IBUS_KEY_Hangul_SunkyeongeumMieum: c_int = 3824;
pub const IBUS_KEY_Hangul_SunkyeongeumPhieuf: c_int = 3828;
pub const IBUS_KEY_Hangul_SunkyeongeumPieub: c_int = 3825;
pub const IBUS_KEY_Hangul_Tieut: c_int = 3772;
pub const IBUS_KEY_Hangul_U: c_int = 3788;
pub const IBUS_KEY_Hangul_WA: c_int = 3784;
pub const IBUS_KEY_Hangul_WAE: c_int = 3785;
pub const IBUS_KEY_Hangul_WE: c_int = 3790;
pub const IBUS_KEY_Hangul_WEO: c_int = 3789;
pub const IBUS_KEY_Hangul_WI: c_int = 3791;
pub const IBUS_KEY_Hangul_YA: c_int = 3777;
pub const IBUS_KEY_Hangul_YAE: c_int = 3778;
pub const IBUS_KEY_Hangul_YE: c_int = 3782;
pub const IBUS_KEY_Hangul_YEO: c_int = 3781;
pub const IBUS_KEY_Hangul_YI: c_int = 3794;
pub const IBUS_KEY_Hangul_YO: c_int = 3787;
pub const IBUS_KEY_Hangul_YU: c_int = 3792;
pub const IBUS_KEY_Hangul_YeorinHieuh: c_int = 3829;
pub const IBUS_KEY_Hangul_switch: c_int = 65406;
pub const IBUS_KEY_Hankaku: c_int = 65321;
pub const IBUS_KEY_Hcircumflex: c_int = 678;
pub const IBUS_KEY_Hebrew_switch: c_int = 65406;
pub const IBUS_KEY_Help: c_int = 65386;
pub const IBUS_KEY_Henkan: c_int = 65315;
pub const IBUS_KEY_Henkan_Mode: c_int = 65315;
pub const IBUS_KEY_Hibernate: c_int = 269025192;
pub const IBUS_KEY_Hiragana: c_int = 65317;
pub const IBUS_KEY_Hiragana_Katakana: c_int = 65319;
pub const IBUS_KEY_History: c_int = 269025079;
pub const IBUS_KEY_Home: c_int = 65360;
pub const IBUS_KEY_HomePage: c_int = 269025048;
pub const IBUS_KEY_HotLinks: c_int = 269025082;
pub const IBUS_KEY_Hstroke: c_int = 673;
pub const IBUS_KEY_Hyper_L: c_int = 65517;
pub const IBUS_KEY_Hyper_R: c_int = 65518;
pub const IBUS_KEY_I: c_int = 73;
pub const IBUS_KEY_ISO_Center_Object: c_int = 65075;
pub const IBUS_KEY_ISO_Continuous_Underline: c_int = 65072;
pub const IBUS_KEY_ISO_Discontinuous_Underline: c_int = 65073;
pub const IBUS_KEY_ISO_Emphasize: c_int = 65074;
pub const IBUS_KEY_ISO_Enter: c_int = 65076;
pub const IBUS_KEY_ISO_Fast_Cursor_Down: c_int = 65071;
pub const IBUS_KEY_ISO_Fast_Cursor_Left: c_int = 65068;
pub const IBUS_KEY_ISO_Fast_Cursor_Right: c_int = 65069;
pub const IBUS_KEY_ISO_Fast_Cursor_Up: c_int = 65070;
pub const IBUS_KEY_ISO_First_Group: c_int = 65036;
pub const IBUS_KEY_ISO_First_Group_Lock: c_int = 65037;
pub const IBUS_KEY_ISO_Group_Latch: c_int = 65030;
pub const IBUS_KEY_ISO_Group_Lock: c_int = 65031;
pub const IBUS_KEY_ISO_Group_Shift: c_int = 65406;
pub const IBUS_KEY_ISO_Last_Group: c_int = 65038;
pub const IBUS_KEY_ISO_Last_Group_Lock: c_int = 65039;
pub const IBUS_KEY_ISO_Left_Tab: c_int = 65056;
pub const IBUS_KEY_ISO_Level2_Latch: c_int = 65026;
pub const IBUS_KEY_ISO_Level3_Latch: c_int = 65028;
pub const IBUS_KEY_ISO_Level3_Lock: c_int = 65029;
pub const IBUS_KEY_ISO_Level3_Shift: c_int = 65027;
pub const IBUS_KEY_ISO_Level5_Latch: c_int = 65042;
pub const IBUS_KEY_ISO_Level5_Lock: c_int = 65043;
pub const IBUS_KEY_ISO_Level5_Shift: c_int = 65041;
pub const IBUS_KEY_ISO_Lock: c_int = 65025;
pub const IBUS_KEY_ISO_Move_Line_Down: c_int = 65058;
pub const IBUS_KEY_ISO_Move_Line_Up: c_int = 65057;
pub const IBUS_KEY_ISO_Next_Group: c_int = 65032;
pub const IBUS_KEY_ISO_Next_Group_Lock: c_int = 65033;
pub const IBUS_KEY_ISO_Partial_Line_Down: c_int = 65060;
pub const IBUS_KEY_ISO_Partial_Line_Up: c_int = 65059;
pub const IBUS_KEY_ISO_Partial_Space_Left: c_int = 65061;
pub const IBUS_KEY_ISO_Partial_Space_Right: c_int = 65062;
pub const IBUS_KEY_ISO_Prev_Group: c_int = 65034;
pub const IBUS_KEY_ISO_Prev_Group_Lock: c_int = 65035;
pub const IBUS_KEY_ISO_Release_Both_Margins: c_int = 65067;
pub const IBUS_KEY_ISO_Release_Margin_Left: c_int = 65065;
pub const IBUS_KEY_ISO_Release_Margin_Right: c_int = 65066;
pub const IBUS_KEY_ISO_Set_Margin_Left: c_int = 65063;
pub const IBUS_KEY_ISO_Set_Margin_Right: c_int = 65064;
pub const IBUS_KEY_Iabovedot: c_int = 681;
pub const IBUS_KEY_Iacute: c_int = 205;
pub const IBUS_KEY_Ibelowdot: c_int = 16785098;
pub const IBUS_KEY_Ibreve: c_int = 16777516;
pub const IBUS_KEY_Icircumflex: c_int = 206;
pub const IBUS_KEY_Idiaeresis: c_int = 207;
pub const IBUS_KEY_Igrave: c_int = 204;
pub const IBUS_KEY_Ihook: c_int = 16785096;
pub const IBUS_KEY_Imacron: c_int = 975;
pub const IBUS_KEY_Insert: c_int = 65379;
pub const IBUS_KEY_Iogonek: c_int = 967;
pub const IBUS_KEY_Itilde: c_int = 933;
pub const IBUS_KEY_J: c_int = 74;
pub const IBUS_KEY_Jcircumflex: c_int = 684;
pub const IBUS_KEY_K: c_int = 75;
pub const IBUS_KEY_KP_0: c_int = 65456;
pub const IBUS_KEY_KP_1: c_int = 65457;
pub const IBUS_KEY_KP_2: c_int = 65458;
pub const IBUS_KEY_KP_3: c_int = 65459;
pub const IBUS_KEY_KP_4: c_int = 65460;
pub const IBUS_KEY_KP_5: c_int = 65461;
pub const IBUS_KEY_KP_6: c_int = 65462;
pub const IBUS_KEY_KP_7: c_int = 65463;
pub const IBUS_KEY_KP_8: c_int = 65464;
pub const IBUS_KEY_KP_9: c_int = 65465;
pub const IBUS_KEY_KP_Add: c_int = 65451;
pub const IBUS_KEY_KP_Begin: c_int = 65437;
pub const IBUS_KEY_KP_Decimal: c_int = 65454;
pub const IBUS_KEY_KP_Delete: c_int = 65439;
pub const IBUS_KEY_KP_Divide: c_int = 65455;
pub const IBUS_KEY_KP_Down: c_int = 65433;
pub const IBUS_KEY_KP_End: c_int = 65436;
pub const IBUS_KEY_KP_Enter: c_int = 65421;
pub const IBUS_KEY_KP_Equal: c_int = 65469;
pub const IBUS_KEY_KP_F1: c_int = 65425;
pub const IBUS_KEY_KP_F2: c_int = 65426;
pub const IBUS_KEY_KP_F3: c_int = 65427;
pub const IBUS_KEY_KP_F4: c_int = 65428;
pub const IBUS_KEY_KP_Home: c_int = 65429;
pub const IBUS_KEY_KP_Insert: c_int = 65438;
pub const IBUS_KEY_KP_Left: c_int = 65430;
pub const IBUS_KEY_KP_Multiply: c_int = 65450;
pub const IBUS_KEY_KP_Next: c_int = 65435;
pub const IBUS_KEY_KP_Page_Down: c_int = 65435;
pub const IBUS_KEY_KP_Page_Up: c_int = 65434;
pub const IBUS_KEY_KP_Prior: c_int = 65434;
pub const IBUS_KEY_KP_Right: c_int = 65432;
pub const IBUS_KEY_KP_Separator: c_int = 65452;
pub const IBUS_KEY_KP_Space: c_int = 65408;
pub const IBUS_KEY_KP_Subtract: c_int = 65453;
pub const IBUS_KEY_KP_Tab: c_int = 65417;
pub const IBUS_KEY_KP_Up: c_int = 65431;
pub const IBUS_KEY_Kana_Lock: c_int = 65325;
pub const IBUS_KEY_Kana_Shift: c_int = 65326;
pub const IBUS_KEY_Kanji: c_int = 65313;
pub const IBUS_KEY_Kanji_Bangou: c_int = 65335;
pub const IBUS_KEY_Katakana: c_int = 65318;
pub const IBUS_KEY_KbdBrightnessDown: c_int = 269025030;
pub const IBUS_KEY_KbdBrightnessUp: c_int = 269025029;
pub const IBUS_KEY_KbdLightOnOff: c_int = 269025028;
pub const IBUS_KEY_Kcedilla: c_int = 979;
pub const IBUS_KEY_Keyboard: c_int = 269025203;
pub const IBUS_KEY_Korean_Won: c_int = 3839;
pub const IBUS_KEY_L: c_int = 76;
pub const IBUS_KEY_L1: c_int = 65480;
pub const IBUS_KEY_L10: c_int = 65489;
pub const IBUS_KEY_L2: c_int = 65481;
pub const IBUS_KEY_L3: c_int = 65482;
pub const IBUS_KEY_L4: c_int = 65483;
pub const IBUS_KEY_L5: c_int = 65484;
pub const IBUS_KEY_L6: c_int = 65485;
pub const IBUS_KEY_L7: c_int = 65486;
pub const IBUS_KEY_L8: c_int = 65487;
pub const IBUS_KEY_L9: c_int = 65488;
pub const IBUS_KEY_Lacute: c_int = 453;
pub const IBUS_KEY_Last_Virtual_Screen: c_int = 65236;
pub const IBUS_KEY_Launch0: c_int = 269025088;
pub const IBUS_KEY_Launch1: c_int = 269025089;
pub const IBUS_KEY_Launch2: c_int = 269025090;
pub const IBUS_KEY_Launch3: c_int = 269025091;
pub const IBUS_KEY_Launch4: c_int = 269025092;
pub const IBUS_KEY_Launch5: c_int = 269025093;
pub const IBUS_KEY_Launch6: c_int = 269025094;
pub const IBUS_KEY_Launch7: c_int = 269025095;
pub const IBUS_KEY_Launch8: c_int = 269025096;
pub const IBUS_KEY_Launch9: c_int = 269025097;
pub const IBUS_KEY_LaunchA: c_int = 269025098;
pub const IBUS_KEY_LaunchB: c_int = 269025099;
pub const IBUS_KEY_LaunchC: c_int = 269025100;
pub const IBUS_KEY_LaunchD: c_int = 269025101;
pub const IBUS_KEY_LaunchE: c_int = 269025102;
pub const IBUS_KEY_LaunchF: c_int = 269025103;
pub const IBUS_KEY_Lbelowdot: c_int = 16784950;
pub const IBUS_KEY_Lcaron: c_int = 421;
pub const IBUS_KEY_Lcedilla: c_int = 934;
pub const IBUS_KEY_Left: c_int = 65361;
pub const IBUS_KEY_LightBulb: c_int = 269025077;
pub const IBUS_KEY_Linefeed: c_int = 65290;
pub const IBUS_KEY_LiraSign: c_int = 16785572;
pub const IBUS_KEY_LogGrabInfo: c_int = 269024805;
pub const IBUS_KEY_LogOff: c_int = 269025121;
pub const IBUS_KEY_LogWindowTree: c_int = 269024804;
pub const IBUS_KEY_Lstroke: c_int = 419;
pub const IBUS_KEY_M: c_int = 77;
pub const IBUS_KEY_Mabovedot: c_int = 16784960;
pub const IBUS_KEY_Macedonia_DSE: c_int = 1717;
pub const IBUS_KEY_Macedonia_GJE: c_int = 1714;
pub const IBUS_KEY_Macedonia_KJE: c_int = 1724;
pub const IBUS_KEY_Macedonia_dse: c_int = 1701;
pub const IBUS_KEY_Macedonia_gje: c_int = 1698;
pub const IBUS_KEY_Macedonia_kje: c_int = 1708;
pub const IBUS_KEY_Mae_Koho: c_int = 65342;
pub const IBUS_KEY_Mail: c_int = 269025049;
pub const IBUS_KEY_MailForward: c_int = 269025168;
pub const IBUS_KEY_Market: c_int = 269025122;
pub const IBUS_KEY_Massyo: c_int = 65324;
pub const IBUS_KEY_Meeting: c_int = 269025123;
pub const IBUS_KEY_Memo: c_int = 269025054;
pub const IBUS_KEY_Menu: c_int = 65383;
pub const IBUS_KEY_MenuKB: c_int = 269025125;
pub const IBUS_KEY_MenuPB: c_int = 269025126;
pub const IBUS_KEY_Messenger: c_int = 269025166;
pub const IBUS_KEY_Meta_L: c_int = 65511;
pub const IBUS_KEY_Meta_R: c_int = 65512;
pub const IBUS_KEY_MillSign: c_int = 16785573;
pub const IBUS_KEY_ModeLock: c_int = 269025025;
pub const IBUS_KEY_Mode_switch: c_int = 65406;
pub const IBUS_KEY_MonBrightnessDown: c_int = 269025027;
pub const IBUS_KEY_MonBrightnessUp: c_int = 269025026;
pub const IBUS_KEY_MouseKeys_Accel_Enable: c_int = 65143;
pub const IBUS_KEY_MouseKeys_Enable: c_int = 65142;
pub const IBUS_KEY_Muhenkan: c_int = 65314;
pub const IBUS_KEY_Multi_key: c_int = 65312;
pub const IBUS_KEY_MultipleCandidate: c_int = 65341;
pub const IBUS_KEY_Music: c_int = 269025170;
pub const IBUS_KEY_MyComputer: c_int = 269025075;
pub const IBUS_KEY_MySites: c_int = 269025127;
pub const IBUS_KEY_N: c_int = 78;
pub const IBUS_KEY_Nacute: c_int = 465;
pub const IBUS_KEY_NairaSign: c_int = 16785574;
pub const IBUS_KEY_Ncaron: c_int = 466;
pub const IBUS_KEY_Ncedilla: c_int = 977;
pub const IBUS_KEY_New: c_int = 269025128;
pub const IBUS_KEY_NewSheqelSign: c_int = 16785578;
pub const IBUS_KEY_News: c_int = 269025129;
pub const IBUS_KEY_Next: c_int = 65366;
pub const IBUS_KEY_Next_VMode: c_int = 269024802;
pub const IBUS_KEY_Next_Virtual_Screen: c_int = 65234;
pub const IBUS_KEY_Ntilde: c_int = 209;
pub const IBUS_KEY_Num_Lock: c_int = 65407;
pub const IBUS_KEY_O: c_int = 79;
pub const IBUS_KEY_OE: c_int = 5052;
pub const IBUS_KEY_Oacute: c_int = 211;
pub const IBUS_KEY_Obarred: c_int = 16777631;
pub const IBUS_KEY_Obelowdot: c_int = 16785100;
pub const IBUS_KEY_Ocaron: c_int = 16777681;
pub const IBUS_KEY_Ocircumflex: c_int = 212;
pub const IBUS_KEY_Ocircumflexacute: c_int = 16785104;
pub const IBUS_KEY_Ocircumflexbelowdot: c_int = 16785112;
pub const IBUS_KEY_Ocircumflexgrave: c_int = 16785106;
pub const IBUS_KEY_Ocircumflexhook: c_int = 16785108;
pub const IBUS_KEY_Ocircumflextilde: c_int = 16785110;
pub const IBUS_KEY_Odiaeresis: c_int = 214;
pub const IBUS_KEY_Odoubleacute: c_int = 469;
pub const IBUS_KEY_OfficeHome: c_int = 269025130;
pub const IBUS_KEY_Ograve: c_int = 210;
pub const IBUS_KEY_Ohook: c_int = 16785102;
pub const IBUS_KEY_Ohorn: c_int = 16777632;
pub const IBUS_KEY_Ohornacute: c_int = 16785114;
pub const IBUS_KEY_Ohornbelowdot: c_int = 16785122;
pub const IBUS_KEY_Ohorngrave: c_int = 16785116;
pub const IBUS_KEY_Ohornhook: c_int = 16785118;
pub const IBUS_KEY_Ohorntilde: c_int = 16785120;
pub const IBUS_KEY_Omacron: c_int = 978;
pub const IBUS_KEY_Ooblique: c_int = 216;
pub const IBUS_KEY_Open: c_int = 269025131;
pub const IBUS_KEY_OpenURL: c_int = 269025080;
pub const IBUS_KEY_Option: c_int = 269025132;
pub const IBUS_KEY_Oslash: c_int = 216;
pub const IBUS_KEY_Otilde: c_int = 213;
pub const IBUS_KEY_Overlay1_Enable: c_int = 65144;
pub const IBUS_KEY_Overlay2_Enable: c_int = 65145;
pub const IBUS_KEY_P: c_int = 80;
pub const IBUS_KEY_Pabovedot: c_int = 16784982;
pub const IBUS_KEY_Page_Down: c_int = 65366;
pub const IBUS_KEY_Page_Up: c_int = 65365;
pub const IBUS_KEY_Paste: c_int = 269025133;
pub const IBUS_KEY_Pause: c_int = 65299;
pub const IBUS_KEY_PesetaSign: c_int = 16785575;
pub const IBUS_KEY_Phone: c_int = 269025134;
pub const IBUS_KEY_Pictures: c_int = 269025169;
pub const IBUS_KEY_Pointer_Accelerate: c_int = 65274;
pub const IBUS_KEY_Pointer_Button1: c_int = 65257;
pub const IBUS_KEY_Pointer_Button2: c_int = 65258;
pub const IBUS_KEY_Pointer_Button3: c_int = 65259;
pub const IBUS_KEY_Pointer_Button4: c_int = 65260;
pub const IBUS_KEY_Pointer_Button5: c_int = 65261;
pub const IBUS_KEY_Pointer_Button_Dflt: c_int = 65256;
pub const IBUS_KEY_Pointer_DblClick1: c_int = 65263;
pub const IBUS_KEY_Pointer_DblClick2: c_int = 65264;
pub const IBUS_KEY_Pointer_DblClick3: c_int = 65265;
pub const IBUS_KEY_Pointer_DblClick4: c_int = 65266;
pub const IBUS_KEY_Pointer_DblClick5: c_int = 65267;
pub const IBUS_KEY_Pointer_DblClick_Dflt: c_int = 65262;
pub const IBUS_KEY_Pointer_DfltBtnNext: c_int = 65275;
pub const IBUS_KEY_Pointer_DfltBtnPrev: c_int = 65276;
pub const IBUS_KEY_Pointer_Down: c_int = 65251;
pub const IBUS_KEY_Pointer_DownLeft: c_int = 65254;
pub const IBUS_KEY_Pointer_DownRight: c_int = 65255;
pub const IBUS_KEY_Pointer_Drag1: c_int = 65269;
pub const IBUS_KEY_Pointer_Drag2: c_int = 65270;
pub const IBUS_KEY_Pointer_Drag3: c_int = 65271;
pub const IBUS_KEY_Pointer_Drag4: c_int = 65272;
pub const IBUS_KEY_Pointer_Drag5: c_int = 65277;
pub const IBUS_KEY_Pointer_Drag_Dflt: c_int = 65268;
pub const IBUS_KEY_Pointer_EnableKeys: c_int = 65273;
pub const IBUS_KEY_Pointer_Left: c_int = 65248;
pub const IBUS_KEY_Pointer_Right: c_int = 65249;
pub const IBUS_KEY_Pointer_Up: c_int = 65250;
pub const IBUS_KEY_Pointer_UpLeft: c_int = 65252;
pub const IBUS_KEY_Pointer_UpRight: c_int = 65253;
pub const IBUS_KEY_PowerDown: c_int = 269025057;
pub const IBUS_KEY_PowerOff: c_int = 269025066;
pub const IBUS_KEY_Prev_VMode: c_int = 269024803;
pub const IBUS_KEY_Prev_Virtual_Screen: c_int = 65233;
pub const IBUS_KEY_PreviousCandidate: c_int = 65342;
pub const IBUS_KEY_Print: c_int = 65377;
pub const IBUS_KEY_Prior: c_int = 65365;
pub const IBUS_KEY_Q: c_int = 81;
pub const IBUS_KEY_R: c_int = 82;
pub const IBUS_KEY_R1: c_int = 65490;
pub const IBUS_KEY_R10: c_int = 65499;
pub const IBUS_KEY_R11: c_int = 65500;
pub const IBUS_KEY_R12: c_int = 65501;
pub const IBUS_KEY_R13: c_int = 65502;
pub const IBUS_KEY_R14: c_int = 65503;
pub const IBUS_KEY_R15: c_int = 65504;
pub const IBUS_KEY_R2: c_int = 65491;
pub const IBUS_KEY_R3: c_int = 65492;
pub const IBUS_KEY_R4: c_int = 65493;
pub const IBUS_KEY_R5: c_int = 65494;
pub const IBUS_KEY_R6: c_int = 65495;
pub const IBUS_KEY_R7: c_int = 65496;
pub const IBUS_KEY_R8: c_int = 65497;
pub const IBUS_KEY_R9: c_int = 65498;
pub const IBUS_KEY_RFKill: c_int = 269025205;
pub const IBUS_KEY_Racute: c_int = 448;
pub const IBUS_KEY_Rcaron: c_int = 472;
pub const IBUS_KEY_Rcedilla: c_int = 931;
pub const IBUS_KEY_Red: c_int = 269025187;
pub const IBUS_KEY_Redo: c_int = 65382;
pub const IBUS_KEY_Refresh: c_int = 269025065;
pub const IBUS_KEY_Reload: c_int = 269025139;
pub const IBUS_KEY_RepeatKeys_Enable: c_int = 65138;
pub const IBUS_KEY_Reply: c_int = 269025138;
pub const IBUS_KEY_Return: c_int = 65293;
pub const IBUS_KEY_Right: c_int = 65363;
pub const IBUS_KEY_RockerDown: c_int = 269025060;
pub const IBUS_KEY_RockerEnter: c_int = 269025061;
pub const IBUS_KEY_RockerUp: c_int = 269025059;
pub const IBUS_KEY_Romaji: c_int = 65316;
pub const IBUS_KEY_RotateWindows: c_int = 269025140;
pub const IBUS_KEY_RotationKB: c_int = 269025142;
pub const IBUS_KEY_RotationPB: c_int = 269025141;
pub const IBUS_KEY_RupeeSign: c_int = 16785576;
pub const IBUS_KEY_S: c_int = 83;
pub const IBUS_KEY_SCHWA: c_int = 16777615;
pub const IBUS_KEY_Sabovedot: c_int = 16784992;
pub const IBUS_KEY_Sacute: c_int = 422;
pub const IBUS_KEY_Save: c_int = 269025143;
pub const IBUS_KEY_Scaron: c_int = 425;
pub const IBUS_KEY_Scedilla: c_int = 426;
pub const IBUS_KEY_Scircumflex: c_int = 734;
pub const IBUS_KEY_ScreenSaver: c_int = 269025069;
pub const IBUS_KEY_ScrollClick: c_int = 269025146;
pub const IBUS_KEY_ScrollDown: c_int = 269025145;
pub const IBUS_KEY_ScrollUp: c_int = 269025144;
pub const IBUS_KEY_Scroll_Lock: c_int = 65300;
pub const IBUS_KEY_Search: c_int = 269025051;
pub const IBUS_KEY_Select: c_int = 65376;
pub const IBUS_KEY_SelectButton: c_int = 269025184;
pub const IBUS_KEY_Send: c_int = 269025147;
pub const IBUS_KEY_Serbian_DJE: c_int = 1713;
pub const IBUS_KEY_Serbian_DZE: c_int = 1727;
pub const IBUS_KEY_Serbian_JE: c_int = 1720;
pub const IBUS_KEY_Serbian_LJE: c_int = 1721;
pub const IBUS_KEY_Serbian_NJE: c_int = 1722;
pub const IBUS_KEY_Serbian_TSHE: c_int = 1723;
pub const IBUS_KEY_Serbian_dje: c_int = 1697;
pub const IBUS_KEY_Serbian_dze: c_int = 1711;
pub const IBUS_KEY_Serbian_je: c_int = 1704;
pub const IBUS_KEY_Serbian_lje: c_int = 1705;
pub const IBUS_KEY_Serbian_nje: c_int = 1706;
pub const IBUS_KEY_Serbian_tshe: c_int = 1707;
pub const IBUS_KEY_Shift_L: c_int = 65505;
pub const IBUS_KEY_Shift_Lock: c_int = 65510;
pub const IBUS_KEY_Shift_R: c_int = 65506;
pub const IBUS_KEY_Shop: c_int = 269025078;
pub const IBUS_KEY_SingleCandidate: c_int = 65340;
pub const IBUS_KEY_Sinh_a: c_int = 16780677;
pub const IBUS_KEY_Sinh_aa: c_int = 16780678;
pub const IBUS_KEY_Sinh_aa2: c_int = 16780751;
pub const IBUS_KEY_Sinh_ae: c_int = 16780679;
pub const IBUS_KEY_Sinh_ae2: c_int = 16780752;
pub const IBUS_KEY_Sinh_aee: c_int = 16780680;
pub const IBUS_KEY_Sinh_aee2: c_int = 16780753;
pub const IBUS_KEY_Sinh_ai: c_int = 16780691;
pub const IBUS_KEY_Sinh_ai2: c_int = 16780763;
pub const IBUS_KEY_Sinh_al: c_int = 16780746;
pub const IBUS_KEY_Sinh_au: c_int = 16780694;
pub const IBUS_KEY_Sinh_au2: c_int = 16780766;
pub const IBUS_KEY_Sinh_ba: c_int = 16780726;
pub const IBUS_KEY_Sinh_bha: c_int = 16780727;
pub const IBUS_KEY_Sinh_ca: c_int = 16780704;
pub const IBUS_KEY_Sinh_cha: c_int = 16780705;
pub const IBUS_KEY_Sinh_dda: c_int = 16780713;
pub const IBUS_KEY_Sinh_ddha: c_int = 16780714;
pub const IBUS_KEY_Sinh_dha: c_int = 16780719;
pub const IBUS_KEY_Sinh_dhha: c_int = 16780720;
pub const IBUS_KEY_Sinh_e: c_int = 16780689;
pub const IBUS_KEY_Sinh_e2: c_int = 16780761;
pub const IBUS_KEY_Sinh_ee: c_int = 16780690;
pub const IBUS_KEY_Sinh_ee2: c_int = 16780762;
pub const IBUS_KEY_Sinh_fa: c_int = 16780742;
pub const IBUS_KEY_Sinh_ga: c_int = 16780700;
pub const IBUS_KEY_Sinh_gha: c_int = 16780701;
pub const IBUS_KEY_Sinh_h2: c_int = 16780675;
pub const IBUS_KEY_Sinh_ha: c_int = 16780740;
pub const IBUS_KEY_Sinh_i: c_int = 16780681;
pub const IBUS_KEY_Sinh_i2: c_int = 16780754;
pub const IBUS_KEY_Sinh_ii: c_int = 16780682;
pub const IBUS_KEY_Sinh_ii2: c_int = 16780755;
pub const IBUS_KEY_Sinh_ja: c_int = 16780706;
pub const IBUS_KEY_Sinh_jha: c_int = 16780707;
pub const IBUS_KEY_Sinh_jnya: c_int = 16780709;
pub const IBUS_KEY_Sinh_ka: c_int = 16780698;
pub const IBUS_KEY_Sinh_kha: c_int = 16780699;
pub const IBUS_KEY_Sinh_kunddaliya: c_int = 16780788;
pub const IBUS_KEY_Sinh_la: c_int = 16780733;
pub const IBUS_KEY_Sinh_lla: c_int = 16780741;
pub const IBUS_KEY_Sinh_lu: c_int = 16780687;
pub const IBUS_KEY_Sinh_lu2: c_int = 16780767;
pub const IBUS_KEY_Sinh_luu: c_int = 16780688;
pub const IBUS_KEY_Sinh_luu2: c_int = 16780787;
pub const IBUS_KEY_Sinh_ma: c_int = 16780728;
pub const IBUS_KEY_Sinh_mba: c_int = 16780729;
pub const IBUS_KEY_Sinh_na: c_int = 16780721;
pub const IBUS_KEY_Sinh_ndda: c_int = 16780716;
pub const IBUS_KEY_Sinh_ndha: c_int = 16780723;
pub const IBUS_KEY_Sinh_ng: c_int = 16780674;
pub const IBUS_KEY_Sinh_ng2: c_int = 16780702;
pub const IBUS_KEY_Sinh_nga: c_int = 16780703;
pub const IBUS_KEY_Sinh_nja: c_int = 16780710;
pub const IBUS_KEY_Sinh_nna: c_int = 16780715;
pub const IBUS_KEY_Sinh_nya: c_int = 16780708;
pub const IBUS_KEY_Sinh_o: c_int = 16780692;
pub const IBUS_KEY_Sinh_o2: c_int = 16780764;
pub const IBUS_KEY_Sinh_oo: c_int = 16780693;
pub const IBUS_KEY_Sinh_oo2: c_int = 16780765;
pub const IBUS_KEY_Sinh_pa: c_int = 16780724;
pub const IBUS_KEY_Sinh_pha: c_int = 16780725;
pub const IBUS_KEY_Sinh_ra: c_int = 16780731;
pub const IBUS_KEY_Sinh_ri: c_int = 16780685;
pub const IBUS_KEY_Sinh_rii: c_int = 16780686;
pub const IBUS_KEY_Sinh_ru2: c_int = 16780760;
pub const IBUS_KEY_Sinh_ruu2: c_int = 16780786;
pub const IBUS_KEY_Sinh_sa: c_int = 16780739;
pub const IBUS_KEY_Sinh_sha: c_int = 16780737;
pub const IBUS_KEY_Sinh_ssha: c_int = 16780738;
pub const IBUS_KEY_Sinh_tha: c_int = 16780717;
pub const IBUS_KEY_Sinh_thha: c_int = 16780718;
pub const IBUS_KEY_Sinh_tta: c_int = 16780711;
pub const IBUS_KEY_Sinh_ttha: c_int = 16780712;
pub const IBUS_KEY_Sinh_u: c_int = 16780683;
pub const IBUS_KEY_Sinh_u2: c_int = 16780756;
pub const IBUS_KEY_Sinh_uu: c_int = 16780684;
pub const IBUS_KEY_Sinh_uu2: c_int = 16780758;
pub const IBUS_KEY_Sinh_va: c_int = 16780736;
pub const IBUS_KEY_Sinh_ya: c_int = 16780730;
pub const IBUS_KEY_Sleep: c_int = 269025071;
pub const IBUS_KEY_SlowKeys_Enable: c_int = 65139;
pub const IBUS_KEY_Spell: c_int = 269025148;
pub const IBUS_KEY_SplitScreen: c_int = 269025149;
pub const IBUS_KEY_Standby: c_int = 269025040;
pub const IBUS_KEY_Start: c_int = 269025050;
pub const IBUS_KEY_StickyKeys_Enable: c_int = 65141;
pub const IBUS_KEY_Stop: c_int = 269025064;
pub const IBUS_KEY_Subtitle: c_int = 269025178;
pub const IBUS_KEY_Super_L: c_int = 65515;
pub const IBUS_KEY_Super_R: c_int = 65516;
pub const IBUS_KEY_Support: c_int = 269025150;
pub const IBUS_KEY_Suspend: c_int = 269025191;
pub const IBUS_KEY_Switch_VT_1: c_int = 269024769;
pub const IBUS_KEY_Switch_VT_10: c_int = 269024778;
pub const IBUS_KEY_Switch_VT_11: c_int = 269024779;
pub const IBUS_KEY_Switch_VT_12: c_int = 269024780;
pub const IBUS_KEY_Switch_VT_2: c_int = 269024770;
pub const IBUS_KEY_Switch_VT_3: c_int = 269024771;
pub const IBUS_KEY_Switch_VT_4: c_int = 269024772;
pub const IBUS_KEY_Switch_VT_5: c_int = 269024773;
pub const IBUS_KEY_Switch_VT_6: c_int = 269024774;
pub const IBUS_KEY_Switch_VT_7: c_int = 269024775;
pub const IBUS_KEY_Switch_VT_8: c_int = 269024776;
pub const IBUS_KEY_Switch_VT_9: c_int = 269024777;
pub const IBUS_KEY_Sys_Req: c_int = 65301;
pub const IBUS_KEY_T: c_int = 84;
pub const IBUS_KEY_THORN: c_int = 222;
pub const IBUS_KEY_Tab: c_int = 65289;
pub const IBUS_KEY_Tabovedot: c_int = 16785002;
pub const IBUS_KEY_TaskPane: c_int = 269025151;
pub const IBUS_KEY_Tcaron: c_int = 427;
pub const IBUS_KEY_Tcedilla: c_int = 478;
pub const IBUS_KEY_Terminal: c_int = 269025152;
pub const IBUS_KEY_Terminate_Server: c_int = 65237;
pub const IBUS_KEY_Thai_baht: c_int = 3551;
pub const IBUS_KEY_Thai_bobaimai: c_int = 3514;
pub const IBUS_KEY_Thai_chochan: c_int = 3496;
pub const IBUS_KEY_Thai_chochang: c_int = 3498;
pub const IBUS_KEY_Thai_choching: c_int = 3497;
pub const IBUS_KEY_Thai_chochoe: c_int = 3500;
pub const IBUS_KEY_Thai_dochada: c_int = 3502;
pub const IBUS_KEY_Thai_dodek: c_int = 3508;
pub const IBUS_KEY_Thai_fofa: c_int = 3517;
pub const IBUS_KEY_Thai_fofan: c_int = 3519;
pub const IBUS_KEY_Thai_hohip: c_int = 3531;
pub const IBUS_KEY_Thai_honokhuk: c_int = 3534;
pub const IBUS_KEY_Thai_khokhai: c_int = 3490;
pub const IBUS_KEY_Thai_khokhon: c_int = 3493;
pub const IBUS_KEY_Thai_khokhuat: c_int = 3491;
pub const IBUS_KEY_Thai_khokhwai: c_int = 3492;
pub const IBUS_KEY_Thai_khorakhang: c_int = 3494;
pub const IBUS_KEY_Thai_kokai: c_int = 3489;
pub const IBUS_KEY_Thai_lakkhangyao: c_int = 3557;
pub const IBUS_KEY_Thai_lekchet: c_int = 3575;
pub const IBUS_KEY_Thai_lekha: c_int = 3573;
pub const IBUS_KEY_Thai_lekhok: c_int = 3574;
pub const IBUS_KEY_Thai_lekkao: c_int = 3577;
pub const IBUS_KEY_Thai_leknung: c_int = 3569;
pub const IBUS_KEY_Thai_lekpaet: c_int = 3576;
pub const IBUS_KEY_Thai_leksam: c_int = 3571;
pub const IBUS_KEY_Thai_leksi: c_int = 3572;
pub const IBUS_KEY_Thai_leksong: c_int = 3570;
pub const IBUS_KEY_Thai_leksun: c_int = 3568;
pub const IBUS_KEY_Thai_lochula: c_int = 3532;
pub const IBUS_KEY_Thai_loling: c_int = 3525;
pub const IBUS_KEY_Thai_lu: c_int = 3526;
pub const IBUS_KEY_Thai_maichattawa: c_int = 3563;
pub const IBUS_KEY_Thai_maiek: c_int = 3560;
pub const IBUS_KEY_Thai_maihanakat: c_int = 3537;
pub const IBUS_KEY_Thai_maihanakat_maitho: c_int = 3550;
pub const IBUS_KEY_Thai_maitaikhu: c_int = 3559;
pub const IBUS_KEY_Thai_maitho: c_int = 3561;
pub const IBUS_KEY_Thai_maitri: c_int = 3562;
pub const IBUS_KEY_Thai_maiyamok: c_int = 3558;
pub const IBUS_KEY_Thai_moma: c_int = 3521;
pub const IBUS_KEY_Thai_ngongu: c_int = 3495;
pub const IBUS_KEY_Thai_nikhahit: c_int = 3565;
pub const IBUS_KEY_Thai_nonen: c_int = 3507;
pub const IBUS_KEY_Thai_nonu: c_int = 3513;
pub const IBUS_KEY_Thai_oang: c_int = 3533;
pub const IBUS_KEY_Thai_paiyannoi: c_int = 3535;
pub const IBUS_KEY_Thai_phinthu: c_int = 3546;
pub const IBUS_KEY_Thai_phophan: c_int = 3518;
pub const IBUS_KEY_Thai_phophung: c_int = 3516;
pub const IBUS_KEY_Thai_phosamphao: c_int = 3520;
pub const IBUS_KEY_Thai_popla: c_int = 3515;
pub const IBUS_KEY_Thai_rorua: c_int = 3523;
pub const IBUS_KEY_Thai_ru: c_int = 3524;
pub const IBUS_KEY_Thai_saraa: c_int = 3536;
pub const IBUS_KEY_Thai_saraaa: c_int = 3538;
pub const IBUS_KEY_Thai_saraae: c_int = 3553;
pub const IBUS_KEY_Thai_saraaimaimalai: c_int = 3556;
pub const IBUS_KEY_Thai_saraaimaimuan: c_int = 3555;
pub const IBUS_KEY_Thai_saraam: c_int = 3539;
pub const IBUS_KEY_Thai_sarae: c_int = 3552;
pub const IBUS_KEY_Thai_sarai: c_int = 3540;
pub const IBUS_KEY_Thai_saraii: c_int = 3541;
pub const IBUS_KEY_Thai_sarao: c_int = 3554;
pub const IBUS_KEY_Thai_sarau: c_int = 3544;
pub const IBUS_KEY_Thai_saraue: c_int = 3542;
pub const IBUS_KEY_Thai_sarauee: c_int = 3543;
pub const IBUS_KEY_Thai_sarauu: c_int = 3545;
pub const IBUS_KEY_Thai_sorusi: c_int = 3529;
pub const IBUS_KEY_Thai_sosala: c_int = 3528;
pub const IBUS_KEY_Thai_soso: c_int = 3499;
pub const IBUS_KEY_Thai_sosua: c_int = 3530;
pub const IBUS_KEY_Thai_thanthakhat: c_int = 3564;
pub const IBUS_KEY_Thai_thonangmontho: c_int = 3505;
pub const IBUS_KEY_Thai_thophuthao: c_int = 3506;
pub const IBUS_KEY_Thai_thothahan: c_int = 3511;
pub const IBUS_KEY_Thai_thothan: c_int = 3504;
pub const IBUS_KEY_Thai_thothong: c_int = 3512;
pub const IBUS_KEY_Thai_thothung: c_int = 3510;
pub const IBUS_KEY_Thai_topatak: c_int = 3503;
pub const IBUS_KEY_Thai_totao: c_int = 3509;
pub const IBUS_KEY_Thai_wowaen: c_int = 3527;
pub const IBUS_KEY_Thai_yoyak: c_int = 3522;
pub const IBUS_KEY_Thai_yoying: c_int = 3501;
pub const IBUS_KEY_Thorn: c_int = 222;
pub const IBUS_KEY_Time: c_int = 269025183;
pub const IBUS_KEY_ToDoList: c_int = 269025055;
pub const IBUS_KEY_Tools: c_int = 269025153;
pub const IBUS_KEY_TopMenu: c_int = 269025186;
pub const IBUS_KEY_TouchpadOff: c_int = 269025201;
pub const IBUS_KEY_TouchpadOn: c_int = 269025200;
pub const IBUS_KEY_TouchpadToggle: c_int = 269025193;
pub const IBUS_KEY_Touroku: c_int = 65323;
pub const IBUS_KEY_Travel: c_int = 269025154;
pub const IBUS_KEY_Tslash: c_int = 940;
pub const IBUS_KEY_U: c_int = 85;
pub const IBUS_KEY_UWB: c_int = 269025174;
pub const IBUS_KEY_Uacute: c_int = 218;
pub const IBUS_KEY_Ubelowdot: c_int = 16785124;
pub const IBUS_KEY_Ubreve: c_int = 733;
pub const IBUS_KEY_Ucircumflex: c_int = 219;
pub const IBUS_KEY_Udiaeresis: c_int = 220;
pub const IBUS_KEY_Udoubleacute: c_int = 475;
pub const IBUS_KEY_Ugrave: c_int = 217;
pub const IBUS_KEY_Uhook: c_int = 16785126;
pub const IBUS_KEY_Uhorn: c_int = 16777647;
pub const IBUS_KEY_Uhornacute: c_int = 16785128;
pub const IBUS_KEY_Uhornbelowdot: c_int = 16785136;
pub const IBUS_KEY_Uhorngrave: c_int = 16785130;
pub const IBUS_KEY_Uhornhook: c_int = 16785132;
pub const IBUS_KEY_Uhorntilde: c_int = 16785134;
pub const IBUS_KEY_Ukrainian_GHE_WITH_UPTURN: c_int = 1725;
pub const IBUS_KEY_Ukrainian_I: c_int = 1718;
pub const IBUS_KEY_Ukrainian_IE: c_int = 1716;
pub const IBUS_KEY_Ukrainian_YI: c_int = 1719;
pub const IBUS_KEY_Ukrainian_ghe_with_upturn: c_int = 1709;
pub const IBUS_KEY_Ukrainian_i: c_int = 1702;
pub const IBUS_KEY_Ukrainian_ie: c_int = 1700;
pub const IBUS_KEY_Ukrainian_yi: c_int = 1703;
pub const IBUS_KEY_Ukranian_I: c_int = 1718;
pub const IBUS_KEY_Ukranian_JE: c_int = 1716;
pub const IBUS_KEY_Ukranian_YI: c_int = 1719;
pub const IBUS_KEY_Ukranian_i: c_int = 1702;
pub const IBUS_KEY_Ukranian_je: c_int = 1700;
pub const IBUS_KEY_Ukranian_yi: c_int = 1703;
pub const IBUS_KEY_Umacron: c_int = 990;
pub const IBUS_KEY_Undo: c_int = 65381;
pub const IBUS_KEY_Ungrab: c_int = 269024800;
pub const IBUS_KEY_Uogonek: c_int = 985;
pub const IBUS_KEY_Up: c_int = 65362;
pub const IBUS_KEY_Uring: c_int = 473;
pub const IBUS_KEY_User1KB: c_int = 269025157;
pub const IBUS_KEY_User2KB: c_int = 269025158;
pub const IBUS_KEY_UserPB: c_int = 269025156;
pub const IBUS_KEY_Utilde: c_int = 989;
pub const IBUS_KEY_V: c_int = 86;
pub const IBUS_KEY_VendorHome: c_int = 269025076;
pub const IBUS_KEY_Video: c_int = 269025159;
pub const IBUS_KEY_View: c_int = 269025185;
pub const IBUS_KEY_VoidSymbol: c_int = 16777215;
pub const IBUS_KEY_W: c_int = 87;
pub const IBUS_KEY_WLAN: c_int = 269025173;
pub const IBUS_KEY_WWAN: c_int = 269025204;
pub const IBUS_KEY_WWW: c_int = 269025070;
pub const IBUS_KEY_Wacute: c_int = 16785026;
pub const IBUS_KEY_WakeUp: c_int = 269025067;
pub const IBUS_KEY_Wcircumflex: c_int = 16777588;
pub const IBUS_KEY_Wdiaeresis: c_int = 16785028;
pub const IBUS_KEY_WebCam: c_int = 269025167;
pub const IBUS_KEY_Wgrave: c_int = 16785024;
pub const IBUS_KEY_WheelButton: c_int = 269025160;
pub const IBUS_KEY_WindowClear: c_int = 269025109;
pub const IBUS_KEY_WonSign: c_int = 16785577;
pub const IBUS_KEY_Word: c_int = 269025161;
pub const IBUS_KEY_X: c_int = 88;
pub const IBUS_KEY_Xabovedot: c_int = 16785034;
pub const IBUS_KEY_Xfer: c_int = 269025162;
pub const IBUS_KEY_Y: c_int = 89;
pub const IBUS_KEY_Yacute: c_int = 221;
pub const IBUS_KEY_Ybelowdot: c_int = 16785140;
pub const IBUS_KEY_Ycircumflex: c_int = 16777590;
pub const IBUS_KEY_Ydiaeresis: c_int = 5054;
pub const IBUS_KEY_Yellow: c_int = 269025189;
pub const IBUS_KEY_Ygrave: c_int = 16785138;
pub const IBUS_KEY_Yhook: c_int = 16785142;
pub const IBUS_KEY_Ytilde: c_int = 16785144;
pub const IBUS_KEY_Z: c_int = 90;
pub const IBUS_KEY_Zabovedot: c_int = 431;
pub const IBUS_KEY_Zacute: c_int = 428;
pub const IBUS_KEY_Zcaron: c_int = 430;
pub const IBUS_KEY_Zen_Koho: c_int = 65341;
pub const IBUS_KEY_Zenkaku: c_int = 65320;
pub const IBUS_KEY_Zenkaku_Hankaku: c_int = 65322;
pub const IBUS_KEY_ZoomIn: c_int = 269025163;
pub const IBUS_KEY_ZoomOut: c_int = 269025164;
pub const IBUS_KEY_Zstroke: c_int = 16777653;
pub const IBUS_KEY_a: c_int = 97;
pub const IBUS_KEY_aacute: c_int = 225;
pub const IBUS_KEY_abelowdot: c_int = 16785057;
pub const IBUS_KEY_abovedot: c_int = 511;
pub const IBUS_KEY_abreve: c_int = 483;
pub const IBUS_KEY_abreveacute: c_int = 16785071;
pub const IBUS_KEY_abrevebelowdot: c_int = 16785079;
pub const IBUS_KEY_abrevegrave: c_int = 16785073;
pub const IBUS_KEY_abrevehook: c_int = 16785075;
pub const IBUS_KEY_abrevetilde: c_int = 16785077;
pub const IBUS_KEY_acircumflex: c_int = 226;
pub const IBUS_KEY_acircumflexacute: c_int = 16785061;
pub const IBUS_KEY_acircumflexbelowdot: c_int = 16785069;
pub const IBUS_KEY_acircumflexgrave: c_int = 16785063;
pub const IBUS_KEY_acircumflexhook: c_int = 16785065;
pub const IBUS_KEY_acircumflextilde: c_int = 16785067;
pub const IBUS_KEY_acute: c_int = 180;
pub const IBUS_KEY_adiaeresis: c_int = 228;
pub const IBUS_KEY_ae: c_int = 230;
pub const IBUS_KEY_agrave: c_int = 224;
pub const IBUS_KEY_ahook: c_int = 16785059;
pub const IBUS_KEY_amacron: c_int = 992;
pub const IBUS_KEY_ampersand: c_int = 38;
pub const IBUS_KEY_aogonek: c_int = 433;
pub const IBUS_KEY_apostrophe: c_int = 39;
pub const IBUS_KEY_approxeq: c_int = 16785992;
pub const IBUS_KEY_approximate: c_int = 2248;
pub const IBUS_KEY_aring: c_int = 229;
pub const IBUS_KEY_asciicircum: c_int = 94;
pub const IBUS_KEY_asciitilde: c_int = 126;
pub const IBUS_KEY_asterisk: c_int = 42;
pub const IBUS_KEY_at: c_int = 64;
pub const IBUS_KEY_atilde: c_int = 227;
pub const IBUS_KEY_b: c_int = 98;
pub const IBUS_KEY_babovedot: c_int = 16784899;
pub const IBUS_KEY_backslash: c_int = 92;
pub const IBUS_KEY_ballotcross: c_int = 2804;
pub const IBUS_KEY_bar: c_int = 124;
pub const IBUS_KEY_because: c_int = 16785973;
pub const IBUS_KEY_blank: c_int = 2527;
pub const IBUS_KEY_botintegral: c_int = 2213;
pub const IBUS_KEY_botleftparens: c_int = 2220;
pub const IBUS_KEY_botleftsqbracket: c_int = 2216;
pub const IBUS_KEY_botleftsummation: c_int = 2226;
pub const IBUS_KEY_botrightparens: c_int = 2222;
pub const IBUS_KEY_botrightsqbracket: c_int = 2218;
pub const IBUS_KEY_botrightsummation: c_int = 2230;
pub const IBUS_KEY_bott: c_int = 2550;
pub const IBUS_KEY_botvertsummationconnector: c_int = 2228;
pub const IBUS_KEY_braceleft: c_int = 123;
pub const IBUS_KEY_braceright: c_int = 125;
pub const IBUS_KEY_bracketleft: c_int = 91;
pub const IBUS_KEY_bracketright: c_int = 93;
pub const IBUS_KEY_braille_blank: c_int = 16787456;
pub const IBUS_KEY_braille_dot_1: c_int = 65521;
pub const IBUS_KEY_braille_dot_10: c_int = 65530;
pub const IBUS_KEY_braille_dot_2: c_int = 65522;
pub const IBUS_KEY_braille_dot_3: c_int = 65523;
pub const IBUS_KEY_braille_dot_4: c_int = 65524;
pub const IBUS_KEY_braille_dot_5: c_int = 65525;
pub const IBUS_KEY_braille_dot_6: c_int = 65526;
pub const IBUS_KEY_braille_dot_7: c_int = 65527;
pub const IBUS_KEY_braille_dot_8: c_int = 65528;
pub const IBUS_KEY_braille_dot_9: c_int = 65529;
pub const IBUS_KEY_braille_dots_1: c_int = 16787457;
pub const IBUS_KEY_braille_dots_12: c_int = 16787459;
pub const IBUS_KEY_braille_dots_123: c_int = 16787463;
pub const IBUS_KEY_braille_dots_1234: c_int = 16787471;
pub const IBUS_KEY_braille_dots_12345: c_int = 16787487;
pub const IBUS_KEY_braille_dots_123456: c_int = 16787519;
pub const IBUS_KEY_braille_dots_1234567: c_int = 16787583;
pub const IBUS_KEY_braille_dots_12345678: c_int = 16787711;
pub const IBUS_KEY_braille_dots_1234568: c_int = 16787647;
pub const IBUS_KEY_braille_dots_123457: c_int = 16787551;
pub const IBUS_KEY_braille_dots_1234578: c_int = 16787679;
pub const IBUS_KEY_braille_dots_123458: c_int = 16787615;
pub const IBUS_KEY_braille_dots_12346: c_int = 16787503;
pub const IBUS_KEY_braille_dots_123467: c_int = 16787567;
pub const IBUS_KEY_braille_dots_1234678: c_int = 16787695;
pub const IBUS_KEY_braille_dots_123468: c_int = 16787631;
pub const IBUS_KEY_braille_dots_12347: c_int = 16787535;
pub const IBUS_KEY_braille_dots_123478: c_int = 16787663;
pub const IBUS_KEY_braille_dots_12348: c_int = 16787599;
pub const IBUS_KEY_braille_dots_1235: c_int = 16787479;
pub const IBUS_KEY_braille_dots_12356: c_int = 16787511;
pub const IBUS_KEY_braille_dots_123567: c_int = 16787575;
pub const IBUS_KEY_braille_dots_1235678: c_int = 16787703;
pub const IBUS_KEY_braille_dots_123568: c_int = 16787639;
pub const IBUS_KEY_braille_dots_12357: c_int = 16787543;
pub const IBUS_KEY_braille_dots_123578: c_int = 16787671;
pub const IBUS_KEY_braille_dots_12358: c_int = 16787607;
pub const IBUS_KEY_braille_dots_1236: c_int = 16787495;
pub const IBUS_KEY_braille_dots_12367: c_int = 16787559;
pub const IBUS_KEY_braille_dots_123678: c_int = 16787687;
pub const IBUS_KEY_braille_dots_12368: c_int = 16787623;
pub const IBUS_KEY_braille_dots_1237: c_int = 16787527;
pub const IBUS_KEY_braille_dots_12378: c_int = 16787655;
pub const IBUS_KEY_braille_dots_1238: c_int = 16787591;
pub const IBUS_KEY_braille_dots_124: c_int = 16787467;
pub const IBUS_KEY_braille_dots_1245: c_int = 16787483;
pub const IBUS_KEY_braille_dots_12456: c_int = 16787515;
pub const IBUS_KEY_braille_dots_124567: c_int = 16787579;
pub const IBUS_KEY_braille_dots_1245678: c_int = 16787707;
pub const IBUS_KEY_braille_dots_124568: c_int = 16787643;
pub const IBUS_KEY_braille_dots_12457: c_int = 16787547;
pub const IBUS_KEY_braille_dots_124578: c_int = 16787675;
pub const IBUS_KEY_braille_dots_12458: c_int = 16787611;
pub const IBUS_KEY_braille_dots_1246: c_int = 16787499;
pub const IBUS_KEY_braille_dots_12467: c_int = 16787563;
pub const IBUS_KEY_braille_dots_124678: c_int = 16787691;
pub const IBUS_KEY_braille_dots_12468: c_int = 16787627;
pub const IBUS_KEY_braille_dots_1247: c_int = 16787531;
pub const IBUS_KEY_braille_dots_12478: c_int = 16787659;
pub const IBUS_KEY_braille_dots_1248: c_int = 16787595;
pub const IBUS_KEY_braille_dots_125: c_int = 16787475;
pub const IBUS_KEY_braille_dots_1256: c_int = 16787507;
pub const IBUS_KEY_braille_dots_12567: c_int = 16787571;
pub const IBUS_KEY_braille_dots_125678: c_int = 16787699;
pub const IBUS_KEY_braille_dots_12568: c_int = 16787635;
pub const IBUS_KEY_braille_dots_1257: c_int = 16787539;
pub const IBUS_KEY_braille_dots_12578: c_int = 16787667;
pub const IBUS_KEY_braille_dots_1258: c_int = 16787603;
pub const IBUS_KEY_braille_dots_126: c_int = 16787491;
pub const IBUS_KEY_braille_dots_1267: c_int = 16787555;
pub const IBUS_KEY_braille_dots_12678: c_int = 16787683;
pub const IBUS_KEY_braille_dots_1268: c_int = 16787619;
pub const IBUS_KEY_braille_dots_127: c_int = 16787523;
pub const IBUS_KEY_braille_dots_1278: c_int = 16787651;
pub const IBUS_KEY_braille_dots_128: c_int = 16787587;
pub const IBUS_KEY_braille_dots_13: c_int = 16787461;
pub const IBUS_KEY_braille_dots_134: c_int = 16787469;
pub const IBUS_KEY_braille_dots_1345: c_int = 16787485;
pub const IBUS_KEY_braille_dots_13456: c_int = 16787517;
pub const IBUS_KEY_braille_dots_134567: c_int = 16787581;
pub const IBUS_KEY_braille_dots_1345678: c_int = 16787709;
pub const IBUS_KEY_braille_dots_134568: c_int = 16787645;
pub const IBUS_KEY_braille_dots_13457: c_int = 16787549;
pub const IBUS_KEY_braille_dots_134578: c_int = 16787677;
pub const IBUS_KEY_braille_dots_13458: c_int = 16787613;
pub const IBUS_KEY_braille_dots_1346: c_int = 16787501;
pub const IBUS_KEY_braille_dots_13467: c_int = 16787565;
pub const IBUS_KEY_braille_dots_134678: c_int = 16787693;
pub const IBUS_KEY_braille_dots_13468: c_int = 16787629;
pub const IBUS_KEY_braille_dots_1347: c_int = 16787533;
pub const IBUS_KEY_braille_dots_13478: c_int = 16787661;
pub const IBUS_KEY_braille_dots_1348: c_int = 16787597;
pub const IBUS_KEY_braille_dots_135: c_int = 16787477;
pub const IBUS_KEY_braille_dots_1356: c_int = 16787509;
pub const IBUS_KEY_braille_dots_13567: c_int = 16787573;
pub const IBUS_KEY_braille_dots_135678: c_int = 16787701;
pub const IBUS_KEY_braille_dots_13568: c_int = 16787637;
pub const IBUS_KEY_braille_dots_1357: c_int = 16787541;
pub const IBUS_KEY_braille_dots_13578: c_int = 16787669;
pub const IBUS_KEY_braille_dots_1358: c_int = 16787605;
pub const IBUS_KEY_braille_dots_136: c_int = 16787493;
pub const IBUS_KEY_braille_dots_1367: c_int = 16787557;
pub const IBUS_KEY_braille_dots_13678: c_int = 16787685;
pub const IBUS_KEY_braille_dots_1368: c_int = 16787621;
pub const IBUS_KEY_braille_dots_137: c_int = 16787525;
pub const IBUS_KEY_braille_dots_1378: c_int = 16787653;
pub const IBUS_KEY_braille_dots_138: c_int = 16787589;
pub const IBUS_KEY_braille_dots_14: c_int = 16787465;
pub const IBUS_KEY_braille_dots_145: c_int = 16787481;
pub const IBUS_KEY_braille_dots_1456: c_int = 16787513;
pub const IBUS_KEY_braille_dots_14567: c_int = 16787577;
pub const IBUS_KEY_braille_dots_145678: c_int = 16787705;
pub const IBUS_KEY_braille_dots_14568: c_int = 16787641;
pub const IBUS_KEY_braille_dots_1457: c_int = 16787545;
pub const IBUS_KEY_braille_dots_14578: c_int = 16787673;
pub const IBUS_KEY_braille_dots_1458: c_int = 16787609;
pub const IBUS_KEY_braille_dots_146: c_int = 16787497;
pub const IBUS_KEY_braille_dots_1467: c_int = 16787561;
pub const IBUS_KEY_braille_dots_14678: c_int = 16787689;
pub const IBUS_KEY_braille_dots_1468: c_int = 16787625;
pub const IBUS_KEY_braille_dots_147: c_int = 16787529;
pub const IBUS_KEY_braille_dots_1478: c_int = 16787657;
pub const IBUS_KEY_braille_dots_148: c_int = 16787593;
pub const IBUS_KEY_braille_dots_15: c_int = 16787473;
pub const IBUS_KEY_braille_dots_156: c_int = 16787505;
pub const IBUS_KEY_braille_dots_1567: c_int = 16787569;
pub const IBUS_KEY_braille_dots_15678: c_int = 16787697;
pub const IBUS_KEY_braille_dots_1568: c_int = 16787633;
pub const IBUS_KEY_braille_dots_157: c_int = 16787537;
pub const IBUS_KEY_braille_dots_1578: c_int = 16787665;
pub const IBUS_KEY_braille_dots_158: c_int = 16787601;
pub const IBUS_KEY_braille_dots_16: c_int = 16787489;
pub const IBUS_KEY_braille_dots_167: c_int = 16787553;
pub const IBUS_KEY_braille_dots_1678: c_int = 16787681;
pub const IBUS_KEY_braille_dots_168: c_int = 16787617;
pub const IBUS_KEY_braille_dots_17: c_int = 16787521;
pub const IBUS_KEY_braille_dots_178: c_int = 16787649;
pub const IBUS_KEY_braille_dots_18: c_int = 16787585;
pub const IBUS_KEY_braille_dots_2: c_int = 16787458;
pub const IBUS_KEY_braille_dots_23: c_int = 16787462;
pub const IBUS_KEY_braille_dots_234: c_int = 16787470;
pub const IBUS_KEY_braille_dots_2345: c_int = 16787486;
pub const IBUS_KEY_braille_dots_23456: c_int = 16787518;
pub const IBUS_KEY_braille_dots_234567: c_int = 16787582;
pub const IBUS_KEY_braille_dots_2345678: c_int = 16787710;
pub const IBUS_KEY_braille_dots_234568: c_int = 16787646;
pub const IBUS_KEY_braille_dots_23457: c_int = 16787550;
pub const IBUS_KEY_braille_dots_234578: c_int = 16787678;
pub const IBUS_KEY_braille_dots_23458: c_int = 16787614;
pub const IBUS_KEY_braille_dots_2346: c_int = 16787502;
pub const IBUS_KEY_braille_dots_23467: c_int = 16787566;
pub const IBUS_KEY_braille_dots_234678: c_int = 16787694;
pub const IBUS_KEY_braille_dots_23468: c_int = 16787630;
pub const IBUS_KEY_braille_dots_2347: c_int = 16787534;
pub const IBUS_KEY_braille_dots_23478: c_int = 16787662;
pub const IBUS_KEY_braille_dots_2348: c_int = 16787598;
pub const IBUS_KEY_braille_dots_235: c_int = 16787478;
pub const IBUS_KEY_braille_dots_2356: c_int = 16787510;
pub const IBUS_KEY_braille_dots_23567: c_int = 16787574;
pub const IBUS_KEY_braille_dots_235678: c_int = 16787702;
pub const IBUS_KEY_braille_dots_23568: c_int = 16787638;
pub const IBUS_KEY_braille_dots_2357: c_int = 16787542;
pub const IBUS_KEY_braille_dots_23578: c_int = 16787670;
pub const IBUS_KEY_braille_dots_2358: c_int = 16787606;
pub const IBUS_KEY_braille_dots_236: c_int = 16787494;
pub const IBUS_KEY_braille_dots_2367: c_int = 16787558;
pub const IBUS_KEY_braille_dots_23678: c_int = 16787686;
pub const IBUS_KEY_braille_dots_2368: c_int = 16787622;
pub const IBUS_KEY_braille_dots_237: c_int = 16787526;
pub const IBUS_KEY_braille_dots_2378: c_int = 16787654;
pub const IBUS_KEY_braille_dots_238: c_int = 16787590;
pub const IBUS_KEY_braille_dots_24: c_int = 16787466;
pub const IBUS_KEY_braille_dots_245: c_int = 16787482;
pub const IBUS_KEY_braille_dots_2456: c_int = 16787514;
pub const IBUS_KEY_braille_dots_24567: c_int = 16787578;
pub const IBUS_KEY_braille_dots_245678: c_int = 16787706;
pub const IBUS_KEY_braille_dots_24568: c_int = 16787642;
pub const IBUS_KEY_braille_dots_2457: c_int = 16787546;
pub const IBUS_KEY_braille_dots_24578: c_int = 16787674;
pub const IBUS_KEY_braille_dots_2458: c_int = 16787610;
pub const IBUS_KEY_braille_dots_246: c_int = 16787498;
pub const IBUS_KEY_braille_dots_2467: c_int = 16787562;
pub const IBUS_KEY_braille_dots_24678: c_int = 16787690;
pub const IBUS_KEY_braille_dots_2468: c_int = 16787626;
pub const IBUS_KEY_braille_dots_247: c_int = 16787530;
pub const IBUS_KEY_braille_dots_2478: c_int = 16787658;
pub const IBUS_KEY_braille_dots_248: c_int = 16787594;
pub const IBUS_KEY_braille_dots_25: c_int = 16787474;
pub const IBUS_KEY_braille_dots_256: c_int = 16787506;
pub const IBUS_KEY_braille_dots_2567: c_int = 16787570;
pub const IBUS_KEY_braille_dots_25678: c_int = 16787698;
pub const IBUS_KEY_braille_dots_2568: c_int = 16787634;
pub const IBUS_KEY_braille_dots_257: c_int = 16787538;
pub const IBUS_KEY_braille_dots_2578: c_int = 16787666;
pub const IBUS_KEY_braille_dots_258: c_int = 16787602;
pub const IBUS_KEY_braille_dots_26: c_int = 16787490;
pub const IBUS_KEY_braille_dots_267: c_int = 16787554;
pub const IBUS_KEY_braille_dots_2678: c_int = 16787682;
pub const IBUS_KEY_braille_dots_268: c_int = 16787618;
pub const IBUS_KEY_braille_dots_27: c_int = 16787522;
pub const IBUS_KEY_braille_dots_278: c_int = 16787650;
pub const IBUS_KEY_braille_dots_28: c_int = 16787586;
pub const IBUS_KEY_braille_dots_3: c_int = 16787460;
pub const IBUS_KEY_braille_dots_34: c_int = 16787468;
pub const IBUS_KEY_braille_dots_345: c_int = 16787484;
pub const IBUS_KEY_braille_dots_3456: c_int = 16787516;
pub const IBUS_KEY_braille_dots_34567: c_int = 16787580;
pub const IBUS_KEY_braille_dots_345678: c_int = 16787708;
pub const IBUS_KEY_braille_dots_34568: c_int = 16787644;
pub const IBUS_KEY_braille_dots_3457: c_int = 16787548;
pub const IBUS_KEY_braille_dots_34578: c_int = 16787676;
pub const IBUS_KEY_braille_dots_3458: c_int = 16787612;
pub const IBUS_KEY_braille_dots_346: c_int = 16787500;
pub const IBUS_KEY_braille_dots_3467: c_int = 16787564;
pub const IBUS_KEY_braille_dots_34678: c_int = 16787692;
pub const IBUS_KEY_braille_dots_3468: c_int = 16787628;
pub const IBUS_KEY_braille_dots_347: c_int = 16787532;
pub const IBUS_KEY_braille_dots_3478: c_int = 16787660;
pub const IBUS_KEY_braille_dots_348: c_int = 16787596;
pub const IBUS_KEY_braille_dots_35: c_int = 16787476;
pub const IBUS_KEY_braille_dots_356: c_int = 16787508;
pub const IBUS_KEY_braille_dots_3567: c_int = 16787572;
pub const IBUS_KEY_braille_dots_35678: c_int = 16787700;
pub const IBUS_KEY_braille_dots_3568: c_int = 16787636;
pub const IBUS_KEY_braille_dots_357: c_int = 16787540;
pub const IBUS_KEY_braille_dots_3578: c_int = 16787668;
pub const IBUS_KEY_braille_dots_358: c_int = 16787604;
pub const IBUS_KEY_braille_dots_36: c_int = 16787492;
pub const IBUS_KEY_braille_dots_367: c_int = 16787556;
pub const IBUS_KEY_braille_dots_3678: c_int = 16787684;
pub const IBUS_KEY_braille_dots_368: c_int = 16787620;
pub const IBUS_KEY_braille_dots_37: c_int = 16787524;
pub const IBUS_KEY_braille_dots_378: c_int = 16787652;
pub const IBUS_KEY_braille_dots_38: c_int = 16787588;
pub const IBUS_KEY_braille_dots_4: c_int = 16787464;
pub const IBUS_KEY_braille_dots_45: c_int = 16787480;
pub const IBUS_KEY_braille_dots_456: c_int = 16787512;
pub const IBUS_KEY_braille_dots_4567: c_int = 16787576;
pub const IBUS_KEY_braille_dots_45678: c_int = 16787704;
pub const IBUS_KEY_braille_dots_4568: c_int = 16787640;
pub const IBUS_KEY_braille_dots_457: c_int = 16787544;
pub const IBUS_KEY_braille_dots_4578: c_int = 16787672;
pub const IBUS_KEY_braille_dots_458: c_int = 16787608;
pub const IBUS_KEY_braille_dots_46: c_int = 16787496;
pub const IBUS_KEY_braille_dots_467: c_int = 16787560;
pub const IBUS_KEY_braille_dots_4678: c_int = 16787688;
pub const IBUS_KEY_braille_dots_468: c_int = 16787624;
pub const IBUS_KEY_braille_dots_47: c_int = 16787528;
pub const IBUS_KEY_braille_dots_478: c_int = 16787656;
pub const IBUS_KEY_braille_dots_48: c_int = 16787592;
pub const IBUS_KEY_braille_dots_5: c_int = 16787472;
pub const IBUS_KEY_braille_dots_56: c_int = 16787504;
pub const IBUS_KEY_braille_dots_567: c_int = 16787568;
pub const IBUS_KEY_braille_dots_5678: c_int = 16787696;
pub const IBUS_KEY_braille_dots_568: c_int = 16787632;
pub const IBUS_KEY_braille_dots_57: c_int = 16787536;
pub const IBUS_KEY_braille_dots_578: c_int = 16787664;
pub const IBUS_KEY_braille_dots_58: c_int = 16787600;
pub const IBUS_KEY_braille_dots_6: c_int = 16787488;
pub const IBUS_KEY_braille_dots_67: c_int = 16787552;
pub const IBUS_KEY_braille_dots_678: c_int = 16787680;
pub const IBUS_KEY_braille_dots_68: c_int = 16787616;
pub const IBUS_KEY_braille_dots_7: c_int = 16787520;
pub const IBUS_KEY_braille_dots_78: c_int = 16787648;
pub const IBUS_KEY_braille_dots_8: c_int = 16787584;
pub const IBUS_KEY_breve: c_int = 418;
pub const IBUS_KEY_brokenbar: c_int = 166;
pub const IBUS_KEY_c: c_int = 99;
pub const IBUS_KEY_c_h: c_int = 65187;
pub const IBUS_KEY_cabovedot: c_int = 741;
pub const IBUS_KEY_cacute: c_int = 486;
pub const IBUS_KEY_careof: c_int = 2744;
pub const IBUS_KEY_caret: c_int = 2812;
pub const IBUS_KEY_caron: c_int = 439;
pub const IBUS_KEY_ccaron: c_int = 488;
pub const IBUS_KEY_ccedilla: c_int = 231;
pub const IBUS_KEY_ccircumflex: c_int = 742;
pub const IBUS_KEY_cedilla: c_int = 184;
pub const IBUS_KEY_cent: c_int = 162;
pub const IBUS_KEY_ch: c_int = 65184;
pub const IBUS_KEY_checkerboard: c_int = 2529;
pub const IBUS_KEY_checkmark: c_int = 2803;
pub const IBUS_KEY_circle: c_int = 3023;
pub const IBUS_KEY_club: c_int = 2796;
pub const IBUS_KEY_colon: c_int = 58;
pub const IBUS_KEY_comma: c_int = 44;
pub const IBUS_KEY_containsas: c_int = 16785931;
pub const IBUS_KEY_copyright: c_int = 169;
pub const IBUS_KEY_cr: c_int = 2532;
pub const IBUS_KEY_crossinglines: c_int = 2542;
pub const IBUS_KEY_cuberoot: c_int = 16785947;
pub const IBUS_KEY_currency: c_int = 164;
pub const IBUS_KEY_cursor: c_int = 2815;
pub const IBUS_KEY_d: c_int = 100;
pub const IBUS_KEY_dabovedot: c_int = 16784907;
pub const IBUS_KEY_dagger: c_int = 2801;
pub const IBUS_KEY_dcaron: c_int = 495;
pub const IBUS_KEY_dead_A: c_int = 65153;
pub const IBUS_KEY_dead_E: c_int = 65155;
pub const IBUS_KEY_dead_I: c_int = 65157;
pub const IBUS_KEY_dead_O: c_int = 65159;
pub const IBUS_KEY_dead_U: c_int = 65161;
pub const IBUS_KEY_dead_a: c_int = 65152;
pub const IBUS_KEY_dead_abovecomma: c_int = 65124;
pub const IBUS_KEY_dead_abovedot: c_int = 65110;
pub const IBUS_KEY_dead_abovereversedcomma: c_int = 65125;
pub const IBUS_KEY_dead_abovering: c_int = 65112;
pub const IBUS_KEY_dead_aboveverticalline: c_int = 65169;
pub const IBUS_KEY_dead_acute: c_int = 65105;
pub const IBUS_KEY_dead_belowbreve: c_int = 65131;
pub const IBUS_KEY_dead_belowcircumflex: c_int = 65129;
pub const IBUS_KEY_dead_belowcomma: c_int = 65134;
pub const IBUS_KEY_dead_belowdiaeresis: c_int = 65132;
pub const IBUS_KEY_dead_belowdot: c_int = 65120;
pub const IBUS_KEY_dead_belowmacron: c_int = 65128;
pub const IBUS_KEY_dead_belowring: c_int = 65127;
pub const IBUS_KEY_dead_belowtilde: c_int = 65130;
pub const IBUS_KEY_dead_belowverticalline: c_int = 65170;
pub const IBUS_KEY_dead_breve: c_int = 65109;
pub const IBUS_KEY_dead_capital_schwa: c_int = 65163;
pub const IBUS_KEY_dead_caron: c_int = 65114;
pub const IBUS_KEY_dead_cedilla: c_int = 65115;
pub const IBUS_KEY_dead_circumflex: c_int = 65106;
pub const IBUS_KEY_dead_currency: c_int = 65135;
pub const IBUS_KEY_dead_dasia: c_int = 65125;
pub const IBUS_KEY_dead_diaeresis: c_int = 65111;
pub const IBUS_KEY_dead_doubleacute: c_int = 65113;
pub const IBUS_KEY_dead_doublegrave: c_int = 65126;
pub const IBUS_KEY_dead_e: c_int = 65154;
pub const IBUS_KEY_dead_grave: c_int = 65104;
pub const IBUS_KEY_dead_greek: c_int = 65164;
pub const IBUS_KEY_dead_hook: c_int = 65121;
pub const IBUS_KEY_dead_horn: c_int = 65122;
pub const IBUS_KEY_dead_i: c_int = 65156;
pub const IBUS_KEY_dead_invertedbreve: c_int = 65133;
pub const IBUS_KEY_dead_iota: c_int = 65117;
pub const IBUS_KEY_dead_longsolidusoverlay: c_int = 65171;
pub const IBUS_KEY_dead_lowline: c_int = 65168;
pub const IBUS_KEY_dead_macron: c_int = 65108;
pub const IBUS_KEY_dead_o: c_int = 65158;
pub const IBUS_KEY_dead_ogonek: c_int = 65116;
pub const IBUS_KEY_dead_perispomeni: c_int = 65107;
pub const IBUS_KEY_dead_psili: c_int = 65124;
pub const IBUS_KEY_dead_semivoiced_sound: c_int = 65119;
pub const IBUS_KEY_dead_small_schwa: c_int = 65162;
pub const IBUS_KEY_dead_stroke: c_int = 65123;
pub const IBUS_KEY_dead_tilde: c_int = 65107;
pub const IBUS_KEY_dead_u: c_int = 65160;
pub const IBUS_KEY_dead_voiced_sound: c_int = 65118;
pub const IBUS_KEY_decimalpoint: c_int = 2749;
pub const IBUS_KEY_degree: c_int = 176;
pub const IBUS_KEY_diaeresis: c_int = 168;
pub const IBUS_KEY_diamond: c_int = 2797;
pub const IBUS_KEY_digitspace: c_int = 2725;
pub const IBUS_KEY_dintegral: c_int = 16785964;
pub const IBUS_KEY_division: c_int = 247;
pub const IBUS_KEY_dollar: c_int = 36;
pub const IBUS_KEY_doubbaselinedot: c_int = 2735;
pub const IBUS_KEY_doubleacute: c_int = 445;
pub const IBUS_KEY_doubledagger: c_int = 2802;
pub const IBUS_KEY_doublelowquotemark: c_int = 2814;
pub const IBUS_KEY_downarrow: c_int = 2302;
pub const IBUS_KEY_downcaret: c_int = 2984;
pub const IBUS_KEY_downshoe: c_int = 3030;
pub const IBUS_KEY_downstile: c_int = 3012;
pub const IBUS_KEY_downtack: c_int = 3010;
pub const IBUS_KEY_dstroke: c_int = 496;
pub const IBUS_KEY_e: c_int = 101;
pub const IBUS_KEY_eabovedot: c_int = 1004;
pub const IBUS_KEY_eacute: c_int = 233;
pub const IBUS_KEY_ebelowdot: c_int = 16785081;
pub const IBUS_KEY_ecaron: c_int = 492;
pub const IBUS_KEY_ecircumflex: c_int = 234;
pub const IBUS_KEY_ecircumflexacute: c_int = 16785087;
pub const IBUS_KEY_ecircumflexbelowdot: c_int = 16785095;
pub const IBUS_KEY_ecircumflexgrave: c_int = 16785089;
pub const IBUS_KEY_ecircumflexhook: c_int = 16785091;
pub const IBUS_KEY_ecircumflextilde: c_int = 16785093;
pub const IBUS_KEY_ediaeresis: c_int = 235;
pub const IBUS_KEY_egrave: c_int = 232;
pub const IBUS_KEY_ehook: c_int = 16785083;
pub const IBUS_KEY_eightsubscript: c_int = 16785544;
pub const IBUS_KEY_eightsuperior: c_int = 16785528;
pub const IBUS_KEY_elementof: c_int = 16785928;
pub const IBUS_KEY_ellipsis: c_int = 2734;
pub const IBUS_KEY_em3space: c_int = 2723;
pub const IBUS_KEY_em4space: c_int = 2724;
pub const IBUS_KEY_emacron: c_int = 954;
pub const IBUS_KEY_emdash: c_int = 2729;
pub const IBUS_KEY_emfilledcircle: c_int = 2782;
pub const IBUS_KEY_emfilledrect: c_int = 2783;
pub const IBUS_KEY_emopencircle: c_int = 2766;
pub const IBUS_KEY_emopenrectangle: c_int = 2767;
pub const IBUS_KEY_emptyset: c_int = 16785925;
pub const IBUS_KEY_emspace: c_int = 2721;
pub const IBUS_KEY_endash: c_int = 2730;
pub const IBUS_KEY_enfilledcircbullet: c_int = 2790;
pub const IBUS_KEY_enfilledsqbullet: c_int = 2791;
pub const IBUS_KEY_eng: c_int = 959;
pub const IBUS_KEY_enopencircbullet: c_int = 2784;
pub const IBUS_KEY_enopensquarebullet: c_int = 2785;
pub const IBUS_KEY_enspace: c_int = 2722;
pub const IBUS_KEY_eogonek: c_int = 490;
pub const IBUS_KEY_equal: c_int = 61;
pub const IBUS_KEY_eth: c_int = 240;
pub const IBUS_KEY_etilde: c_int = 16785085;
pub const IBUS_KEY_exclam: c_int = 33;
pub const IBUS_KEY_exclamdown: c_int = 161;
pub const IBUS_KEY_ezh: c_int = 16777874;
pub const IBUS_KEY_f: c_int = 102;
pub const IBUS_KEY_fabovedot: c_int = 16784927;
pub const IBUS_KEY_femalesymbol: c_int = 2808;
pub const IBUS_KEY_ff: c_int = 2531;
pub const IBUS_KEY_figdash: c_int = 2747;
pub const IBUS_KEY_filledlefttribullet: c_int = 2780;
pub const IBUS_KEY_filledrectbullet: c_int = 2779;
pub const IBUS_KEY_filledrighttribullet: c_int = 2781;
pub const IBUS_KEY_filledtribulletdown: c_int = 2793;
pub const IBUS_KEY_filledtribulletup: c_int = 2792;
pub const IBUS_KEY_fiveeighths: c_int = 2757;
pub const IBUS_KEY_fivesixths: c_int = 2743;
pub const IBUS_KEY_fivesubscript: c_int = 16785541;
pub const IBUS_KEY_fivesuperior: c_int = 16785525;
pub const IBUS_KEY_fourfifths: c_int = 2741;
pub const IBUS_KEY_foursubscript: c_int = 16785540;
pub const IBUS_KEY_foursuperior: c_int = 16785524;
pub const IBUS_KEY_fourthroot: c_int = 16785948;
pub const IBUS_KEY_function: c_int = 2294;
pub const IBUS_KEY_g: c_int = 103;
pub const IBUS_KEY_gabovedot: c_int = 757;
pub const IBUS_KEY_gbreve: c_int = 699;
pub const IBUS_KEY_gcaron: c_int = 16777703;
pub const IBUS_KEY_gcedilla: c_int = 955;
pub const IBUS_KEY_gcircumflex: c_int = 760;
pub const IBUS_KEY_grave: c_int = 96;
pub const IBUS_KEY_greater: c_int = 62;
pub const IBUS_KEY_greaterthanequal: c_int = 2238;
pub const IBUS_KEY_guillemotleft: c_int = 171;
pub const IBUS_KEY_guillemotright: c_int = 187;
pub const IBUS_KEY_h: c_int = 104;
pub const IBUS_KEY_hairspace: c_int = 2728;
pub const IBUS_KEY_hcircumflex: c_int = 694;
pub const IBUS_KEY_heart: c_int = 2798;
pub const IBUS_KEY_hebrew_aleph: c_int = 3296;
pub const IBUS_KEY_hebrew_ayin: c_int = 3314;
pub const IBUS_KEY_hebrew_bet: c_int = 3297;
pub const IBUS_KEY_hebrew_beth: c_int = 3297;
pub const IBUS_KEY_hebrew_chet: c_int = 3303;
pub const IBUS_KEY_hebrew_dalet: c_int = 3299;
pub const IBUS_KEY_hebrew_daleth: c_int = 3299;
pub const IBUS_KEY_hebrew_doublelowline: c_int = 3295;
pub const IBUS_KEY_hebrew_finalkaph: c_int = 3306;
pub const IBUS_KEY_hebrew_finalmem: c_int = 3309;
pub const IBUS_KEY_hebrew_finalnun: c_int = 3311;
pub const IBUS_KEY_hebrew_finalpe: c_int = 3315;
pub const IBUS_KEY_hebrew_finalzade: c_int = 3317;
pub const IBUS_KEY_hebrew_finalzadi: c_int = 3317;
pub const IBUS_KEY_hebrew_gimel: c_int = 3298;
pub const IBUS_KEY_hebrew_gimmel: c_int = 3298;
pub const IBUS_KEY_hebrew_he: c_int = 3300;
pub const IBUS_KEY_hebrew_het: c_int = 3303;
pub const IBUS_KEY_hebrew_kaph: c_int = 3307;
pub const IBUS_KEY_hebrew_kuf: c_int = 3319;
pub const IBUS_KEY_hebrew_lamed: c_int = 3308;
pub const IBUS_KEY_hebrew_mem: c_int = 3310;
pub const IBUS_KEY_hebrew_nun: c_int = 3312;
pub const IBUS_KEY_hebrew_pe: c_int = 3316;
pub const IBUS_KEY_hebrew_qoph: c_int = 3319;
pub const IBUS_KEY_hebrew_resh: c_int = 3320;
pub const IBUS_KEY_hebrew_samech: c_int = 3313;
pub const IBUS_KEY_hebrew_samekh: c_int = 3313;
pub const IBUS_KEY_hebrew_shin: c_int = 3321;
pub const IBUS_KEY_hebrew_taf: c_int = 3322;
pub const IBUS_KEY_hebrew_taw: c_int = 3322;
pub const IBUS_KEY_hebrew_tet: c_int = 3304;
pub const IBUS_KEY_hebrew_teth: c_int = 3304;
pub const IBUS_KEY_hebrew_waw: c_int = 3301;
pub const IBUS_KEY_hebrew_yod: c_int = 3305;
pub const IBUS_KEY_hebrew_zade: c_int = 3318;
pub const IBUS_KEY_hebrew_zadi: c_int = 3318;
pub const IBUS_KEY_hebrew_zain: c_int = 3302;
pub const IBUS_KEY_hebrew_zayin: c_int = 3302;
pub const IBUS_KEY_hexagram: c_int = 2778;
pub const IBUS_KEY_horizconnector: c_int = 2211;
pub const IBUS_KEY_horizlinescan1: c_int = 2543;
pub const IBUS_KEY_horizlinescan3: c_int = 2544;
pub const IBUS_KEY_horizlinescan5: c_int = 2545;
pub const IBUS_KEY_horizlinescan7: c_int = 2546;
pub const IBUS_KEY_horizlinescan9: c_int = 2547;
pub const IBUS_KEY_hstroke: c_int = 689;
pub const IBUS_KEY_ht: c_int = 2530;
pub const IBUS_KEY_hyphen: c_int = 173;
pub const IBUS_KEY_i: c_int = 105;
pub const IBUS_KEY_iTouch: c_int = 269025120;
pub const IBUS_KEY_iacute: c_int = 237;
pub const IBUS_KEY_ibelowdot: c_int = 16785099;
pub const IBUS_KEY_ibreve: c_int = 16777517;
pub const IBUS_KEY_icircumflex: c_int = 238;
pub const IBUS_KEY_identical: c_int = 2255;
pub const IBUS_KEY_idiaeresis: c_int = 239;
pub const IBUS_KEY_idotless: c_int = 697;
pub const IBUS_KEY_ifonlyif: c_int = 2253;
pub const IBUS_KEY_igrave: c_int = 236;
pub const IBUS_KEY_ihook: c_int = 16785097;
pub const IBUS_KEY_imacron: c_int = 1007;
pub const IBUS_KEY_implies: c_int = 2254;
pub const IBUS_KEY_includedin: c_int = 2266;
pub const IBUS_KEY_includes: c_int = 2267;
pub const IBUS_KEY_infinity: c_int = 2242;
pub const IBUS_KEY_integral: c_int = 2239;
pub const IBUS_KEY_intersection: c_int = 2268;
pub const IBUS_KEY_iogonek: c_int = 999;
pub const IBUS_KEY_itilde: c_int = 949;
pub const IBUS_KEY_j: c_int = 106;
pub const IBUS_KEY_jcircumflex: c_int = 700;
pub const IBUS_KEY_jot: c_int = 3018;
pub const IBUS_KEY_k: c_int = 107;
pub const IBUS_KEY_kana_A: c_int = 1201;
pub const IBUS_KEY_kana_CHI: c_int = 1217;
pub const IBUS_KEY_kana_E: c_int = 1204;
pub const IBUS_KEY_kana_FU: c_int = 1228;
pub const IBUS_KEY_kana_HA: c_int = 1226;
pub const IBUS_KEY_kana_HE: c_int = 1229;
pub const IBUS_KEY_kana_HI: c_int = 1227;
pub const IBUS_KEY_kana_HO: c_int = 1230;
pub const IBUS_KEY_kana_HU: c_int = 1228;
pub const IBUS_KEY_kana_I: c_int = 1202;
pub const IBUS_KEY_kana_KA: c_int = 1206;
pub const IBUS_KEY_kana_KE: c_int = 1209;
pub const IBUS_KEY_kana_KI: c_int = 1207;
pub const IBUS_KEY_kana_KO: c_int = 1210;
pub const IBUS_KEY_kana_KU: c_int = 1208;
pub const IBUS_KEY_kana_MA: c_int = 1231;
pub const IBUS_KEY_kana_ME: c_int = 1234;
pub const IBUS_KEY_kana_MI: c_int = 1232;
pub const IBUS_KEY_kana_MO: c_int = 1235;
pub const IBUS_KEY_kana_MU: c_int = 1233;
pub const IBUS_KEY_kana_N: c_int = 1245;
pub const IBUS_KEY_kana_NA: c_int = 1221;
pub const IBUS_KEY_kana_NE: c_int = 1224;
pub const IBUS_KEY_kana_NI: c_int = 1222;
pub const IBUS_KEY_kana_NO: c_int = 1225;
pub const IBUS_KEY_kana_NU: c_int = 1223;
pub const IBUS_KEY_kana_O: c_int = 1205;
pub const IBUS_KEY_kana_RA: c_int = 1239;
pub const IBUS_KEY_kana_RE: c_int = 1242;
pub const IBUS_KEY_kana_RI: c_int = 1240;
pub const IBUS_KEY_kana_RO: c_int = 1243;
pub const IBUS_KEY_kana_RU: c_int = 1241;
pub const IBUS_KEY_kana_SA: c_int = 1211;
pub const IBUS_KEY_kana_SE: c_int = 1214;
pub const IBUS_KEY_kana_SHI: c_int = 1212;
pub const IBUS_KEY_kana_SO: c_int = 1215;
pub const IBUS_KEY_kana_SU: c_int = 1213;
pub const IBUS_KEY_kana_TA: c_int = 1216;
pub const IBUS_KEY_kana_TE: c_int = 1219;
pub const IBUS_KEY_kana_TI: c_int = 1217;
pub const IBUS_KEY_kana_TO: c_int = 1220;
pub const IBUS_KEY_kana_TSU: c_int = 1218;
pub const IBUS_KEY_kana_TU: c_int = 1218;
pub const IBUS_KEY_kana_U: c_int = 1203;
pub const IBUS_KEY_kana_WA: c_int = 1244;
pub const IBUS_KEY_kana_WO: c_int = 1190;
pub const IBUS_KEY_kana_YA: c_int = 1236;
pub const IBUS_KEY_kana_YO: c_int = 1238;
pub const IBUS_KEY_kana_YU: c_int = 1237;
pub const IBUS_KEY_kana_a: c_int = 1191;
pub const IBUS_KEY_kana_closingbracket: c_int = 1187;
pub const IBUS_KEY_kana_comma: c_int = 1188;
pub const IBUS_KEY_kana_conjunctive: c_int = 1189;
pub const IBUS_KEY_kana_e: c_int = 1194;
pub const IBUS_KEY_kana_fullstop: c_int = 1185;
pub const IBUS_KEY_kana_i: c_int = 1192;
pub const IBUS_KEY_kana_middledot: c_int = 1189;
pub const IBUS_KEY_kana_o: c_int = 1195;
pub const IBUS_KEY_kana_openingbracket: c_int = 1186;
pub const IBUS_KEY_kana_switch: c_int = 65406;
pub const IBUS_KEY_kana_tsu: c_int = 1199;
pub const IBUS_KEY_kana_tu: c_int = 1199;
pub const IBUS_KEY_kana_u: c_int = 1193;
pub const IBUS_KEY_kana_ya: c_int = 1196;
pub const IBUS_KEY_kana_yo: c_int = 1198;
pub const IBUS_KEY_kana_yu: c_int = 1197;
pub const IBUS_KEY_kappa: c_int = 930;
pub const IBUS_KEY_kcedilla: c_int = 1011;
pub const IBUS_KEY_kra: c_int = 930;
pub const IBUS_KEY_l: c_int = 108;
pub const IBUS_KEY_lacute: c_int = 485;
pub const IBUS_KEY_latincross: c_int = 2777;
pub const IBUS_KEY_lbelowdot: c_int = 16784951;
pub const IBUS_KEY_lcaron: c_int = 437;
pub const IBUS_KEY_lcedilla: c_int = 950;
pub const IBUS_KEY_leftanglebracket: c_int = 2748;
pub const IBUS_KEY_leftarrow: c_int = 2299;
pub const IBUS_KEY_leftcaret: c_int = 2979;
pub const IBUS_KEY_leftdoublequotemark: c_int = 2770;
pub const IBUS_KEY_leftmiddlecurlybrace: c_int = 2223;
pub const IBUS_KEY_leftopentriangle: c_int = 2764;
pub const IBUS_KEY_leftpointer: c_int = 2794;
pub const IBUS_KEY_leftradical: c_int = 2209;
pub const IBUS_KEY_leftshoe: c_int = 3034;
pub const IBUS_KEY_leftsinglequotemark: c_int = 2768;
pub const IBUS_KEY_leftt: c_int = 2548;
pub const IBUS_KEY_lefttack: c_int = 3036;
pub const IBUS_KEY_less: c_int = 60;
pub const IBUS_KEY_lessthanequal: c_int = 2236;
pub const IBUS_KEY_lf: c_int = 2533;
pub const IBUS_KEY_logicaland: c_int = 2270;
pub const IBUS_KEY_logicalor: c_int = 2271;
pub const IBUS_KEY_lowleftcorner: c_int = 2541;
pub const IBUS_KEY_lowrightcorner: c_int = 2538;
pub const IBUS_KEY_lstroke: c_int = 435;
pub const IBUS_KEY_m: c_int = 109;
pub const IBUS_KEY_mabovedot: c_int = 16784961;
pub const IBUS_KEY_macron: c_int = 175;
pub const IBUS_KEY_malesymbol: c_int = 2807;
pub const IBUS_KEY_maltesecross: c_int = 2800;
pub const IBUS_KEY_marker: c_int = 2751;
pub const IBUS_KEY_masculine: c_int = 186;
pub const IBUS_KEY_minus: c_int = 45;
pub const IBUS_KEY_minutes: c_int = 2774;
pub const IBUS_KEY_mu: c_int = 181;
pub const IBUS_KEY_multiply: c_int = 215;
pub const IBUS_KEY_musicalflat: c_int = 2806;
pub const IBUS_KEY_musicalsharp: c_int = 2805;
pub const IBUS_KEY_n: c_int = 110;
pub const IBUS_KEY_nabla: c_int = 2245;
pub const IBUS_KEY_nacute: c_int = 497;
pub const IBUS_KEY_ncaron: c_int = 498;
pub const IBUS_KEY_ncedilla: c_int = 1009;
pub const IBUS_KEY_ninesubscript: c_int = 16785545;
pub const IBUS_KEY_ninesuperior: c_int = 16785529;
pub const IBUS_KEY_nl: c_int = 2536;
pub const IBUS_KEY_nobreakspace: c_int = 160;
pub const IBUS_KEY_notapproxeq: c_int = 16785991;
pub const IBUS_KEY_notelementof: c_int = 16785929;
pub const IBUS_KEY_notequal: c_int = 2237;
pub const IBUS_KEY_notidentical: c_int = 16786018;
pub const IBUS_KEY_notsign: c_int = 172;
pub const IBUS_KEY_ntilde: c_int = 241;
pub const IBUS_KEY_numbersign: c_int = 35;
pub const IBUS_KEY_numerosign: c_int = 1712;
pub const IBUS_KEY_o: c_int = 111;
pub const IBUS_KEY_oacute: c_int = 243;
pub const IBUS_KEY_obarred: c_int = 16777845;
pub const IBUS_KEY_obelowdot: c_int = 16785101;
pub const IBUS_KEY_ocaron: c_int = 16777682;
pub const IBUS_KEY_ocircumflex: c_int = 244;
pub const IBUS_KEY_ocircumflexacute: c_int = 16785105;
pub const IBUS_KEY_ocircumflexbelowdot: c_int = 16785113;
pub const IBUS_KEY_ocircumflexgrave: c_int = 16785107;
pub const IBUS_KEY_ocircumflexhook: c_int = 16785109;
pub const IBUS_KEY_ocircumflextilde: c_int = 16785111;
pub const IBUS_KEY_odiaeresis: c_int = 246;
pub const IBUS_KEY_odoubleacute: c_int = 501;
pub const IBUS_KEY_oe: c_int = 5053;
pub const IBUS_KEY_ogonek: c_int = 434;
pub const IBUS_KEY_ograve: c_int = 242;
pub const IBUS_KEY_ohook: c_int = 16785103;
pub const IBUS_KEY_ohorn: c_int = 16777633;
pub const IBUS_KEY_ohornacute: c_int = 16785115;
pub const IBUS_KEY_ohornbelowdot: c_int = 16785123;
pub const IBUS_KEY_ohorngrave: c_int = 16785117;
pub const IBUS_KEY_ohornhook: c_int = 16785119;
pub const IBUS_KEY_ohorntilde: c_int = 16785121;
pub const IBUS_KEY_omacron: c_int = 1010;
pub const IBUS_KEY_oneeighth: c_int = 2755;
pub const IBUS_KEY_onefifth: c_int = 2738;
pub const IBUS_KEY_onehalf: c_int = 189;
pub const IBUS_KEY_onequarter: c_int = 188;
pub const IBUS_KEY_onesixth: c_int = 2742;
pub const IBUS_KEY_onesubscript: c_int = 16785537;
pub const IBUS_KEY_onesuperior: c_int = 185;
pub const IBUS_KEY_onethird: c_int = 2736;
pub const IBUS_KEY_ooblique: c_int = 248;
pub const IBUS_KEY_openrectbullet: c_int = 2786;
pub const IBUS_KEY_openstar: c_int = 2789;
pub const IBUS_KEY_opentribulletdown: c_int = 2788;
pub const IBUS_KEY_opentribulletup: c_int = 2787;
pub const IBUS_KEY_ordfeminine: c_int = 170;
pub const IBUS_KEY_oslash: c_int = 248;
pub const IBUS_KEY_otilde: c_int = 245;
pub const IBUS_KEY_overbar: c_int = 3008;
pub const IBUS_KEY_overline: c_int = 1150;
pub const IBUS_KEY_p: c_int = 112;
pub const IBUS_KEY_pabovedot: c_int = 16784983;
pub const IBUS_KEY_paragraph: c_int = 182;
pub const IBUS_KEY_parenleft: c_int = 40;
pub const IBUS_KEY_parenright: c_int = 41;
pub const IBUS_KEY_partdifferential: c_int = 16785922;
pub const IBUS_KEY_partialderivative: c_int = 2287;
pub const IBUS_KEY_percent: c_int = 37;
pub const IBUS_KEY_period: c_int = 46;
pub const IBUS_KEY_periodcentered: c_int = 183;
pub const IBUS_KEY_permille: c_int = 2773;
pub const IBUS_KEY_phonographcopyright: c_int = 2811;
pub const IBUS_KEY_plus: c_int = 43;
pub const IBUS_KEY_plusminus: c_int = 177;
pub const IBUS_KEY_prescription: c_int = 2772;
pub const IBUS_KEY_prolongedsound: c_int = 1200;
pub const IBUS_KEY_punctspace: c_int = 2726;
pub const IBUS_KEY_q: c_int = 113;
pub const IBUS_KEY_quad: c_int = 3020;
pub const IBUS_KEY_question: c_int = 63;
pub const IBUS_KEY_questiondown: c_int = 191;
pub const IBUS_KEY_quotedbl: c_int = 34;
pub const IBUS_KEY_quoteleft: c_int = 96;
pub const IBUS_KEY_quoteright: c_int = 39;
pub const IBUS_KEY_r: c_int = 114;
pub const IBUS_KEY_racute: c_int = 480;
pub const IBUS_KEY_radical: c_int = 2262;
pub const IBUS_KEY_rcaron: c_int = 504;
pub const IBUS_KEY_rcedilla: c_int = 947;
pub const IBUS_KEY_registered: c_int = 174;
pub const IBUS_KEY_rightanglebracket: c_int = 2750;
pub const IBUS_KEY_rightarrow: c_int = 2301;
pub const IBUS_KEY_rightcaret: c_int = 2982;
pub const IBUS_KEY_rightdoublequotemark: c_int = 2771;
pub const IBUS_KEY_rightmiddlecurlybrace: c_int = 2224;
pub const IBUS_KEY_rightmiddlesummation: c_int = 2231;
pub const IBUS_KEY_rightopentriangle: c_int = 2765;
pub const IBUS_KEY_rightpointer: c_int = 2795;
pub const IBUS_KEY_rightshoe: c_int = 3032;
pub const IBUS_KEY_rightsinglequotemark: c_int = 2769;
pub const IBUS_KEY_rightt: c_int = 2549;
pub const IBUS_KEY_righttack: c_int = 3068;
pub const IBUS_KEY_s: c_int = 115;
pub const IBUS_KEY_sabovedot: c_int = 16784993;
pub const IBUS_KEY_sacute: c_int = 438;
pub const IBUS_KEY_scaron: c_int = 441;
pub const IBUS_KEY_scedilla: c_int = 442;
pub const IBUS_KEY_schwa: c_int = 16777817;
pub const IBUS_KEY_scircumflex: c_int = 766;
pub const IBUS_KEY_script_switch: c_int = 65406;
pub const IBUS_KEY_seconds: c_int = 2775;
pub const IBUS_KEY_section: c_int = 167;
pub const IBUS_KEY_semicolon: c_int = 59;
pub const IBUS_KEY_semivoicedsound: c_int = 1247;
pub const IBUS_KEY_seveneighths: c_int = 2758;
pub const IBUS_KEY_sevensubscript: c_int = 16785543;
pub const IBUS_KEY_sevensuperior: c_int = 16785527;
pub const IBUS_KEY_signaturemark: c_int = 2762;
pub const IBUS_KEY_signifblank: c_int = 2732;
pub const IBUS_KEY_similarequal: c_int = 2249;
pub const IBUS_KEY_singlelowquotemark: c_int = 2813;
pub const IBUS_KEY_sixsubscript: c_int = 16785542;
pub const IBUS_KEY_sixsuperior: c_int = 16785526;
pub const IBUS_KEY_slash: c_int = 47;
pub const IBUS_KEY_soliddiamond: c_int = 2528;
pub const IBUS_KEY_space: c_int = 32;
pub const IBUS_KEY_squareroot: c_int = 16785946;
pub const IBUS_KEY_ssharp: c_int = 223;
pub const IBUS_KEY_sterling: c_int = 163;
pub const IBUS_KEY_stricteq: c_int = 16786019;
pub const IBUS_KEY_t: c_int = 116;
pub const IBUS_KEY_tabovedot: c_int = 16785003;
pub const IBUS_KEY_tcaron: c_int = 443;
pub const IBUS_KEY_tcedilla: c_int = 510;
pub const IBUS_KEY_telephone: c_int = 2809;
pub const IBUS_KEY_telephonerecorder: c_int = 2810;
pub const IBUS_KEY_therefore: c_int = 2240;
pub const IBUS_KEY_thinspace: c_int = 2727;
pub const IBUS_KEY_thorn: c_int = 254;
pub const IBUS_KEY_threeeighths: c_int = 2756;
pub const IBUS_KEY_threefifths: c_int = 2740;
pub const IBUS_KEY_threequarters: c_int = 190;
pub const IBUS_KEY_threesubscript: c_int = 16785539;
pub const IBUS_KEY_threesuperior: c_int = 179;
pub const IBUS_KEY_tintegral: c_int = 16785965;
pub const IBUS_KEY_topintegral: c_int = 2212;
pub const IBUS_KEY_topleftparens: c_int = 2219;
pub const IBUS_KEY_topleftradical: c_int = 2210;
pub const IBUS_KEY_topleftsqbracket: c_int = 2215;
pub const IBUS_KEY_topleftsummation: c_int = 2225;
pub const IBUS_KEY_toprightparens: c_int = 2221;
pub const IBUS_KEY_toprightsqbracket: c_int = 2217;
pub const IBUS_KEY_toprightsummation: c_int = 2229;
pub const IBUS_KEY_topt: c_int = 2551;
pub const IBUS_KEY_topvertsummationconnector: c_int = 2227;
pub const IBUS_KEY_trademark: c_int = 2761;
pub const IBUS_KEY_trademarkincircle: c_int = 2763;
pub const IBUS_KEY_tslash: c_int = 956;
pub const IBUS_KEY_twofifths: c_int = 2739;
pub const IBUS_KEY_twosubscript: c_int = 16785538;
pub const IBUS_KEY_twosuperior: c_int = 178;
pub const IBUS_KEY_twothirds: c_int = 2737;
pub const IBUS_KEY_u: c_int = 117;
pub const IBUS_KEY_uacute: c_int = 250;
pub const IBUS_KEY_ubelowdot: c_int = 16785125;
pub const IBUS_KEY_ubreve: c_int = 765;
pub const IBUS_KEY_ucircumflex: c_int = 251;
pub const IBUS_KEY_udiaeresis: c_int = 252;
pub const IBUS_KEY_udoubleacute: c_int = 507;
pub const IBUS_KEY_ugrave: c_int = 249;
pub const IBUS_KEY_uhook: c_int = 16785127;
pub const IBUS_KEY_uhorn: c_int = 16777648;
pub const IBUS_KEY_uhornacute: c_int = 16785129;
pub const IBUS_KEY_uhornbelowdot: c_int = 16785137;
pub const IBUS_KEY_uhorngrave: c_int = 16785131;
pub const IBUS_KEY_uhornhook: c_int = 16785133;
pub const IBUS_KEY_uhorntilde: c_int = 16785135;
pub const IBUS_KEY_umacron: c_int = 1022;
pub const IBUS_KEY_underbar: c_int = 3014;
pub const IBUS_KEY_underscore: c_int = 95;
pub const IBUS_KEY_union: c_int = 2269;
pub const IBUS_KEY_uogonek: c_int = 1017;
pub const IBUS_KEY_uparrow: c_int = 2300;
pub const IBUS_KEY_upcaret: c_int = 2985;
pub const IBUS_KEY_upleftcorner: c_int = 2540;
pub const IBUS_KEY_uprightcorner: c_int = 2539;
pub const IBUS_KEY_upshoe: c_int = 3011;
pub const IBUS_KEY_upstile: c_int = 3027;
pub const IBUS_KEY_uptack: c_int = 3022;
pub const IBUS_KEY_uring: c_int = 505;
pub const IBUS_KEY_utilde: c_int = 1021;
pub const IBUS_KEY_v: c_int = 118;
pub const IBUS_KEY_variation: c_int = 2241;
pub const IBUS_KEY_vertbar: c_int = 2552;
pub const IBUS_KEY_vertconnector: c_int = 2214;
pub const IBUS_KEY_voicedsound: c_int = 1246;
pub const IBUS_KEY_vt: c_int = 2537;
pub const IBUS_KEY_w: c_int = 119;
pub const IBUS_KEY_wacute: c_int = 16785027;
pub const IBUS_KEY_wcircumflex: c_int = 16777589;
pub const IBUS_KEY_wdiaeresis: c_int = 16785029;
pub const IBUS_KEY_wgrave: c_int = 16785025;
pub const IBUS_KEY_x: c_int = 120;
pub const IBUS_KEY_xabovedot: c_int = 16785035;
pub const IBUS_KEY_y: c_int = 121;
pub const IBUS_KEY_yacute: c_int = 253;
pub const IBUS_KEY_ybelowdot: c_int = 16785141;
pub const IBUS_KEY_ycircumflex: c_int = 16777591;
pub const IBUS_KEY_ydiaeresis: c_int = 255;
pub const IBUS_KEY_yen: c_int = 165;
pub const IBUS_KEY_ygrave: c_int = 16785139;
pub const IBUS_KEY_yhook: c_int = 16785143;
pub const IBUS_KEY_ytilde: c_int = 16785145;
pub const IBUS_KEY_z: c_int = 122;
pub const IBUS_KEY_zabovedot: c_int = 447;
pub const IBUS_KEY_zacute: c_int = 444;
pub const IBUS_KEY_zcaron: c_int = 446;
pub const IBUS_KEY_zerosubscript: c_int = 16785536;
pub const IBUS_KEY_zerosuperior: c_int = 16785520;
pub const IBUS_KEY_zstroke: c_int = 16777654;
pub const IBUS_KP_0: c_int = 65456;
pub const IBUS_KP_1: c_int = 65457;
pub const IBUS_KP_2: c_int = 65458;
pub const IBUS_KP_3: c_int = 65459;
pub const IBUS_KP_4: c_int = 65460;
pub const IBUS_KP_5: c_int = 65461;
pub const IBUS_KP_6: c_int = 65462;
pub const IBUS_KP_7: c_int = 65463;
pub const IBUS_KP_8: c_int = 65464;
pub const IBUS_KP_9: c_int = 65465;
pub const IBUS_KP_Add: c_int = 65451;
pub const IBUS_KP_Begin: c_int = 65437;
pub const IBUS_KP_Decimal: c_int = 65454;
pub const IBUS_KP_Delete: c_int = 65439;
pub const IBUS_KP_Divide: c_int = 65455;
pub const IBUS_KP_Down: c_int = 65433;
pub const IBUS_KP_End: c_int = 65436;
pub const IBUS_KP_Enter: c_int = 65421;
pub const IBUS_KP_Equal: c_int = 65469;
pub const IBUS_KP_F1: c_int = 65425;
pub const IBUS_KP_F2: c_int = 65426;
pub const IBUS_KP_F3: c_int = 65427;
pub const IBUS_KP_F4: c_int = 65428;
pub const IBUS_KP_Home: c_int = 65429;
pub const IBUS_KP_Insert: c_int = 65438;
pub const IBUS_KP_Left: c_int = 65430;
pub const IBUS_KP_Multiply: c_int = 65450;
pub const IBUS_KP_Next: c_int = 65435;
pub const IBUS_KP_Page_Down: c_int = 65435;
pub const IBUS_KP_Page_Up: c_int = 65434;
pub const IBUS_KP_Prior: c_int = 65434;
pub const IBUS_KP_Right: c_int = 65432;
pub const IBUS_KP_Separator: c_int = 65452;
pub const IBUS_KP_Space: c_int = 65408;
pub const IBUS_KP_Subtract: c_int = 65453;
pub const IBUS_KP_Tab: c_int = 65417;
pub const IBUS_KP_Up: c_int = 65431;
pub const IBUS_Kana_Lock: c_int = 65325;
pub const IBUS_Kana_Shift: c_int = 65326;
pub const IBUS_Kanji: c_int = 65313;
pub const IBUS_Kanji_Bangou: c_int = 65335;
pub const IBUS_Katakana: c_int = 65318;
pub const IBUS_Kcedilla: c_int = 979;
pub const IBUS_Korean_Won: c_int = 3839;
pub const IBUS_L: c_int = 76;
pub const IBUS_L1: c_int = 65480;
pub const IBUS_L10: c_int = 65489;
pub const IBUS_L2: c_int = 65481;
pub const IBUS_L3: c_int = 65482;
pub const IBUS_L4: c_int = 65483;
pub const IBUS_L5: c_int = 65484;
pub const IBUS_L6: c_int = 65485;
pub const IBUS_L7: c_int = 65486;
pub const IBUS_L8: c_int = 65487;
pub const IBUS_L9: c_int = 65488;
pub const IBUS_Lacute: c_int = 453;
pub const IBUS_Last_Virtual_Screen: c_int = 65236;
pub const IBUS_Lbelowdot: c_int = 16784950;
pub const IBUS_Lcaron: c_int = 421;
pub const IBUS_Lcedilla: c_int = 934;
pub const IBUS_Left: c_int = 65361;
pub const IBUS_Linefeed: c_int = 65290;
pub const IBUS_LiraSign: c_int = 16785572;
pub const IBUS_Lstroke: c_int = 419;
pub const IBUS_M: c_int = 77;
pub const IBUS_MAJOR_VERSION: c_int = 1;
pub const IBUS_MAX_COMPOSE_LEN: c_int = 255;
pub const IBUS_MICRO_VERSION: c_int = 27;
pub const IBUS_MINOR_VERSION: c_int = 5;
pub const IBUS_Mabovedot: c_int = 16784960;
pub const IBUS_Macedonia_DSE: c_int = 1717;
pub const IBUS_Macedonia_GJE: c_int = 1714;
pub const IBUS_Macedonia_KJE: c_int = 1724;
pub const IBUS_Macedonia_dse: c_int = 1701;
pub const IBUS_Macedonia_gje: c_int = 1698;
pub const IBUS_Macedonia_kje: c_int = 1708;
pub const IBUS_Mae_Koho: c_int = 65342;
pub const IBUS_Massyo: c_int = 65324;
pub const IBUS_Menu: c_int = 65383;
pub const IBUS_Meta_L: c_int = 65511;
pub const IBUS_Meta_R: c_int = 65512;
pub const IBUS_MillSign: c_int = 16785573;
pub const IBUS_Mode_switch: c_int = 65406;
pub const IBUS_MouseKeys_Accel_Enable: c_int = 65143;
pub const IBUS_MouseKeys_Enable: c_int = 65142;
pub const IBUS_Muhenkan: c_int = 65314;
pub const IBUS_Multi_key: c_int = 65312;
pub const IBUS_MultipleCandidate: c_int = 65341;
pub const IBUS_N: c_int = 78;
pub const IBUS_Nacute: c_int = 465;
pub const IBUS_NairaSign: c_int = 16785574;
pub const IBUS_Ncaron: c_int = 466;
pub const IBUS_Ncedilla: c_int = 977;
pub const IBUS_NewSheqelSign: c_int = 16785578;
pub const IBUS_Next: c_int = 65366;
pub const IBUS_Next_Virtual_Screen: c_int = 65234;
pub const IBUS_Ntilde: c_int = 209;
pub const IBUS_Num_Lock: c_int = 65407;
pub const IBUS_O: c_int = 79;
pub const IBUS_OE: c_int = 5052;
pub const IBUS_Oacute: c_int = 211;
pub const IBUS_Obarred: c_int = 16777631;
pub const IBUS_Obelowdot: c_int = 16785100;
pub const IBUS_Ocaron: c_int = 16777681;
pub const IBUS_Ocircumflex: c_int = 212;
pub const IBUS_Ocircumflexacute: c_int = 16785104;
pub const IBUS_Ocircumflexbelowdot: c_int = 16785112;
pub const IBUS_Ocircumflexgrave: c_int = 16785106;
pub const IBUS_Ocircumflexhook: c_int = 16785108;
pub const IBUS_Ocircumflextilde: c_int = 16785110;
pub const IBUS_Odiaeresis: c_int = 214;
pub const IBUS_Odoubleacute: c_int = 469;
pub const IBUS_Ograve: c_int = 210;
pub const IBUS_Ohook: c_int = 16785102;
pub const IBUS_Ohorn: c_int = 16777632;
pub const IBUS_Ohornacute: c_int = 16785114;
pub const IBUS_Ohornbelowdot: c_int = 16785122;
pub const IBUS_Ohorngrave: c_int = 16785116;
pub const IBUS_Ohornhook: c_int = 16785118;
pub const IBUS_Ohorntilde: c_int = 16785120;
pub const IBUS_Omacron: c_int = 978;
pub const IBUS_Ooblique: c_int = 216;
pub const IBUS_Oslash: c_int = 216;
pub const IBUS_Otilde: c_int = 213;
pub const IBUS_Overlay1_Enable: c_int = 65144;
pub const IBUS_Overlay2_Enable: c_int = 65145;
pub const IBUS_P: c_int = 80;
pub const IBUS_PATH_CONFIG: &[u8] = b"/org/freedesktop/IBus/Config\0";
pub const IBUS_PATH_FACTORY: &[u8] = b"/org/freedesktop/IBus/Factory\0";
pub const IBUS_PATH_IBUS: &[u8] = b"/org/freedesktop/IBus\0";
pub const IBUS_PATH_INPUT_CONTEXT: &[u8] = b"/org/freedesktop/IBus/InputContext_%d\0";
pub const IBUS_PATH_NOTIFICATIONS: &[u8] = b"/org/freedesktop/IBus/Notifications\0";
pub const IBUS_PATH_PANEL: &[u8] = b"/org/freedesktop/IBus/Panel\0";
pub const IBUS_PATH_PANEL_EXTENSION_EMOJI: &[u8] = b"/org/freedesktop/IBus/Panel/Extension/Emoji\0";
pub const IBUS_Pabovedot: c_int = 16784982;
pub const IBUS_Page_Down: c_int = 65366;
pub const IBUS_Page_Up: c_int = 65365;
pub const IBUS_Pause: c_int = 65299;
pub const IBUS_PesetaSign: c_int = 16785575;
pub const IBUS_Pointer_Accelerate: c_int = 65274;
pub const IBUS_Pointer_Button1: c_int = 65257;
pub const IBUS_Pointer_Button2: c_int = 65258;
pub const IBUS_Pointer_Button3: c_int = 65259;
pub const IBUS_Pointer_Button4: c_int = 65260;
pub const IBUS_Pointer_Button5: c_int = 65261;
pub const IBUS_Pointer_Button_Dflt: c_int = 65256;
pub const IBUS_Pointer_DblClick1: c_int = 65263;
pub const IBUS_Pointer_DblClick2: c_int = 65264;
pub const IBUS_Pointer_DblClick3: c_int = 65265;
pub const IBUS_Pointer_DblClick4: c_int = 65266;
pub const IBUS_Pointer_DblClick5: c_int = 65267;
pub const IBUS_Pointer_DblClick_Dflt: c_int = 65262;
pub const IBUS_Pointer_DfltBtnNext: c_int = 65275;
pub const IBUS_Pointer_DfltBtnPrev: c_int = 65276;
pub const IBUS_Pointer_Down: c_int = 65251;
pub const IBUS_Pointer_DownLeft: c_int = 65254;
pub const IBUS_Pointer_DownRight: c_int = 65255;
pub const IBUS_Pointer_Drag1: c_int = 65269;
pub const IBUS_Pointer_Drag2: c_int = 65270;
pub const IBUS_Pointer_Drag3: c_int = 65271;
pub const IBUS_Pointer_Drag4: c_int = 65272;
pub const IBUS_Pointer_Drag5: c_int = 65277;
pub const IBUS_Pointer_Drag_Dflt: c_int = 65268;
pub const IBUS_Pointer_EnableKeys: c_int = 65273;
pub const IBUS_Pointer_Left: c_int = 65248;
pub const IBUS_Pointer_Right: c_int = 65249;
pub const IBUS_Pointer_Up: c_int = 65250;
pub const IBUS_Pointer_UpLeft: c_int = 65252;
pub const IBUS_Pointer_UpRight: c_int = 65253;
pub const IBUS_Prev_Virtual_Screen: c_int = 65233;
pub const IBUS_PreviousCandidate: c_int = 65342;
pub const IBUS_Print: c_int = 65377;
pub const IBUS_Prior: c_int = 65365;
pub const IBUS_Q: c_int = 81;
pub const IBUS_R: c_int = 82;
pub const IBUS_R1: c_int = 65490;
pub const IBUS_R10: c_int = 65499;
pub const IBUS_R11: c_int = 65500;
pub const IBUS_R12: c_int = 65501;
pub const IBUS_R13: c_int = 65502;
pub const IBUS_R14: c_int = 65503;
pub const IBUS_R15: c_int = 65504;
pub const IBUS_R2: c_int = 65491;
pub const IBUS_R3: c_int = 65492;
pub const IBUS_R4: c_int = 65493;
pub const IBUS_R5: c_int = 65494;
pub const IBUS_R6: c_int = 65495;
pub const IBUS_R7: c_int = 65496;
pub const IBUS_R8: c_int = 65497;
pub const IBUS_R9: c_int = 65498;
pub const IBUS_Racute: c_int = 448;
pub const IBUS_Rcaron: c_int = 472;
pub const IBUS_Rcedilla: c_int = 931;
pub const IBUS_Redo: c_int = 65382;
pub const IBUS_RepeatKeys_Enable: c_int = 65138;
pub const IBUS_Return: c_int = 65293;
pub const IBUS_Right: c_int = 65363;
pub const IBUS_Romaji: c_int = 65316;
pub const IBUS_RupeeSign: c_int = 16785576;
pub const IBUS_S: c_int = 83;
pub const IBUS_SCHWA: c_int = 16777615;
pub const IBUS_SERVICE_CONFIG: &[u8] = b"org.freedesktop.IBus.Config\0";
pub const IBUS_SERVICE_IBUS: &[u8] = b"org.freedesktop.IBus\0";
pub const IBUS_SERVICE_NOTIFICATIONS: &[u8] = b"org.freedesktop.IBus.Notifications\0";
pub const IBUS_SERVICE_PANEL: &[u8] = b"org.freedesktop.IBus.Panel\0";
pub const IBUS_SERVICE_PANEL_EXTENSION: &[u8] = b"org.freedesktop.IBus.Panel.Extension\0";
pub const IBUS_SERVICE_PANEL_EXTENSION_EMOJI: &[u8] = b"org.freedesktop.IBus.Panel.Extension.Emoji\0";
pub const IBUS_SERVICE_PORTAL: &[u8] = b"org.freedesktop.portal.IBus\0";
pub const IBUS_Sabovedot: c_int = 16784992;
pub const IBUS_Sacute: c_int = 422;
pub const IBUS_Scaron: c_int = 425;
pub const IBUS_Scedilla: c_int = 426;
pub const IBUS_Scircumflex: c_int = 734;
pub const IBUS_Scroll_Lock: c_int = 65300;
pub const IBUS_Select: c_int = 65376;
pub const IBUS_Serbian_DJE: c_int = 1713;
pub const IBUS_Serbian_DZE: c_int = 1727;
pub const IBUS_Serbian_JE: c_int = 1720;
pub const IBUS_Serbian_LJE: c_int = 1721;
pub const IBUS_Serbian_NJE: c_int = 1722;
pub const IBUS_Serbian_TSHE: c_int = 1723;
pub const IBUS_Serbian_dje: c_int = 1697;
pub const IBUS_Serbian_dze: c_int = 1711;
pub const IBUS_Serbian_je: c_int = 1704;
pub const IBUS_Serbian_lje: c_int = 1705;
pub const IBUS_Serbian_nje: c_int = 1706;
pub const IBUS_Serbian_tshe: c_int = 1707;
pub const IBUS_Shift_L: c_int = 65505;
pub const IBUS_Shift_Lock: c_int = 65510;
pub const IBUS_Shift_R: c_int = 65506;
pub const IBUS_SingleCandidate: c_int = 65340;
pub const IBUS_SlowKeys_Enable: c_int = 65139;
pub const IBUS_StickyKeys_Enable: c_int = 65141;
pub const IBUS_Super_L: c_int = 65515;
pub const IBUS_Super_R: c_int = 65516;
pub const IBUS_Sys_Req: c_int = 65301;
pub const IBUS_T: c_int = 84;
pub const IBUS_THORN: c_int = 222;
pub const IBUS_Tab: c_int = 65289;
pub const IBUS_Tabovedot: c_int = 16785002;
pub const IBUS_Tcaron: c_int = 427;
pub const IBUS_Tcedilla: c_int = 478;
pub const IBUS_Terminate_Server: c_int = 65237;
pub const IBUS_Thai_baht: c_int = 3551;
pub const IBUS_Thai_bobaimai: c_int = 3514;
pub const IBUS_Thai_chochan: c_int = 3496;
pub const IBUS_Thai_chochang: c_int = 3498;
pub const IBUS_Thai_choching: c_int = 3497;
pub const IBUS_Thai_chochoe: c_int = 3500;
pub const IBUS_Thai_dochada: c_int = 3502;
pub const IBUS_Thai_dodek: c_int = 3508;
pub const IBUS_Thai_fofa: c_int = 3517;
pub const IBUS_Thai_fofan: c_int = 3519;
pub const IBUS_Thai_hohip: c_int = 3531;
pub const IBUS_Thai_honokhuk: c_int = 3534;
pub const IBUS_Thai_khokhai: c_int = 3490;
pub const IBUS_Thai_khokhon: c_int = 3493;
pub const IBUS_Thai_khokhuat: c_int = 3491;
pub const IBUS_Thai_khokhwai: c_int = 3492;
pub const IBUS_Thai_khorakhang: c_int = 3494;
pub const IBUS_Thai_kokai: c_int = 3489;
pub const IBUS_Thai_lakkhangyao: c_int = 3557;
pub const IBUS_Thai_lekchet: c_int = 3575;
pub const IBUS_Thai_lekha: c_int = 3573;
pub const IBUS_Thai_lekhok: c_int = 3574;
pub const IBUS_Thai_lekkao: c_int = 3577;
pub const IBUS_Thai_leknung: c_int = 3569;
pub const IBUS_Thai_lekpaet: c_int = 3576;
pub const IBUS_Thai_leksam: c_int = 3571;
pub const IBUS_Thai_leksi: c_int = 3572;
pub const IBUS_Thai_leksong: c_int = 3570;
pub const IBUS_Thai_leksun: c_int = 3568;
pub const IBUS_Thai_lochula: c_int = 3532;
pub const IBUS_Thai_loling: c_int = 3525;
pub const IBUS_Thai_lu: c_int = 3526;
pub const IBUS_Thai_maichattawa: c_int = 3563;
pub const IBUS_Thai_maiek: c_int = 3560;
pub const IBUS_Thai_maihanakat: c_int = 3537;
pub const IBUS_Thai_maihanakat_maitho: c_int = 3550;
pub const IBUS_Thai_maitaikhu: c_int = 3559;
pub const IBUS_Thai_maitho: c_int = 3561;
pub const IBUS_Thai_maitri: c_int = 3562;
pub const IBUS_Thai_maiyamok: c_int = 3558;
pub const IBUS_Thai_moma: c_int = 3521;
pub const IBUS_Thai_ngongu: c_int = 3495;
pub const IBUS_Thai_nikhahit: c_int = 3565;
pub const IBUS_Thai_nonen: c_int = 3507;
pub const IBUS_Thai_nonu: c_int = 3513;
pub const IBUS_Thai_oang: c_int = 3533;
pub const IBUS_Thai_paiyannoi: c_int = 3535;
pub const IBUS_Thai_phinthu: c_int = 3546;
pub const IBUS_Thai_phophan: c_int = 3518;
pub const IBUS_Thai_phophung: c_int = 3516;
pub const IBUS_Thai_phosamphao: c_int = 3520;
pub const IBUS_Thai_popla: c_int = 3515;
pub const IBUS_Thai_rorua: c_int = 3523;
pub const IBUS_Thai_ru: c_int = 3524;
pub const IBUS_Thai_saraa: c_int = 3536;
pub const IBUS_Thai_saraaa: c_int = 3538;
pub const IBUS_Thai_saraae: c_int = 3553;
pub const IBUS_Thai_saraaimaimalai: c_int = 3556;
pub const IBUS_Thai_saraaimaimuan: c_int = 3555;
pub const IBUS_Thai_saraam: c_int = 3539;
pub const IBUS_Thai_sarae: c_int = 3552;
pub const IBUS_Thai_sarai: c_int = 3540;
pub const IBUS_Thai_saraii: c_int = 3541;
pub const IBUS_Thai_sarao: c_int = 3554;
pub const IBUS_Thai_sarau: c_int = 3544;
pub const IBUS_Thai_saraue: c_int = 3542;
pub const IBUS_Thai_sarauee: c_int = 3543;
pub const IBUS_Thai_sarauu: c_int = 3545;
pub const IBUS_Thai_sorusi: c_int = 3529;
pub const IBUS_Thai_sosala: c_int = 3528;
pub const IBUS_Thai_soso: c_int = 3499;
pub const IBUS_Thai_sosua: c_int = 3530;
pub const IBUS_Thai_thanthakhat: c_int = 3564;
pub const IBUS_Thai_thonangmontho: c_int = 3505;
pub const IBUS_Thai_thophuthao: c_int = 3506;
pub const IBUS_Thai_thothahan: c_int = 3511;
pub const IBUS_Thai_thothan: c_int = 3504;
pub const IBUS_Thai_thothong: c_int = 3512;
pub const IBUS_Thai_thothung: c_int = 3510;
pub const IBUS_Thai_topatak: c_int = 3503;
pub const IBUS_Thai_totao: c_int = 3509;
pub const IBUS_Thai_wowaen: c_int = 3527;
pub const IBUS_Thai_yoyak: c_int = 3522;
pub const IBUS_Thai_yoying: c_int = 3501;
pub const IBUS_Thorn: c_int = 222;
pub const IBUS_Touroku: c_int = 65323;
pub const IBUS_Tslash: c_int = 940;
pub const IBUS_U: c_int = 85;
pub const IBUS_Uacute: c_int = 218;
pub const IBUS_Ubelowdot: c_int = 16785124;
pub const IBUS_Ubreve: c_int = 733;
pub const IBUS_Ucircumflex: c_int = 219;
pub const IBUS_Udiaeresis: c_int = 220;
pub const IBUS_Udoubleacute: c_int = 475;
pub const IBUS_Ugrave: c_int = 217;
pub const IBUS_Uhook: c_int = 16785126;
pub const IBUS_Uhorn: c_int = 16777647;
pub const IBUS_Uhornacute: c_int = 16785128;
pub const IBUS_Uhornbelowdot: c_int = 16785136;
pub const IBUS_Uhorngrave: c_int = 16785130;
pub const IBUS_Uhornhook: c_int = 16785132;
pub const IBUS_Uhorntilde: c_int = 16785134;
pub const IBUS_Ukrainian_GHE_WITH_UPTURN: c_int = 1725;
pub const IBUS_Ukrainian_I: c_int = 1718;
pub const IBUS_Ukrainian_IE: c_int = 1716;
pub const IBUS_Ukrainian_YI: c_int = 1719;
pub const IBUS_Ukrainian_ghe_with_upturn: c_int = 1709;
pub const IBUS_Ukrainian_i: c_int = 1702;
pub const IBUS_Ukrainian_ie: c_int = 1700;
pub const IBUS_Ukrainian_yi: c_int = 1703;
pub const IBUS_Ukranian_I: c_int = 1718;
pub const IBUS_Ukranian_JE: c_int = 1716;
pub const IBUS_Ukranian_YI: c_int = 1719;
pub const IBUS_Ukranian_i: c_int = 1702;
pub const IBUS_Ukranian_je: c_int = 1700;
pub const IBUS_Ukranian_yi: c_int = 1703;
pub const IBUS_Umacron: c_int = 990;
pub const IBUS_Undo: c_int = 65381;
pub const IBUS_Uogonek: c_int = 985;
pub const IBUS_Up: c_int = 65362;
pub const IBUS_Uring: c_int = 473;
pub const IBUS_Utilde: c_int = 989;
pub const IBUS_V: c_int = 86;
pub const IBUS_VoidSymbol: c_int = 16777215;
pub const IBUS_W: c_int = 87;
pub const IBUS_Wacute: c_int = 16785026;
pub const IBUS_Wcircumflex: c_int = 16777588;
pub const IBUS_Wdiaeresis: c_int = 16785028;
pub const IBUS_Wgrave: c_int = 16785024;
pub const IBUS_WonSign: c_int = 16785577;
pub const IBUS_X: c_int = 88;
pub const IBUS_Xabovedot: c_int = 16785034;
pub const IBUS_Y: c_int = 89;
pub const IBUS_Yacute: c_int = 221;
pub const IBUS_Ybelowdot: c_int = 16785140;
pub const IBUS_Ycircumflex: c_int = 16777590;
pub const IBUS_Ydiaeresis: c_int = 5054;
pub const IBUS_Ygrave: c_int = 16785138;
pub const IBUS_Yhook: c_int = 16785142;
pub const IBUS_Ytilde: c_int = 16785144;
pub const IBUS_Z: c_int = 90;
pub const IBUS_Zabovedot: c_int = 431;
pub const IBUS_Zacute: c_int = 428;
pub const IBUS_Zcaron: c_int = 430;
pub const IBUS_Zen_Koho: c_int = 65341;
pub const IBUS_Zenkaku: c_int = 65320;
pub const IBUS_Zenkaku_Hankaku: c_int = 65322;
pub const IBUS_Zstroke: c_int = 16777653;
pub const IBUS_a: c_int = 97;
pub const IBUS_aacute: c_int = 225;
pub const IBUS_abelowdot: c_int = 16785057;
pub const IBUS_abovedot: c_int = 511;
pub const IBUS_abreve: c_int = 483;
pub const IBUS_abreveacute: c_int = 16785071;
pub const IBUS_abrevebelowdot: c_int = 16785079;
pub const IBUS_abrevegrave: c_int = 16785073;
pub const IBUS_abrevehook: c_int = 16785075;
pub const IBUS_abrevetilde: c_int = 16785077;
pub const IBUS_acircumflex: c_int = 226;
pub const IBUS_acircumflexacute: c_int = 16785061;
pub const IBUS_acircumflexbelowdot: c_int = 16785069;
pub const IBUS_acircumflexgrave: c_int = 16785063;
pub const IBUS_acircumflexhook: c_int = 16785065;
pub const IBUS_acircumflextilde: c_int = 16785067;
pub const IBUS_acute: c_int = 180;
pub const IBUS_adiaeresis: c_int = 228;
pub const IBUS_ae: c_int = 230;
pub const IBUS_agrave: c_int = 224;
pub const IBUS_ahook: c_int = 16785059;
pub const IBUS_amacron: c_int = 992;
pub const IBUS_ampersand: c_int = 38;
pub const IBUS_aogonek: c_int = 433;
pub const IBUS_apostrophe: c_int = 39;
pub const IBUS_approxeq: c_int = 16785992;
pub const IBUS_approximate: c_int = 2248;
pub const IBUS_aring: c_int = 229;
pub const IBUS_asciicircum: c_int = 94;
pub const IBUS_asciitilde: c_int = 126;
pub const IBUS_asterisk: c_int = 42;
pub const IBUS_at: c_int = 64;
pub const IBUS_atilde: c_int = 227;
pub const IBUS_b: c_int = 98;
pub const IBUS_babovedot: c_int = 16784899;
pub const IBUS_backslash: c_int = 92;
pub const IBUS_ballotcross: c_int = 2804;
pub const IBUS_bar: c_int = 124;
pub const IBUS_because: c_int = 16785973;
pub const IBUS_blank: c_int = 2527;
pub const IBUS_botintegral: c_int = 2213;
pub const IBUS_botleftparens: c_int = 2220;
pub const IBUS_botleftsqbracket: c_int = 2216;
pub const IBUS_botleftsummation: c_int = 2226;
pub const IBUS_botrightparens: c_int = 2222;
pub const IBUS_botrightsqbracket: c_int = 2218;
pub const IBUS_botrightsummation: c_int = 2230;
pub const IBUS_bott: c_int = 2550;
pub const IBUS_botvertsummationconnector: c_int = 2228;
pub const IBUS_braceleft: c_int = 123;
pub const IBUS_braceright: c_int = 125;
pub const IBUS_bracketleft: c_int = 91;
pub const IBUS_bracketright: c_int = 93;
pub const IBUS_braille_blank: c_int = 16787456;
pub const IBUS_braille_dot_1: c_int = 65521;
pub const IBUS_braille_dot_10: c_int = 65530;
pub const IBUS_braille_dot_2: c_int = 65522;
pub const IBUS_braille_dot_3: c_int = 65523;
pub const IBUS_braille_dot_4: c_int = 65524;
pub const IBUS_braille_dot_5: c_int = 65525;
pub const IBUS_braille_dot_6: c_int = 65526;
pub const IBUS_braille_dot_7: c_int = 65527;
pub const IBUS_braille_dot_8: c_int = 65528;
pub const IBUS_braille_dot_9: c_int = 65529;
pub const IBUS_braille_dots_1: c_int = 16787457;
pub const IBUS_braille_dots_12: c_int = 16787459;
pub const IBUS_braille_dots_123: c_int = 16787463;
pub const IBUS_braille_dots_1234: c_int = 16787471;
pub const IBUS_braille_dots_12345: c_int = 16787487;
pub const IBUS_braille_dots_123456: c_int = 16787519;
pub const IBUS_braille_dots_1234567: c_int = 16787583;
pub const IBUS_braille_dots_12345678: c_int = 16787711;
pub const IBUS_braille_dots_1234568: c_int = 16787647;
pub const IBUS_braille_dots_123457: c_int = 16787551;
pub const IBUS_braille_dots_1234578: c_int = 16787679;
pub const IBUS_braille_dots_123458: c_int = 16787615;
pub const IBUS_braille_dots_12346: c_int = 16787503;
pub const IBUS_braille_dots_123467: c_int = 16787567;
pub const IBUS_braille_dots_1234678: c_int = 16787695;
pub const IBUS_braille_dots_123468: c_int = 16787631;
pub const IBUS_braille_dots_12347: c_int = 16787535;
pub const IBUS_braille_dots_123478: c_int = 16787663;
pub const IBUS_braille_dots_12348: c_int = 16787599;
pub const IBUS_braille_dots_1235: c_int = 16787479;
pub const IBUS_braille_dots_12356: c_int = 16787511;
pub const IBUS_braille_dots_123567: c_int = 16787575;
pub const IBUS_braille_dots_1235678: c_int = 16787703;
pub const IBUS_braille_dots_123568: c_int = 16787639;
pub const IBUS_braille_dots_12357: c_int = 16787543;
pub const IBUS_braille_dots_123578: c_int = 16787671;
pub const IBUS_braille_dots_12358: c_int = 16787607;
pub const IBUS_braille_dots_1236: c_int = 16787495;
pub const IBUS_braille_dots_12367: c_int = 16787559;
pub const IBUS_braille_dots_123678: c_int = 16787687;
pub const IBUS_braille_dots_12368: c_int = 16787623;
pub const IBUS_braille_dots_1237: c_int = 16787527;
pub const IBUS_braille_dots_12378: c_int = 16787655;
pub const IBUS_braille_dots_1238: c_int = 16787591;
pub const IBUS_braille_dots_124: c_int = 16787467;
pub const IBUS_braille_dots_1245: c_int = 16787483;
pub const IBUS_braille_dots_12456: c_int = 16787515;
pub const IBUS_braille_dots_124567: c_int = 16787579;
pub const IBUS_braille_dots_1245678: c_int = 16787707;
pub const IBUS_braille_dots_124568: c_int = 16787643;
pub const IBUS_braille_dots_12457: c_int = 16787547;
pub const IBUS_braille_dots_124578: c_int = 16787675;
pub const IBUS_braille_dots_12458: c_int = 16787611;
pub const IBUS_braille_dots_1246: c_int = 16787499;
pub const IBUS_braille_dots_12467: c_int = 16787563;
pub const IBUS_braille_dots_124678: c_int = 16787691;
pub const IBUS_braille_dots_12468: c_int = 16787627;
pub const IBUS_braille_dots_1247: c_int = 16787531;
pub const IBUS_braille_dots_12478: c_int = 16787659;
pub const IBUS_braille_dots_1248: c_int = 16787595;
pub const IBUS_braille_dots_125: c_int = 16787475;
pub const IBUS_braille_dots_1256: c_int = 16787507;
pub const IBUS_braille_dots_12567: c_int = 16787571;
pub const IBUS_braille_dots_125678: c_int = 16787699;
pub const IBUS_braille_dots_12568: c_int = 16787635;
pub const IBUS_braille_dots_1257: c_int = 16787539;
pub const IBUS_braille_dots_12578: c_int = 16787667;
pub const IBUS_braille_dots_1258: c_int = 16787603;
pub const IBUS_braille_dots_126: c_int = 16787491;
pub const IBUS_braille_dots_1267: c_int = 16787555;
pub const IBUS_braille_dots_12678: c_int = 16787683;
pub const IBUS_braille_dots_1268: c_int = 16787619;
pub const IBUS_braille_dots_127: c_int = 16787523;
pub const IBUS_braille_dots_1278: c_int = 16787651;
pub const IBUS_braille_dots_128: c_int = 16787587;
pub const IBUS_braille_dots_13: c_int = 16787461;
pub const IBUS_braille_dots_134: c_int = 16787469;
pub const IBUS_braille_dots_1345: c_int = 16787485;
pub const IBUS_braille_dots_13456: c_int = 16787517;
pub const IBUS_braille_dots_134567: c_int = 16787581;
pub const IBUS_braille_dots_1345678: c_int = 16787709;
pub const IBUS_braille_dots_134568: c_int = 16787645;
pub const IBUS_braille_dots_13457: c_int = 16787549;
pub const IBUS_braille_dots_134578: c_int = 16787677;
pub const IBUS_braille_dots_13458: c_int = 16787613;
pub const IBUS_braille_dots_1346: c_int = 16787501;
pub const IBUS_braille_dots_13467: c_int = 16787565;
pub const IBUS_braille_dots_134678: c_int = 16787693;
pub const IBUS_braille_dots_13468: c_int = 16787629;
pub const IBUS_braille_dots_1347: c_int = 16787533;
pub const IBUS_braille_dots_13478: c_int = 16787661;
pub const IBUS_braille_dots_1348: c_int = 16787597;
pub const IBUS_braille_dots_135: c_int = 16787477;
pub const IBUS_braille_dots_1356: c_int = 16787509;
pub const IBUS_braille_dots_13567: c_int = 16787573;
pub const IBUS_braille_dots_135678: c_int = 16787701;
pub const IBUS_braille_dots_13568: c_int = 16787637;
pub const IBUS_braille_dots_1357: c_int = 16787541;
pub const IBUS_braille_dots_13578: c_int = 16787669;
pub const IBUS_braille_dots_1358: c_int = 16787605;
pub const IBUS_braille_dots_136: c_int = 16787493;
pub const IBUS_braille_dots_1367: c_int = 16787557;
pub const IBUS_braille_dots_13678: c_int = 16787685;
pub const IBUS_braille_dots_1368: c_int = 16787621;
pub const IBUS_braille_dots_137: c_int = 16787525;
pub const IBUS_braille_dots_1378: c_int = 16787653;
pub const IBUS_braille_dots_138: c_int = 16787589;
pub const IBUS_braille_dots_14: c_int = 16787465;
pub const IBUS_braille_dots_145: c_int = 16787481;
pub const IBUS_braille_dots_1456: c_int = 16787513;
pub const IBUS_braille_dots_14567: c_int = 16787577;
pub const IBUS_braille_dots_145678: c_int = 16787705;
pub const IBUS_braille_dots_14568: c_int = 16787641;
pub const IBUS_braille_dots_1457: c_int = 16787545;
pub const IBUS_braille_dots_14578: c_int = 16787673;
pub const IBUS_braille_dots_1458: c_int = 16787609;
pub const IBUS_braille_dots_146: c_int = 16787497;
pub const IBUS_braille_dots_1467: c_int = 16787561;
pub const IBUS_braille_dots_14678: c_int = 16787689;
pub const IBUS_braille_dots_1468: c_int = 16787625;
pub const IBUS_braille_dots_147: c_int = 16787529;
pub const IBUS_braille_dots_1478: c_int = 16787657;
pub const IBUS_braille_dots_148: c_int = 16787593;
pub const IBUS_braille_dots_15: c_int = 16787473;
pub const IBUS_braille_dots_156: c_int = 16787505;
pub const IBUS_braille_dots_1567: c_int = 16787569;
pub const IBUS_braille_dots_15678: c_int = 16787697;
pub const IBUS_braille_dots_1568: c_int = 16787633;
pub const IBUS_braille_dots_157: c_int = 16787537;
pub const IBUS_braille_dots_1578: c_int = 16787665;
pub const IBUS_braille_dots_158: c_int = 16787601;
pub const IBUS_braille_dots_16: c_int = 16787489;
pub const IBUS_braille_dots_167: c_int = 16787553;
pub const IBUS_braille_dots_1678: c_int = 16787681;
pub const IBUS_braille_dots_168: c_int = 16787617;
pub const IBUS_braille_dots_17: c_int = 16787521;
pub const IBUS_braille_dots_178: c_int = 16787649;
pub const IBUS_braille_dots_18: c_int = 16787585;
pub const IBUS_braille_dots_2: c_int = 16787458;
pub const IBUS_braille_dots_23: c_int = 16787462;
pub const IBUS_braille_dots_234: c_int = 16787470;
pub const IBUS_braille_dots_2345: c_int = 16787486;
pub const IBUS_braille_dots_23456: c_int = 16787518;
pub const IBUS_braille_dots_234567: c_int = 16787582;
pub const IBUS_braille_dots_2345678: c_int = 16787710;
pub const IBUS_braille_dots_234568: c_int = 16787646;
pub const IBUS_braille_dots_23457: c_int = 16787550;
pub const IBUS_braille_dots_234578: c_int = 16787678;
pub const IBUS_braille_dots_23458: c_int = 16787614;
pub const IBUS_braille_dots_2346: c_int = 16787502;
pub const IBUS_braille_dots_23467: c_int = 16787566;
pub const IBUS_braille_dots_234678: c_int = 16787694;
pub const IBUS_braille_dots_23468: c_int = 16787630;
pub const IBUS_braille_dots_2347: c_int = 16787534;
pub const IBUS_braille_dots_23478: c_int = 16787662;
pub const IBUS_braille_dots_2348: c_int = 16787598;
pub const IBUS_braille_dots_235: c_int = 16787478;
pub const IBUS_braille_dots_2356: c_int = 16787510;
pub const IBUS_braille_dots_23567: c_int = 16787574;
pub const IBUS_braille_dots_235678: c_int = 16787702;
pub const IBUS_braille_dots_23568: c_int = 16787638;
pub const IBUS_braille_dots_2357: c_int = 16787542;
pub const IBUS_braille_dots_23578: c_int = 16787670;
pub const IBUS_braille_dots_2358: c_int = 16787606;
pub const IBUS_braille_dots_236: c_int = 16787494;
pub const IBUS_braille_dots_2367: c_int = 16787558;
pub const IBUS_braille_dots_23678: c_int = 16787686;
pub const IBUS_braille_dots_2368: c_int = 16787622;
pub const IBUS_braille_dots_237: c_int = 16787526;
pub const IBUS_braille_dots_2378: c_int = 16787654;
pub const IBUS_braille_dots_238: c_int = 16787590;
pub const IBUS_braille_dots_24: c_int = 16787466;
pub const IBUS_braille_dots_245: c_int = 16787482;
pub const IBUS_braille_dots_2456: c_int = 16787514;
pub const IBUS_braille_dots_24567: c_int = 16787578;
pub const IBUS_braille_dots_245678: c_int = 16787706;
pub const IBUS_braille_dots_24568: c_int = 16787642;
pub const IBUS_braille_dots_2457: c_int = 16787546;
pub const IBUS_braille_dots_24578: c_int = 16787674;
pub const IBUS_braille_dots_2458: c_int = 16787610;
pub const IBUS_braille_dots_246: c_int = 16787498;
pub const IBUS_braille_dots_2467: c_int = 16787562;
pub const IBUS_braille_dots_24678: c_int = 16787690;
pub const IBUS_braille_dots_2468: c_int = 16787626;
pub const IBUS_braille_dots_247: c_int = 16787530;
pub const IBUS_braille_dots_2478: c_int = 16787658;
pub const IBUS_braille_dots_248: c_int = 16787594;
pub const IBUS_braille_dots_25: c_int = 16787474;
pub const IBUS_braille_dots_256: c_int = 16787506;
pub const IBUS_braille_dots_2567: c_int = 16787570;
pub const IBUS_braille_dots_25678: c_int = 16787698;
pub const IBUS_braille_dots_2568: c_int = 16787634;
pub const IBUS_braille_dots_257: c_int = 16787538;
pub const IBUS_braille_dots_2578: c_int = 16787666;
pub const IBUS_braille_dots_258: c_int = 16787602;
pub const IBUS_braille_dots_26: c_int = 16787490;
pub const IBUS_braille_dots_267: c_int = 16787554;
pub const IBUS_braille_dots_2678: c_int = 16787682;
pub const IBUS_braille_dots_268: c_int = 16787618;
pub const IBUS_braille_dots_27: c_int = 16787522;
pub const IBUS_braille_dots_278: c_int = 16787650;
pub const IBUS_braille_dots_28: c_int = 16787586;
pub const IBUS_braille_dots_3: c_int = 16787460;
pub const IBUS_braille_dots_34: c_int = 16787468;
pub const IBUS_braille_dots_345: c_int = 16787484;
pub const IBUS_braille_dots_3456: c_int = 16787516;
pub const IBUS_braille_dots_34567: c_int = 16787580;
pub const IBUS_braille_dots_345678: c_int = 16787708;
pub const IBUS_braille_dots_34568: c_int = 16787644;
pub const IBUS_braille_dots_3457: c_int = 16787548;
pub const IBUS_braille_dots_34578: c_int = 16787676;
pub const IBUS_braille_dots_3458: c_int = 16787612;
pub const IBUS_braille_dots_346: c_int = 16787500;
pub const IBUS_braille_dots_3467: c_int = 16787564;
pub const IBUS_braille_dots_34678: c_int = 16787692;
pub const IBUS_braille_dots_3468: c_int = 16787628;
pub const IBUS_braille_dots_347: c_int = 16787532;
pub const IBUS_braille_dots_3478: c_int = 16787660;
pub const IBUS_braille_dots_348: c_int = 16787596;
pub const IBUS_braille_dots_35: c_int = 16787476;
pub const IBUS_braille_dots_356: c_int = 16787508;
pub const IBUS_braille_dots_3567: c_int = 16787572;
pub const IBUS_braille_dots_35678: c_int = 16787700;
pub const IBUS_braille_dots_3568: c_int = 16787636;
pub const IBUS_braille_dots_357: c_int = 16787540;
pub const IBUS_braille_dots_3578: c_int = 16787668;
pub const IBUS_braille_dots_358: c_int = 16787604;
pub const IBUS_braille_dots_36: c_int = 16787492;
pub const IBUS_braille_dots_367: c_int = 16787556;
pub const IBUS_braille_dots_3678: c_int = 16787684;
pub const IBUS_braille_dots_368: c_int = 16787620;
pub const IBUS_braille_dots_37: c_int = 16787524;
pub const IBUS_braille_dots_378: c_int = 16787652;
pub const IBUS_braille_dots_38: c_int = 16787588;
pub const IBUS_braille_dots_4: c_int = 16787464;
pub const IBUS_braille_dots_45: c_int = 16787480;
pub const IBUS_braille_dots_456: c_int = 16787512;
pub const IBUS_braille_dots_4567: c_int = 16787576;
pub const IBUS_braille_dots_45678: c_int = 16787704;
pub const IBUS_braille_dots_4568: c_int = 16787640;
pub const IBUS_braille_dots_457: c_int = 16787544;
pub const IBUS_braille_dots_4578: c_int = 16787672;
pub const IBUS_braille_dots_458: c_int = 16787608;
pub const IBUS_braille_dots_46: c_int = 16787496;
pub const IBUS_braille_dots_467: c_int = 16787560;
pub const IBUS_braille_dots_4678: c_int = 16787688;
pub const IBUS_braille_dots_468: c_int = 16787624;
pub const IBUS_braille_dots_47: c_int = 16787528;
pub const IBUS_braille_dots_478: c_int = 16787656;
pub const IBUS_braille_dots_48: c_int = 16787592;
pub const IBUS_braille_dots_5: c_int = 16787472;
pub const IBUS_braille_dots_56: c_int = 16787504;
pub const IBUS_braille_dots_567: c_int = 16787568;
pub const IBUS_braille_dots_5678: c_int = 16787696;
pub const IBUS_braille_dots_568: c_int = 16787632;
pub const IBUS_braille_dots_57: c_int = 16787536;
pub const IBUS_braille_dots_578: c_int = 16787664;
pub const IBUS_braille_dots_58: c_int = 16787600;
pub const IBUS_braille_dots_6: c_int = 16787488;
pub const IBUS_braille_dots_67: c_int = 16787552;
pub const IBUS_braille_dots_678: c_int = 16787680;
pub const IBUS_braille_dots_68: c_int = 16787616;
pub const IBUS_braille_dots_7: c_int = 16787520;
pub const IBUS_braille_dots_78: c_int = 16787648;
pub const IBUS_braille_dots_8: c_int = 16787584;
pub const IBUS_breve: c_int = 418;
pub const IBUS_brokenbar: c_int = 166;
pub const IBUS_c: c_int = 99;
pub const IBUS_cabovedot: c_int = 741;
pub const IBUS_cacute: c_int = 486;
pub const IBUS_careof: c_int = 2744;
pub const IBUS_caret: c_int = 2812;
pub const IBUS_caron: c_int = 439;
pub const IBUS_ccaron: c_int = 488;
pub const IBUS_ccedilla: c_int = 231;
pub const IBUS_ccircumflex: c_int = 742;
pub const IBUS_cedilla: c_int = 184;
pub const IBUS_cent: c_int = 162;
pub const IBUS_checkerboard: c_int = 2529;
pub const IBUS_checkmark: c_int = 2803;
pub const IBUS_circle: c_int = 3023;
pub const IBUS_club: c_int = 2796;
pub const IBUS_colon: c_int = 58;
pub const IBUS_comma: c_int = 44;
pub const IBUS_containsas: c_int = 16785931;
pub const IBUS_copyright: c_int = 169;
pub const IBUS_cr: c_int = 2532;
pub const IBUS_crossinglines: c_int = 2542;
pub const IBUS_cuberoot: c_int = 16785947;
pub const IBUS_currency: c_int = 164;
pub const IBUS_cursor: c_int = 2815;
pub const IBUS_d: c_int = 100;
pub const IBUS_dabovedot: c_int = 16784907;
pub const IBUS_dagger: c_int = 2801;
pub const IBUS_dcaron: c_int = 495;
pub const IBUS_dead_abovecomma: c_int = 65124;
pub const IBUS_dead_abovedot: c_int = 65110;
pub const IBUS_dead_abovereversedcomma: c_int = 65125;
pub const IBUS_dead_abovering: c_int = 65112;
pub const IBUS_dead_acute: c_int = 65105;
pub const IBUS_dead_belowbreve: c_int = 65131;
pub const IBUS_dead_belowcircumflex: c_int = 65129;
pub const IBUS_dead_belowdiaeresis: c_int = 65132;
pub const IBUS_dead_belowdot: c_int = 65120;
pub const IBUS_dead_belowmacron: c_int = 65128;
pub const IBUS_dead_belowring: c_int = 65127;
pub const IBUS_dead_belowtilde: c_int = 65130;
pub const IBUS_dead_breve: c_int = 65109;
pub const IBUS_dead_caron: c_int = 65114;
pub const IBUS_dead_cedilla: c_int = 65115;
pub const IBUS_dead_circumflex: c_int = 65106;
pub const IBUS_dead_dasia: c_int = 65125;
pub const IBUS_dead_diaeresis: c_int = 65111;
pub const IBUS_dead_doubleacute: c_int = 65113;
pub const IBUS_dead_grave: c_int = 65104;
pub const IBUS_dead_hook: c_int = 65121;
pub const IBUS_dead_horn: c_int = 65122;
pub const IBUS_dead_iota: c_int = 65117;
pub const IBUS_dead_macron: c_int = 65108;
pub const IBUS_dead_ogonek: c_int = 65116;
pub const IBUS_dead_perispomeni: c_int = 65107;
pub const IBUS_dead_psili: c_int = 65124;
pub const IBUS_dead_semivoiced_sound: c_int = 65119;
pub const IBUS_dead_stroke: c_int = 65123;
pub const IBUS_dead_tilde: c_int = 65107;
pub const IBUS_dead_voiced_sound: c_int = 65118;
pub const IBUS_decimalpoint: c_int = 2749;
pub const IBUS_degree: c_int = 176;
pub const IBUS_diaeresis: c_int = 168;
pub const IBUS_diamond: c_int = 2797;
pub const IBUS_digitspace: c_int = 2725;
pub const IBUS_dintegral: c_int = 16785964;
pub const IBUS_division: c_int = 247;
pub const IBUS_dollar: c_int = 36;
pub const IBUS_doubbaselinedot: c_int = 2735;
pub const IBUS_doubleacute: c_int = 445;
pub const IBUS_doubledagger: c_int = 2802;
pub const IBUS_doublelowquotemark: c_int = 2814;
pub const IBUS_downarrow: c_int = 2302;
pub const IBUS_downcaret: c_int = 2984;
pub const IBUS_downshoe: c_int = 3030;
pub const IBUS_downstile: c_int = 3012;
pub const IBUS_downtack: c_int = 3010;
pub const IBUS_dstroke: c_int = 496;
pub const IBUS_e: c_int = 101;
pub const IBUS_eabovedot: c_int = 1004;
pub const IBUS_eacute: c_int = 233;
pub const IBUS_ebelowdot: c_int = 16785081;
pub const IBUS_ecaron: c_int = 492;
pub const IBUS_ecircumflex: c_int = 234;
pub const IBUS_ecircumflexacute: c_int = 16785087;
pub const IBUS_ecircumflexbelowdot: c_int = 16785095;
pub const IBUS_ecircumflexgrave: c_int = 16785089;
pub const IBUS_ecircumflexhook: c_int = 16785091;
pub const IBUS_ecircumflextilde: c_int = 16785093;
pub const IBUS_ediaeresis: c_int = 235;
pub const IBUS_egrave: c_int = 232;
pub const IBUS_ehook: c_int = 16785083;
pub const IBUS_eightsubscript: c_int = 16785544;
pub const IBUS_eightsuperior: c_int = 16785528;
pub const IBUS_elementof: c_int = 16785928;
pub const IBUS_ellipsis: c_int = 2734;
pub const IBUS_em3space: c_int = 2723;
pub const IBUS_em4space: c_int = 2724;
pub const IBUS_emacron: c_int = 954;
pub const IBUS_emdash: c_int = 2729;
pub const IBUS_emfilledcircle: c_int = 2782;
pub const IBUS_emfilledrect: c_int = 2783;
pub const IBUS_emopencircle: c_int = 2766;
pub const IBUS_emopenrectangle: c_int = 2767;
pub const IBUS_emptyset: c_int = 16785925;
pub const IBUS_emspace: c_int = 2721;
pub const IBUS_endash: c_int = 2730;
pub const IBUS_enfilledcircbullet: c_int = 2790;
pub const IBUS_enfilledsqbullet: c_int = 2791;
pub const IBUS_eng: c_int = 959;
pub const IBUS_enopencircbullet: c_int = 2784;
pub const IBUS_enopensquarebullet: c_int = 2785;
pub const IBUS_enspace: c_int = 2722;
pub const IBUS_eogonek: c_int = 490;
pub const IBUS_equal: c_int = 61;
pub const IBUS_eth: c_int = 240;
pub const IBUS_etilde: c_int = 16785085;
pub const IBUS_exclam: c_int = 33;
pub const IBUS_exclamdown: c_int = 161;
pub const IBUS_f: c_int = 102;
pub const IBUS_fabovedot: c_int = 16784927;
pub const IBUS_femalesymbol: c_int = 2808;
pub const IBUS_ff: c_int = 2531;
pub const IBUS_figdash: c_int = 2747;
pub const IBUS_filledlefttribullet: c_int = 2780;
pub const IBUS_filledrectbullet: c_int = 2779;
pub const IBUS_filledrighttribullet: c_int = 2781;
pub const IBUS_filledtribulletdown: c_int = 2793;
pub const IBUS_filledtribulletup: c_int = 2792;
pub const IBUS_fiveeighths: c_int = 2757;
pub const IBUS_fivesixths: c_int = 2743;
pub const IBUS_fivesubscript: c_int = 16785541;
pub const IBUS_fivesuperior: c_int = 16785525;
pub const IBUS_fourfifths: c_int = 2741;
pub const IBUS_foursubscript: c_int = 16785540;
pub const IBUS_foursuperior: c_int = 16785524;
pub const IBUS_fourthroot: c_int = 16785948;
pub const IBUS_function: c_int = 2294;
pub const IBUS_g: c_int = 103;
pub const IBUS_gabovedot: c_int = 757;
pub const IBUS_gbreve: c_int = 699;
pub const IBUS_gcaron: c_int = 16777703;
pub const IBUS_gcedilla: c_int = 955;
pub const IBUS_gcircumflex: c_int = 760;
pub const IBUS_grave: c_int = 96;
pub const IBUS_greater: c_int = 62;
pub const IBUS_greaterthanequal: c_int = 2238;
pub const IBUS_guillemotleft: c_int = 171;
pub const IBUS_guillemotright: c_int = 187;
pub const IBUS_h: c_int = 104;
pub const IBUS_hairspace: c_int = 2728;
pub const IBUS_hcircumflex: c_int = 694;
pub const IBUS_heart: c_int = 2798;
pub const IBUS_hebrew_aleph: c_int = 3296;
pub const IBUS_hebrew_ayin: c_int = 3314;
pub const IBUS_hebrew_bet: c_int = 3297;
pub const IBUS_hebrew_beth: c_int = 3297;
pub const IBUS_hebrew_chet: c_int = 3303;
pub const IBUS_hebrew_dalet: c_int = 3299;
pub const IBUS_hebrew_daleth: c_int = 3299;
pub const IBUS_hebrew_doublelowline: c_int = 3295;
pub const IBUS_hebrew_finalkaph: c_int = 3306;
pub const IBUS_hebrew_finalmem: c_int = 3309;
pub const IBUS_hebrew_finalnun: c_int = 3311;
pub const IBUS_hebrew_finalpe: c_int = 3315;
pub const IBUS_hebrew_finalzade: c_int = 3317;
pub const IBUS_hebrew_finalzadi: c_int = 3317;
pub const IBUS_hebrew_gimel: c_int = 3298;
pub const IBUS_hebrew_gimmel: c_int = 3298;
pub const IBUS_hebrew_he: c_int = 3300;
pub const IBUS_hebrew_het: c_int = 3303;
pub const IBUS_hebrew_kaph: c_int = 3307;
pub const IBUS_hebrew_kuf: c_int = 3319;
pub const IBUS_hebrew_lamed: c_int = 3308;
pub const IBUS_hebrew_mem: c_int = 3310;
pub const IBUS_hebrew_nun: c_int = 3312;
pub const IBUS_hebrew_pe: c_int = 3316;
pub const IBUS_hebrew_qoph: c_int = 3319;
pub const IBUS_hebrew_resh: c_int = 3320;
pub const IBUS_hebrew_samech: c_int = 3313;
pub const IBUS_hebrew_samekh: c_int = 3313;
pub const IBUS_hebrew_shin: c_int = 3321;
pub const IBUS_hebrew_taf: c_int = 3322;
pub const IBUS_hebrew_taw: c_int = 3322;
pub const IBUS_hebrew_tet: c_int = 3304;
pub const IBUS_hebrew_teth: c_int = 3304;
pub const IBUS_hebrew_waw: c_int = 3301;
pub const IBUS_hebrew_yod: c_int = 3305;
pub const IBUS_hebrew_zade: c_int = 3318;
pub const IBUS_hebrew_zadi: c_int = 3318;
pub const IBUS_hebrew_zain: c_int = 3302;
pub const IBUS_hebrew_zayin: c_int = 3302;
pub const IBUS_hexagram: c_int = 2778;
pub const IBUS_horizconnector: c_int = 2211;
pub const IBUS_horizlinescan1: c_int = 2543;
pub const IBUS_horizlinescan3: c_int = 2544;
pub const IBUS_horizlinescan5: c_int = 2545;
pub const IBUS_horizlinescan7: c_int = 2546;
pub const IBUS_horizlinescan9: c_int = 2547;
pub const IBUS_hstroke: c_int = 689;
pub const IBUS_ht: c_int = 2530;
pub const IBUS_hyphen: c_int = 173;
pub const IBUS_i: c_int = 105;
pub const IBUS_iacute: c_int = 237;
pub const IBUS_ibelowdot: c_int = 16785099;
pub const IBUS_ibreve: c_int = 16777517;
pub const IBUS_icircumflex: c_int = 238;
pub const IBUS_identical: c_int = 2255;
pub const IBUS_idiaeresis: c_int = 239;
pub const IBUS_idotless: c_int = 697;
pub const IBUS_ifonlyif: c_int = 2253;
pub const IBUS_igrave: c_int = 236;
pub const IBUS_ihook: c_int = 16785097;
pub const IBUS_imacron: c_int = 1007;
pub const IBUS_implies: c_int = 2254;
pub const IBUS_includedin: c_int = 2266;
pub const IBUS_includes: c_int = 2267;
pub const IBUS_infinity: c_int = 2242;
pub const IBUS_integral: c_int = 2239;
pub const IBUS_intersection: c_int = 2268;
pub const IBUS_iogonek: c_int = 999;
pub const IBUS_itilde: c_int = 949;
pub const IBUS_j: c_int = 106;
pub const IBUS_jcircumflex: c_int = 700;
pub const IBUS_jot: c_int = 3018;
pub const IBUS_k: c_int = 107;
pub const IBUS_kana_A: c_int = 1201;
pub const IBUS_kana_CHI: c_int = 1217;
pub const IBUS_kana_E: c_int = 1204;
pub const IBUS_kana_FU: c_int = 1228;
pub const IBUS_kana_HA: c_int = 1226;
pub const IBUS_kana_HE: c_int = 1229;
pub const IBUS_kana_HI: c_int = 1227;
pub const IBUS_kana_HO: c_int = 1230;
pub const IBUS_kana_HU: c_int = 1228;
pub const IBUS_kana_I: c_int = 1202;
pub const IBUS_kana_KA: c_int = 1206;
pub const IBUS_kana_KE: c_int = 1209;
pub const IBUS_kana_KI: c_int = 1207;
pub const IBUS_kana_KO: c_int = 1210;
pub const IBUS_kana_KU: c_int = 1208;
pub const IBUS_kana_MA: c_int = 1231;
pub const IBUS_kana_ME: c_int = 1234;
pub const IBUS_kana_MI: c_int = 1232;
pub const IBUS_kana_MO: c_int = 1235;
pub const IBUS_kana_MU: c_int = 1233;
pub const IBUS_kana_N: c_int = 1245;
pub const IBUS_kana_NA: c_int = 1221;
pub const IBUS_kana_NE: c_int = 1224;
pub const IBUS_kana_NI: c_int = 1222;
pub const IBUS_kana_NO: c_int = 1225;
pub const IBUS_kana_NU: c_int = 1223;
pub const IBUS_kana_O: c_int = 1205;
pub const IBUS_kana_RA: c_int = 1239;
pub const IBUS_kana_RE: c_int = 1242;
pub const IBUS_kana_RI: c_int = 1240;
pub const IBUS_kana_RO: c_int = 1243;
pub const IBUS_kana_RU: c_int = 1241;
pub const IBUS_kana_SA: c_int = 1211;
pub const IBUS_kana_SE: c_int = 1214;
pub const IBUS_kana_SHI: c_int = 1212;
pub const IBUS_kana_SO: c_int = 1215;
pub const IBUS_kana_SU: c_int = 1213;
pub const IBUS_kana_TA: c_int = 1216;
pub const IBUS_kana_TE: c_int = 1219;
pub const IBUS_kana_TI: c_int = 1217;
pub const IBUS_kana_TO: c_int = 1220;
pub const IBUS_kana_TSU: c_int = 1218;
pub const IBUS_kana_TU: c_int = 1218;
pub const IBUS_kana_U: c_int = 1203;
pub const IBUS_kana_WA: c_int = 1244;
pub const IBUS_kana_WO: c_int = 1190;
pub const IBUS_kana_YA: c_int = 1236;
pub const IBUS_kana_YO: c_int = 1238;
pub const IBUS_kana_YU: c_int = 1237;
pub const IBUS_kana_a: c_int = 1191;
pub const IBUS_kana_closingbracket: c_int = 1187;
pub const IBUS_kana_comma: c_int = 1188;
pub const IBUS_kana_conjunctive: c_int = 1189;
pub const IBUS_kana_e: c_int = 1194;
pub const IBUS_kana_fullstop: c_int = 1185;
pub const IBUS_kana_i: c_int = 1192;
pub const IBUS_kana_middledot: c_int = 1189;
pub const IBUS_kana_o: c_int = 1195;
pub const IBUS_kana_openingbracket: c_int = 1186;
pub const IBUS_kana_switch: c_int = 65406;
pub const IBUS_kana_tsu: c_int = 1199;
pub const IBUS_kana_tu: c_int = 1199;
pub const IBUS_kana_u: c_int = 1193;
pub const IBUS_kana_ya: c_int = 1196;
pub const IBUS_kana_yo: c_int = 1198;
pub const IBUS_kana_yu: c_int = 1197;
pub const IBUS_kappa: c_int = 930;
pub const IBUS_kcedilla: c_int = 1011;
pub const IBUS_kra: c_int = 930;
pub const IBUS_l: c_int = 108;
pub const IBUS_lacute: c_int = 485;
pub const IBUS_latincross: c_int = 2777;
pub const IBUS_lbelowdot: c_int = 16784951;
pub const IBUS_lcaron: c_int = 437;
pub const IBUS_lcedilla: c_int = 950;
pub const IBUS_leftanglebracket: c_int = 2748;
pub const IBUS_leftarrow: c_int = 2299;
pub const IBUS_leftcaret: c_int = 2979;
pub const IBUS_leftdoublequotemark: c_int = 2770;
pub const IBUS_leftmiddlecurlybrace: c_int = 2223;
pub const IBUS_leftopentriangle: c_int = 2764;
pub const IBUS_leftpointer: c_int = 2794;
pub const IBUS_leftradical: c_int = 2209;
pub const IBUS_leftshoe: c_int = 3034;
pub const IBUS_leftsinglequotemark: c_int = 2768;
pub const IBUS_leftt: c_int = 2548;
pub const IBUS_lefttack: c_int = 3036;
pub const IBUS_less: c_int = 60;
pub const IBUS_lessthanequal: c_int = 2236;
pub const IBUS_lf: c_int = 2533;
pub const IBUS_logicaland: c_int = 2270;
pub const IBUS_logicalor: c_int = 2271;
pub const IBUS_lowleftcorner: c_int = 2541;
pub const IBUS_lowrightcorner: c_int = 2538;
pub const IBUS_lstroke: c_int = 435;
pub const IBUS_m: c_int = 109;
pub const IBUS_mabovedot: c_int = 16784961;
pub const IBUS_macron: c_int = 175;
pub const IBUS_malesymbol: c_int = 2807;
pub const IBUS_maltesecross: c_int = 2800;
pub const IBUS_marker: c_int = 2751;
pub const IBUS_masculine: c_int = 186;
pub const IBUS_minus: c_int = 45;
pub const IBUS_minutes: c_int = 2774;
pub const IBUS_mu: c_int = 181;
pub const IBUS_multiply: c_int = 215;
pub const IBUS_musicalflat: c_int = 2806;
pub const IBUS_musicalsharp: c_int = 2805;
pub const IBUS_n: c_int = 110;
pub const IBUS_nabla: c_int = 2245;
pub const IBUS_nacute: c_int = 497;
pub const IBUS_ncaron: c_int = 498;
pub const IBUS_ncedilla: c_int = 1009;
pub const IBUS_ninesubscript: c_int = 16785545;
pub const IBUS_ninesuperior: c_int = 16785529;
pub const IBUS_nl: c_int = 2536;
pub const IBUS_nobreakspace: c_int = 160;
pub const IBUS_notapproxeq: c_int = 16785991;
pub const IBUS_notelementof: c_int = 16785929;
pub const IBUS_notequal: c_int = 2237;
pub const IBUS_notidentical: c_int = 16786018;
pub const IBUS_notsign: c_int = 172;
pub const IBUS_ntilde: c_int = 241;
pub const IBUS_numbersign: c_int = 35;
pub const IBUS_numerosign: c_int = 1712;
pub const IBUS_o: c_int = 111;
pub const IBUS_oacute: c_int = 243;
pub const IBUS_obarred: c_int = 16777845;
pub const IBUS_obelowdot: c_int = 16785101;
pub const IBUS_ocaron: c_int = 16777682;
pub const IBUS_ocircumflex: c_int = 244;
pub const IBUS_ocircumflexacute: c_int = 16785105;
pub const IBUS_ocircumflexbelowdot: c_int = 16785113;
pub const IBUS_ocircumflexgrave: c_int = 16785107;
pub const IBUS_ocircumflexhook: c_int = 16785109;
pub const IBUS_ocircumflextilde: c_int = 16785111;
pub const IBUS_odiaeresis: c_int = 246;
pub const IBUS_odoubleacute: c_int = 501;
pub const IBUS_oe: c_int = 5053;
pub const IBUS_ogonek: c_int = 434;
pub const IBUS_ograve: c_int = 242;
pub const IBUS_ohook: c_int = 16785103;
pub const IBUS_ohorn: c_int = 16777633;
pub const IBUS_ohornacute: c_int = 16785115;
pub const IBUS_ohornbelowdot: c_int = 16785123;
pub const IBUS_ohorngrave: c_int = 16785117;
pub const IBUS_ohornhook: c_int = 16785119;
pub const IBUS_ohorntilde: c_int = 16785121;
pub const IBUS_omacron: c_int = 1010;
pub const IBUS_oneeighth: c_int = 2755;
pub const IBUS_onefifth: c_int = 2738;
pub const IBUS_onehalf: c_int = 189;
pub const IBUS_onequarter: c_int = 188;
pub const IBUS_onesixth: c_int = 2742;
pub const IBUS_onesubscript: c_int = 16785537;
pub const IBUS_onesuperior: c_int = 185;
pub const IBUS_onethird: c_int = 2736;
pub const IBUS_ooblique: c_int = 248;
pub const IBUS_openrectbullet: c_int = 2786;
pub const IBUS_openstar: c_int = 2789;
pub const IBUS_opentribulletdown: c_int = 2788;
pub const IBUS_opentribulletup: c_int = 2787;
pub const IBUS_ordfeminine: c_int = 170;
pub const IBUS_oslash: c_int = 248;
pub const IBUS_otilde: c_int = 245;
pub const IBUS_overbar: c_int = 3008;
pub const IBUS_overline: c_int = 1150;
pub const IBUS_p: c_int = 112;
pub const IBUS_pabovedot: c_int = 16784983;
pub const IBUS_paragraph: c_int = 182;
pub const IBUS_parenleft: c_int = 40;
pub const IBUS_parenright: c_int = 41;
pub const IBUS_partdifferential: c_int = 16785922;
pub const IBUS_partialderivative: c_int = 2287;
pub const IBUS_percent: c_int = 37;
pub const IBUS_period: c_int = 46;
pub const IBUS_periodcentered: c_int = 183;
pub const IBUS_phonographcopyright: c_int = 2811;
pub const IBUS_plus: c_int = 43;
pub const IBUS_plusminus: c_int = 177;
pub const IBUS_prescription: c_int = 2772;
pub const IBUS_prolongedsound: c_int = 1200;
pub const IBUS_punctspace: c_int = 2726;
pub const IBUS_q: c_int = 113;
pub const IBUS_quad: c_int = 3020;
pub const IBUS_question: c_int = 63;
pub const IBUS_questiondown: c_int = 191;
pub const IBUS_quotedbl: c_int = 34;
pub const IBUS_quoteleft: c_int = 96;
pub const IBUS_quoteright: c_int = 39;
pub const IBUS_r: c_int = 114;
pub const IBUS_racute: c_int = 480;
pub const IBUS_radical: c_int = 2262;
pub const IBUS_rcaron: c_int = 504;
pub const IBUS_rcedilla: c_int = 947;
pub const IBUS_registered: c_int = 174;
pub const IBUS_rightanglebracket: c_int = 2750;
pub const IBUS_rightarrow: c_int = 2301;
pub const IBUS_rightcaret: c_int = 2982;
pub const IBUS_rightdoublequotemark: c_int = 2771;
pub const IBUS_rightmiddlecurlybrace: c_int = 2224;
pub const IBUS_rightmiddlesummation: c_int = 2231;
pub const IBUS_rightopentriangle: c_int = 2765;
pub const IBUS_rightpointer: c_int = 2795;
pub const IBUS_rightshoe: c_int = 3032;
pub const IBUS_rightsinglequotemark: c_int = 2769;
pub const IBUS_rightt: c_int = 2549;
pub const IBUS_righttack: c_int = 3068;
pub const IBUS_s: c_int = 115;
pub const IBUS_sabovedot: c_int = 16784993;
pub const IBUS_sacute: c_int = 438;
pub const IBUS_scaron: c_int = 441;
pub const IBUS_scedilla: c_int = 442;
pub const IBUS_schwa: c_int = 16777817;
pub const IBUS_scircumflex: c_int = 766;
pub const IBUS_script_switch: c_int = 65406;
pub const IBUS_seconds: c_int = 2775;
pub const IBUS_section: c_int = 167;
pub const IBUS_semicolon: c_int = 59;
pub const IBUS_semivoicedsound: c_int = 1247;
pub const IBUS_seveneighths: c_int = 2758;
pub const IBUS_sevensubscript: c_int = 16785543;
pub const IBUS_sevensuperior: c_int = 16785527;
pub const IBUS_signaturemark: c_int = 2762;
pub const IBUS_signifblank: c_int = 2732;
pub const IBUS_similarequal: c_int = 2249;
pub const IBUS_singlelowquotemark: c_int = 2813;
pub const IBUS_sixsubscript: c_int = 16785542;
pub const IBUS_sixsuperior: c_int = 16785526;
pub const IBUS_slash: c_int = 47;
pub const IBUS_soliddiamond: c_int = 2528;
pub const IBUS_space: c_int = 32;
pub const IBUS_squareroot: c_int = 16785946;
pub const IBUS_ssharp: c_int = 223;
pub const IBUS_sterling: c_int = 163;
pub const IBUS_stricteq: c_int = 16786019;
pub const IBUS_t: c_int = 116;
pub const IBUS_tabovedot: c_int = 16785003;
pub const IBUS_tcaron: c_int = 443;
pub const IBUS_tcedilla: c_int = 510;
pub const IBUS_telephone: c_int = 2809;
pub const IBUS_telephonerecorder: c_int = 2810;
pub const IBUS_therefore: c_int = 2240;
pub const IBUS_thinspace: c_int = 2727;
pub const IBUS_thorn: c_int = 254;
pub const IBUS_threeeighths: c_int = 2756;
pub const IBUS_threefifths: c_int = 2740;
pub const IBUS_threequarters: c_int = 190;
pub const IBUS_threesubscript: c_int = 16785539;
pub const IBUS_threesuperior: c_int = 179;
pub const IBUS_tintegral: c_int = 16785965;
pub const IBUS_topintegral: c_int = 2212;
pub const IBUS_topleftparens: c_int = 2219;
pub const IBUS_topleftradical: c_int = 2210;
pub const IBUS_topleftsqbracket: c_int = 2215;
pub const IBUS_topleftsummation: c_int = 2225;
pub const IBUS_toprightparens: c_int = 2221;
pub const IBUS_toprightsqbracket: c_int = 2217;
pub const IBUS_toprightsummation: c_int = 2229;
pub const IBUS_topt: c_int = 2551;
pub const IBUS_topvertsummationconnector: c_int = 2227;
pub const IBUS_trademark: c_int = 2761;
pub const IBUS_trademarkincircle: c_int = 2763;
pub const IBUS_tslash: c_int = 956;
pub const IBUS_twofifths: c_int = 2739;
pub const IBUS_twosubscript: c_int = 16785538;
pub const IBUS_twosuperior: c_int = 178;
pub const IBUS_twothirds: c_int = 2737;
pub const IBUS_u: c_int = 117;
pub const IBUS_uacute: c_int = 250;
pub const IBUS_ubelowdot: c_int = 16785125;
pub const IBUS_ubreve: c_int = 765;
pub const IBUS_ucircumflex: c_int = 251;
pub const IBUS_udiaeresis: c_int = 252;
pub const IBUS_udoubleacute: c_int = 507;
pub const IBUS_ugrave: c_int = 249;
pub const IBUS_uhook: c_int = 16785127;
pub const IBUS_uhorn: c_int = 16777648;
pub const IBUS_uhornacute: c_int = 16785129;
pub const IBUS_uhornbelowdot: c_int = 16785137;
pub const IBUS_uhorngrave: c_int = 16785131;
pub const IBUS_uhornhook: c_int = 16785133;
pub const IBUS_uhorntilde: c_int = 16785135;
pub const IBUS_umacron: c_int = 1022;
pub const IBUS_underbar: c_int = 3014;
pub const IBUS_underscore: c_int = 95;
pub const IBUS_union: c_int = 2269;
pub const IBUS_uogonek: c_int = 1017;
pub const IBUS_uparrow: c_int = 2300;
pub const IBUS_upcaret: c_int = 2985;
pub const IBUS_upleftcorner: c_int = 2540;
pub const IBUS_uprightcorner: c_int = 2539;
pub const IBUS_upshoe: c_int = 3011;
pub const IBUS_upstile: c_int = 3027;
pub const IBUS_uptack: c_int = 3022;
pub const IBUS_uring: c_int = 505;
pub const IBUS_utilde: c_int = 1021;
pub const IBUS_v: c_int = 118;
pub const IBUS_variation: c_int = 2241;
pub const IBUS_vertbar: c_int = 2552;
pub const IBUS_vertconnector: c_int = 2214;
pub const IBUS_voicedsound: c_int = 1246;
pub const IBUS_vt: c_int = 2537;
pub const IBUS_w: c_int = 119;
pub const IBUS_wacute: c_int = 16785027;
pub const IBUS_wcircumflex: c_int = 16777589;
pub const IBUS_wdiaeresis: c_int = 16785029;
pub const IBUS_wgrave: c_int = 16785025;
pub const IBUS_x: c_int = 120;
pub const IBUS_xabovedot: c_int = 16785035;
pub const IBUS_y: c_int = 121;
pub const IBUS_yacute: c_int = 253;
pub const IBUS_ybelowdot: c_int = 16785141;
pub const IBUS_ycircumflex: c_int = 16777591;
pub const IBUS_ydiaeresis: c_int = 255;
pub const IBUS_yen: c_int = 165;
pub const IBUS_ygrave: c_int = 16785139;
pub const IBUS_yhook: c_int = 16785143;
pub const IBUS_ytilde: c_int = 16785145;
pub const IBUS_z: c_int = 122;
pub const IBUS_zabovedot: c_int = 447;
pub const IBUS_zacute: c_int = 444;
pub const IBUS_zcaron: c_int = 446;
pub const IBUS_zerosubscript: c_int = 16785536;
pub const IBUS_zerosuperior: c_int = 16785520;
pub const IBUS_zstroke: c_int = 16777654;

// Flags
pub type IBusBusNameFlag = c_uint;
pub const IBUS_BUS_NAME_FLAG_ALLOW_REPLACEMENT: IBusBusNameFlag = 1;
pub const IBUS_BUS_NAME_FLAG_REPLACE_EXISTING: IBusBusNameFlag = 2;
pub const IBUS_BUS_NAME_FLAG_DO_NOT_QUEUE: IBusBusNameFlag = 4;

pub type IBusCapabilite = c_uint;
pub const IBUS_CAP_PREEDIT_TEXT: IBusCapabilite = 1;
pub const IBUS_CAP_AUXILIARY_TEXT: IBusCapabilite = 2;
pub const IBUS_CAP_LOOKUP_TABLE: IBusCapabilite = 4;
pub const IBUS_CAP_FOCUS: IBusCapabilite = 8;
pub const IBUS_CAP_PROPERTY: IBusCapabilite = 16;
pub const IBUS_CAP_SURROUNDING_TEXT: IBusCapabilite = 32;
pub const IBUS_CAP_OSK: IBusCapabilite = 64;
pub const IBUS_CAP_SYNC_PROCESS_KEY: IBusCapabilite = 128;

pub type IBusInputHints = c_uint;
pub const IBUS_INPUT_HINT_NONE: IBusInputHints = 0;
pub const IBUS_INPUT_HINT_SPELLCHECK: IBusInputHints = 1;
pub const IBUS_INPUT_HINT_NO_SPELLCHECK: IBusInputHints = 2;
pub const IBUS_INPUT_HINT_WORD_COMPLETION: IBusInputHints = 4;
pub const IBUS_INPUT_HINT_LOWERCASE: IBusInputHints = 8;
pub const IBUS_INPUT_HINT_UPPERCASE_CHARS: IBusInputHints = 16;
pub const IBUS_INPUT_HINT_UPPERCASE_WORDS: IBusInputHints = 32;
pub const IBUS_INPUT_HINT_UPPERCASE_SENTENCES: IBusInputHints = 64;
pub const IBUS_INPUT_HINT_INHIBIT_OSK: IBusInputHints = 128;
pub const IBUS_INPUT_HINT_VERTICAL_WRITING: IBusInputHints = 256;
pub const IBUS_INPUT_HINT_EMOJI: IBusInputHints = 512;
pub const IBUS_INPUT_HINT_NO_EMOJI: IBusInputHints = 1024;
pub const IBUS_INPUT_HINT_PRIVATE: IBusInputHints = 2048;

pub type IBusModifierType = c_uint;
pub const IBUS_SHIFT_MASK: IBusModifierType = 1;
pub const IBUS_LOCK_MASK: IBusModifierType = 2;
pub const IBUS_CONTROL_MASK: IBusModifierType = 4;
pub const IBUS_MOD1_MASK: IBusModifierType = 8;
pub const IBUS_MOD2_MASK: IBusModifierType = 16;
pub const IBUS_MOD3_MASK: IBusModifierType = 32;
pub const IBUS_MOD4_MASK: IBusModifierType = 64;
pub const IBUS_MOD5_MASK: IBusModifierType = 128;
pub const IBUS_BUTTON1_MASK: IBusModifierType = 256;
pub const IBUS_BUTTON2_MASK: IBusModifierType = 512;
pub const IBUS_BUTTON3_MASK: IBusModifierType = 1024;
pub const IBUS_BUTTON4_MASK: IBusModifierType = 2048;
pub const IBUS_BUTTON5_MASK: IBusModifierType = 4096;
pub const IBUS_HANDLED_MASK: IBusModifierType = 16777216;
pub const IBUS_FORWARD_MASK: IBusModifierType = 33554432;
pub const IBUS_IGNORED_MASK: IBusModifierType = 33554432;
pub const IBUS_SUPER_MASK: IBusModifierType = 67108864;
pub const IBUS_HYPER_MASK: IBusModifierType = 134217728;
pub const IBUS_META_MASK: IBusModifierType = 268435456;
pub const IBUS_RELEASE_MASK: IBusModifierType = 1073741824;
pub const IBUS_MODIFIER_MASK: IBusModifierType = 1593843711;

pub type IBusObjectFlags = c_uint;
pub const IBUS_IN_DESTRUCTION: IBusObjectFlags = 1;
pub const IBUS_DESTROYED: IBusObjectFlags = 2;
pub const IBUS_RESERVED_1: IBusObjectFlags = 4;
pub const IBUS_RESERVED_2: IBusObjectFlags = 8;

// Callbacks
pub type IBusFreeFunc = Option<unsafe extern "C" fn(gpointer)>;
pub type IBusObjectDestroyFunc = Option<unsafe extern "C" fn(*mut IBusObject)>;
pub type IBusSerializableCopyFunc = Option<unsafe extern "C" fn(*mut IBusSerializable, *const IBusSerializable) -> gboolean>;
pub type IBusSerializableDeserializeFunc = Option<unsafe extern "C" fn(*mut IBusSerializable, *mut glib::GVariant) -> c_int>;
pub type IBusSerializableSerializeFunc = Option<unsafe extern "C" fn(*mut IBusSerializable, *mut glib::GVariantBuilder) -> gboolean>;
pub type IBusUnicodeDataLoadAsyncFinish = Option<unsafe extern "C" fn(*mut glib::GSList, gpointer)>;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusAttrListClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusAttrListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusAttrListClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusAttributeClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusAttributeClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusAttributeClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusBusClass {
    pub parent: IBusObjectClass,
}

impl ::std::fmt::Debug for IBusBusClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusBusClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusBusPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusBusPrivate = *mut _IBusBusPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusComponentClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusComponentClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusComponentClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusComponentPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusComponentPrivate = *mut _IBusComponentPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusConfigClass {
    pub parent: IBusProxyClass,
}

impl ::std::fmt::Debug for IBusConfigClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusConfigClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct _IBusConfigPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusConfigPrivate = *mut _IBusConfigPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusConfigServiceClass {
    pub parent: IBusServiceClass,
    pub set_value: Option<unsafe extern "C" fn(*mut IBusConfigService, *const c_char, *const c_char, *mut glib::GVariant, *mut *mut glib::GError) -> gboolean>,
    pub get_value: Option<unsafe extern "C" fn(*mut IBusConfigService, *const c_char, *const c_char, *mut *mut glib::GError) -> *mut glib::GVariant>,
    pub unset_value: Option<unsafe extern "C" fn(*mut IBusConfigService, *const c_char, *const c_char, *mut *mut glib::GError) -> gboolean>,
    pub get_values: Option<unsafe extern "C" fn(*mut IBusConfigService, *const c_char, *mut *mut glib::GError) -> *mut glib::GVariant>,
    pub pdummy: [gpointer; 12],
}

impl ::std::fmt::Debug for IBusConfigServiceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusConfigServiceClass @ {self:p}"))
         .field("set_value", &self.set_value)
         .field("get_value", &self.get_value)
         .field("unset_value", &self.unset_value)
         .field("get_values", &self.get_values)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusEmojiDataClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusEmojiDataClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusEmojiDataClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusEmojiDataPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusEmojiDataPrivate = *mut _IBusEmojiDataPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusEngineClass {
    pub parent: IBusServiceClass,
    pub process_key_event: Option<unsafe extern "C" fn(*mut IBusEngine, c_uint, c_uint, c_uint) -> gboolean>,
    pub focus_in: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub focus_out: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub reset: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub enable: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub disable: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub set_cursor_location: Option<unsafe extern "C" fn(*mut IBusEngine, c_int, c_int, c_int, c_int)>,
    pub set_capabilities: Option<unsafe extern "C" fn(*mut IBusEngine, c_uint)>,
    pub page_up: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub page_down: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub cursor_up: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub cursor_down: Option<unsafe extern "C" fn(*mut IBusEngine)>,
    pub property_activate: Option<unsafe extern "C" fn(*mut IBusEngine, *const c_char, c_uint)>,
    pub property_show: Option<unsafe extern "C" fn(*mut IBusEngine, *const c_char)>,
    pub property_hide: Option<unsafe extern "C" fn(*mut IBusEngine, *const c_char)>,
    pub candidate_clicked: Option<unsafe extern "C" fn(*mut IBusEngine, c_uint, c_uint, c_uint)>,
    pub set_surrounding_text: Option<unsafe extern "C" fn(*mut IBusEngine, *mut IBusText, c_uint, c_uint)>,
    pub process_hand_writing_event: Option<unsafe extern "C" fn(*mut IBusEngine, *const c_double, c_uint)>,
    pub cancel_hand_writing: Option<unsafe extern "C" fn(*mut IBusEngine, c_uint)>,
    pub set_content_type: Option<unsafe extern "C" fn(*mut IBusEngine, c_uint, c_uint)>,
    pub focus_in_id: Option<unsafe extern "C" fn(*mut IBusEngine, *const c_char, *const c_char)>,
    pub focus_out_id: Option<unsafe extern "C" fn(*mut IBusEngine, *const c_char)>,
    pub pdummy: [gpointer; 2],
}

impl ::std::fmt::Debug for IBusEngineClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusEngineClass @ {self:p}"))
         .field("process_key_event", &self.process_key_event)
         .field("focus_in", &self.focus_in)
         .field("focus_out", &self.focus_out)
         .field("reset", &self.reset)
         .field("enable", &self.enable)
         .field("disable", &self.disable)
         .field("set_cursor_location", &self.set_cursor_location)
         .field("set_capabilities", &self.set_capabilities)
         .field("page_up", &self.page_up)
         .field("page_down", &self.page_down)
         .field("cursor_up", &self.cursor_up)
         .field("cursor_down", &self.cursor_down)
         .field("property_activate", &self.property_activate)
         .field("property_show", &self.property_show)
         .field("property_hide", &self.property_hide)
         .field("candidate_clicked", &self.candidate_clicked)
         .field("set_surrounding_text", &self.set_surrounding_text)
         .field("process_hand_writing_event", &self.process_hand_writing_event)
         .field("cancel_hand_writing", &self.cancel_hand_writing)
         .field("set_content_type", &self.set_content_type)
         .field("focus_in_id", &self.focus_in_id)
         .field("focus_out_id", &self.focus_out_id)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusEngineDescClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusEngineDescClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusEngineDescClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusEngineDescPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusEngineDescPrivate = *mut _IBusEngineDescPrivate;

#[repr(C)]
pub struct _IBusEnginePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusEnginePrivate = *mut _IBusEnginePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusEngineSimpleClass {
    pub parent: IBusEngineClass,
    pub pdummy: [gpointer; 8],
}

impl ::std::fmt::Debug for IBusEngineSimpleClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusEngineSimpleClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct _IBusEngineSimplePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusEngineSimplePrivate = *mut _IBusEngineSimplePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusExtensionEventClass {
    pub parent: IBusSerializableClass,
    pub pdummy: [gpointer; 10],
}

impl ::std::fmt::Debug for IBusExtensionEventClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusExtensionEventClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct _IBusExtensionEventPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusExtensionEventPrivate = *mut _IBusExtensionEventPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusFactoryClass {
    pub parent: IBusServiceClass,
    pub create_engine: Option<unsafe extern "C" fn(*mut IBusFactory, *const c_char) -> *mut IBusEngine>,
    pub pdummy: [gpointer; 7],
}

impl ::std::fmt::Debug for IBusFactoryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusFactoryClass @ {self:p}"))
         .field("create_engine", &self.create_engine)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusFactoryPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusFactoryPrivate = *mut _IBusFactoryPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusHotkeyProfileClass {
    pub parent: IBusSerializableClass,
    pub trigger: Option<unsafe extern "C" fn(*mut IBusHotkeyProfile, glib::GQuark, gpointer)>,
}

impl ::std::fmt::Debug for IBusHotkeyProfileClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusHotkeyProfileClass @ {self:p}"))
         .field("parent", &self.parent)
         .field("trigger", &self.trigger)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusInputContextClass {
    pub parent: IBusProxyClass,
    pub pdummy: [gpointer; 24],
}

impl ::std::fmt::Debug for IBusInputContextClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusInputContextClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusKeymapClass {
    pub parent: IBusObjectClass,
}

impl ::std::fmt::Debug for IBusKeymapClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusKeymapClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusLookupTableClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusLookupTableClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusLookupTableClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusObjectClass {
    pub parent: gobject::GInitiallyUnownedClass,
    pub destroy: Option<unsafe extern "C" fn(*mut IBusObject)>,
    pub pdummy: [gpointer; 7],
}

impl ::std::fmt::Debug for IBusObjectClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusObjectClass @ {self:p}"))
         .field("parent", &self.parent)
         .field("destroy", &self.destroy)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusObjectPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusObjectPrivate = *mut _IBusObjectPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusObservedPathClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusObservedPathClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusObservedPathClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusPanelServiceClass {
    pub parent: IBusServiceClass,
    pub focus_in: Option<unsafe extern "C" fn(*mut IBusPanelService, *const c_char)>,
    pub focus_out: Option<unsafe extern "C" fn(*mut IBusPanelService, *const c_char)>,
    pub register_properties: Option<unsafe extern "C" fn(*mut IBusPanelService, *mut IBusPropList)>,
    pub set_cursor_location: Option<unsafe extern "C" fn(*mut IBusPanelService, c_int, c_int, c_int, c_int)>,
    pub update_auxiliary_text: Option<unsafe extern "C" fn(*mut IBusPanelService, *mut IBusText, gboolean)>,
    pub update_lookup_table: Option<unsafe extern "C" fn(*mut IBusPanelService, *mut IBusLookupTable, gboolean)>,
    pub update_preedit_text: Option<unsafe extern "C" fn(*mut IBusPanelService, *mut IBusText, c_uint, gboolean)>,
    pub update_property: Option<unsafe extern "C" fn(*mut IBusPanelService, *mut IBusProperty)>,
    pub cursor_down_lookup_table: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub cursor_up_lookup_table: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub hide_auxiliary_text: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub hide_language_bar: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub hide_lookup_table: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub hide_preedit_text: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub page_down_lookup_table: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub page_up_lookup_table: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub reset: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub show_auxiliary_text: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub show_language_bar: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub show_lookup_table: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub show_preedit_text: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub start_setup: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub state_changed: Option<unsafe extern "C" fn(*mut IBusPanelService)>,
    pub destroy_context: Option<unsafe extern "C" fn(*mut IBusPanelService, *const c_char)>,
    pub set_content_type: Option<unsafe extern "C" fn(*mut IBusPanelService, c_uint, c_uint)>,
    pub set_cursor_location_relative: Option<unsafe extern "C" fn(*mut IBusPanelService, c_int, c_int, c_int, c_int)>,
    pub panel_extension_received: Option<unsafe extern "C" fn(*mut IBusPanelService, *mut IBusExtensionEvent)>,
    pub process_key_event: Option<unsafe extern "C" fn(*mut IBusPanelService, c_uint, c_uint, c_uint) -> gboolean>,
    pub commit_text_received: Option<unsafe extern "C" fn(*mut IBusPanelService, *mut IBusText)>,
    pub candidate_clicked_lookup_table: Option<unsafe extern "C" fn(*mut IBusPanelService, c_uint, c_uint, c_uint)>,
    pub pdummy: [gpointer; 2],
}

impl ::std::fmt::Debug for IBusPanelServiceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusPanelServiceClass @ {self:p}"))
         .field("parent", &self.parent)
         .field("focus_in", &self.focus_in)
         .field("focus_out", &self.focus_out)
         .field("register_properties", &self.register_properties)
         .field("set_cursor_location", &self.set_cursor_location)
         .field("update_auxiliary_text", &self.update_auxiliary_text)
         .field("update_lookup_table", &self.update_lookup_table)
         .field("update_preedit_text", &self.update_preedit_text)
         .field("update_property", &self.update_property)
         .field("cursor_down_lookup_table", &self.cursor_down_lookup_table)
         .field("cursor_up_lookup_table", &self.cursor_up_lookup_table)
         .field("hide_auxiliary_text", &self.hide_auxiliary_text)
         .field("hide_language_bar", &self.hide_language_bar)
         .field("hide_lookup_table", &self.hide_lookup_table)
         .field("hide_preedit_text", &self.hide_preedit_text)
         .field("page_down_lookup_table", &self.page_down_lookup_table)
         .field("page_up_lookup_table", &self.page_up_lookup_table)
         .field("reset", &self.reset)
         .field("show_auxiliary_text", &self.show_auxiliary_text)
         .field("show_language_bar", &self.show_language_bar)
         .field("show_lookup_table", &self.show_lookup_table)
         .field("show_preedit_text", &self.show_preedit_text)
         .field("start_setup", &self.start_setup)
         .field("state_changed", &self.state_changed)
         .field("destroy_context", &self.destroy_context)
         .field("set_content_type", &self.set_content_type)
         .field("set_cursor_location_relative", &self.set_cursor_location_relative)
         .field("panel_extension_received", &self.panel_extension_received)
         .field("process_key_event", &self.process_key_event)
         .field("commit_text_received", &self.commit_text_received)
         .field("candidate_clicked_lookup_table", &self.candidate_clicked_lookup_table)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusProcessKeyEventData {
    pub keyval: c_uint,
    pub keycode: c_uint,
    pub state: c_uint,
}

impl ::std::fmt::Debug for IBusProcessKeyEventData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusProcessKeyEventData @ {self:p}"))
         .field("keyval", &self.keyval)
         .field("keycode", &self.keycode)
         .field("state", &self.state)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusPropListClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusPropListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusPropListClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusPropertyClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusPropertyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusPropertyClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusPropertyPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusPropertyPrivate = *mut _IBusPropertyPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusProxyClass {
    pub parent: gio::GDBusProxyClass,
    pub destroy: Option<unsafe extern "C" fn(*mut IBusProxy)>,
    pub pdummy: [gpointer; 7],
}

impl ::std::fmt::Debug for IBusProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusProxyClass @ {self:p}"))
         .field("parent", &self.parent)
         .field("destroy", &self.destroy)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusRectangle {
    pub x: c_int,
    pub y: c_int,
    pub width: c_int,
    pub height: c_int,
}

impl ::std::fmt::Debug for IBusRectangle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusRectangle @ {self:p}"))
         .field("x", &self.x)
         .field("y", &self.y)
         .field("width", &self.width)
         .field("height", &self.height)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusRegistryClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusRegistryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusRegistryClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct _IBusRegistryPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusRegistryPrivate = *mut _IBusRegistryPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusSerializableClass {
    pub parent: IBusObjectClass,
    pub serialize: Option<unsafe extern "C" fn(*mut IBusSerializable, *mut glib::GVariantBuilder) -> gboolean>,
    pub deserialize: Option<unsafe extern "C" fn(*mut IBusSerializable, *mut glib::GVariant) -> c_int>,
    pub copy: Option<unsafe extern "C" fn(*mut IBusSerializable, *const IBusSerializable) -> gboolean>,
    pub pdummy: [gpointer; 5],
}

impl ::std::fmt::Debug for IBusSerializableClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusSerializableClass @ {self:p}"))
         .field("serialize", &self.serialize)
         .field("deserialize", &self.deserialize)
         .field("copy", &self.copy)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusSerializablePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusSerializablePrivate = *mut _IBusSerializablePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusServiceClass {
    pub parent: IBusObjectClass,
    pub service_method_call: Option<unsafe extern "C" fn(*mut IBusService, *mut gio::GDBusConnection, *const c_char, *const c_char, *const c_char, *const c_char, *mut glib::GVariant, *mut gio::GDBusMethodInvocation)>,
    pub service_get_property: Option<unsafe extern "C" fn(*mut IBusService, *mut gio::GDBusConnection, *const c_char, *const c_char, *const c_char, *const c_char, *mut *mut glib::GError) -> *mut glib::GVariant>,
    pub service_set_property: Option<unsafe extern "C" fn(*mut IBusService, *mut gio::GDBusConnection, *const c_char, *const c_char, *const c_char, *const c_char, *mut glib::GVariant, *mut *mut glib::GError) -> gboolean>,
    pub interfaces: *mut glib::GArray,
    pub pdummy: [gpointer; 4],
}

impl ::std::fmt::Debug for IBusServiceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusServiceClass @ {self:p}"))
         .field("service_method_call", &self.service_method_call)
         .field("service_get_property", &self.service_get_property)
         .field("service_set_property", &self.service_set_property)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusServicePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusServicePrivate = *mut _IBusServicePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusTextClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusTextClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusTextClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusUnicodeBlockClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusUnicodeBlockClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusUnicodeBlockClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusUnicodeBlockPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusUnicodeBlockPrivate = *mut _IBusUnicodeBlockPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusUnicodeDataClass {
    pub parent: IBusSerializableClass,
}

impl ::std::fmt::Debug for IBusUnicodeDataClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusUnicodeDataClass @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[repr(C)]
pub struct _IBusUnicodeDataPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusUnicodeDataPrivate = *mut _IBusUnicodeDataPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusXEventClass {
    pub parent: IBusSerializableClass,
    pub pdummy: [gpointer; 10],
}

impl ::std::fmt::Debug for IBusXEventClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusXEventClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct _IBusXEventPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type IBusXEventPrivate = *mut _IBusXEventPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusXML {
    pub name: *mut c_char,
    pub text: *mut c_char,
    pub attributes: *mut *mut c_char,
    pub sub_nodes: *mut glib::GList,
}

impl ::std::fmt::Debug for IBusXML {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusXML @ {self:p}"))
         .field("name", &self.name)
         .field("text", &self.text)
         .field("attributes", &self.attributes)
         .field("sub_nodes", &self.sub_nodes)
         .finish()
    }
}

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusAttrList {
    pub parent: IBusSerializable,
    pub attributes: *mut glib::GArray,
}

impl ::std::fmt::Debug for IBusAttrList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusAttrList @ {self:p}"))
         .field("parent", &self.parent)
         .field("attributes", &self.attributes)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusAttribute {
    pub parent: IBusSerializable,
    pub type_: c_uint,
    pub value: c_uint,
    pub start_index: c_uint,
    pub end_index: c_uint,
}

impl ::std::fmt::Debug for IBusAttribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusAttribute @ {self:p}"))
         .field("parent", &self.parent)
         .field("type_", &self.type_)
         .field("value", &self.value)
         .field("start_index", &self.start_index)
         .field("end_index", &self.end_index)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusBus {
    pub parent: IBusObject,
    pub priv_: *mut IBusBusPrivate,
}

impl ::std::fmt::Debug for IBusBus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusBus @ {self:p}"))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusComponent {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusComponentPrivate,
    pub pdummy: [gpointer; 7],
}

impl ::std::fmt::Debug for IBusComponent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusComponent @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusConfig {
    pub parent: IBusProxy,
    pub priv_: *mut IBusConfigPrivate,
}

impl ::std::fmt::Debug for IBusConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusConfig @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusConfigService {
    pub parent: IBusService,
}

impl ::std::fmt::Debug for IBusConfigService {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusConfigService @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusEmojiData {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusEmojiDataPrivate,
}

impl ::std::fmt::Debug for IBusEmojiData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusEmojiData @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusEngine {
    pub parent: IBusService,
    pub priv_: *mut IBusEnginePrivate,
    pub enabled: gboolean,
    pub has_focus: gboolean,
    pub cursor_area: IBusRectangle,
    pub client_capabilities: c_uint,
}

impl ::std::fmt::Debug for IBusEngine {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusEngine @ {self:p}"))
         .field("enabled", &self.enabled)
         .field("has_focus", &self.has_focus)
         .field("cursor_area", &self.cursor_area)
         .field("client_capabilities", &self.client_capabilities)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusEngineDesc {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusEngineDescPrivate,
}

impl ::std::fmt::Debug for IBusEngineDesc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusEngineDesc @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusEngineSimple {
    pub parent: IBusEngine,
    pub priv_: *mut IBusEngineSimplePrivate,
}

impl ::std::fmt::Debug for IBusEngineSimple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusEngineSimple @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusExtensionEvent {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusExtensionEventPrivate,
}

impl ::std::fmt::Debug for IBusExtensionEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusExtensionEvent @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusFactory {
    pub parent: IBusService,
    pub priv_: *mut IBusFactoryPrivate,
}

impl ::std::fmt::Debug for IBusFactory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusFactory @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusHotkeyProfile {
    pub parent: IBusSerializable,
}

impl ::std::fmt::Debug for IBusHotkeyProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusHotkeyProfile @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusInputContext {
    pub parent: IBusProxy,
}

impl ::std::fmt::Debug for IBusInputContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusInputContext @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusKeymap {
    pub parent: IBusObject,
    pub name: *mut c_char,
    pub keymap: [c_uint; 1792],
}

impl ::std::fmt::Debug for IBusKeymap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusKeymap @ {self:p}"))
         .field("name", &self.name)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusLookupTable {
    pub parent: IBusSerializable,
    pub page_size: c_uint,
    pub cursor_pos: c_uint,
    pub cursor_visible: gboolean,
    pub round: gboolean,
    pub orientation: c_int,
    pub candidates: *mut glib::GArray,
    pub labels: *mut glib::GArray,
}

impl ::std::fmt::Debug for IBusLookupTable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusLookupTable @ {self:p}"))
         .field("parent", &self.parent)
         .field("page_size", &self.page_size)
         .field("cursor_pos", &self.cursor_pos)
         .field("cursor_visible", &self.cursor_visible)
         .field("round", &self.round)
         .field("orientation", &self.orientation)
         .field("candidates", &self.candidates)
         .field("labels", &self.labels)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusObject {
    pub parent: gobject::GInitiallyUnowned,
    pub flags: u32,
    pub priv_: *mut IBusObjectPrivate,
}

impl ::std::fmt::Debug for IBusObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusObject @ {self:p}"))
         .field("parent", &self.parent)
         .field("flags", &self.flags)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusObservedPath {
    pub parent: IBusSerializable,
    pub path: *mut c_char,
    pub mtime: c_long,
    pub is_dir: gboolean,
    pub is_exist: gboolean,
}

impl ::std::fmt::Debug for IBusObservedPath {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusObservedPath @ {self:p}"))
         .field("parent", &self.parent)
         .field("path", &self.path)
         .field("mtime", &self.mtime)
         .field("is_dir", &self.is_dir)
         .field("is_exist", &self.is_exist)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusPanelService {
    pub parent: IBusService,
}

impl ::std::fmt::Debug for IBusPanelService {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusPanelService @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusPropList {
    pub parent: IBusSerializable,
    pub properties: *mut glib::GArray,
}

impl ::std::fmt::Debug for IBusPropList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusPropList @ {self:p}"))
         .field("parent", &self.parent)
         .field("properties", &self.properties)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusProperty {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusPropertyPrivate,
    pub pdummy: [gpointer; 7],
}

impl ::std::fmt::Debug for IBusProperty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusProperty @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusProxy {
    pub parent: gio::GDBusProxy,
    pub flags: u32,
    pub own: gboolean,
}

impl ::std::fmt::Debug for IBusProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusProxy @ {self:p}"))
         .field("parent", &self.parent)
         .field("flags", &self.flags)
         .field("own", &self.own)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusRegistry {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusRegistryPrivate,
}

impl ::std::fmt::Debug for IBusRegistry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusRegistry @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusSerializable {
    pub parent: IBusObject,
    pub priv_: *mut IBusSerializablePrivate,
}

impl ::std::fmt::Debug for IBusSerializable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusSerializable @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusService {
    pub parent: IBusObject,
    pub priv_: *mut IBusServicePrivate,
}

impl ::std::fmt::Debug for IBusService {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusService @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusText {
    pub parent: IBusSerializable,
    pub is_static: gboolean,
    pub text: *mut c_char,
    pub attrs: *mut IBusAttrList,
}

impl ::std::fmt::Debug for IBusText {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusText @ {self:p}"))
         .field("parent", &self.parent)
         .field("is_static", &self.is_static)
         .field("text", &self.text)
         .field("attrs", &self.attrs)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusUnicodeBlock {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusUnicodeBlockPrivate,
}

impl ::std::fmt::Debug for IBusUnicodeBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusUnicodeBlock @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusUnicodeData {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusUnicodeDataPrivate,
}

impl ::std::fmt::Debug for IBusUnicodeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusUnicodeData @ {self:p}"))
         .field("parent", &self.parent)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct IBusXEvent {
    pub parent: IBusSerializable,
    pub priv_: *mut IBusXEventPrivate,
    pub event_type: IBusXEventType,
    pub window: c_uint,
    pub send_event: i8,
    pub serial: c_ulong,
}

impl ::std::fmt::Debug for IBusXEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("IBusXEvent @ {self:p}"))
         .field("event_type", &self.event_type)
         .field("window", &self.window)
         .field("send_event", &self.send_event)
         .field("serial", &self.serial)
         .finish()
    }
}

#[link(name = "ibus-1.0")]
extern "C" {

    //=========================================================================
    // IBusAttrType
    //=========================================================================
    pub fn ibus_attr_type_get_type() -> GType;

    //=========================================================================
    // IBusAttrUnderline
    //=========================================================================
    pub fn ibus_attr_underline_get_type() -> GType;
    pub fn ibus_attr_underline_new(underline_type: c_uint, start_index: c_uint, end_index: c_uint) -> *mut IBusAttribute;

    //=========================================================================
    // IBusBusRequestNameReply
    //=========================================================================
    pub fn ibus_bus_request_name_reply_get_type() -> GType;

    //=========================================================================
    // IBusBusStartServiceByNameReply
    //=========================================================================
    pub fn ibus_bus_start_service_by_name_reply_get_type() -> GType;

    //=========================================================================
    // IBusError
    //=========================================================================
    pub fn ibus_error_get_type() -> GType;
    pub fn ibus_error_quark() -> glib::GQuark;

    //=========================================================================
    // IBusInputPurpose
    //=========================================================================
    #[cfg(any(feature = "v1_5_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_5_4")))]
    pub fn ibus_input_purpose_get_type() -> GType;

    //=========================================================================
    // IBusOrientation
    //=========================================================================
    pub fn ibus_orientation_get_type() -> GType;

    //=========================================================================
    // IBusPreeditFocusMode
    //=========================================================================
    pub fn ibus_preedit_focus_mode_get_type() -> GType;

    //=========================================================================
    // IBusPropState
    //=========================================================================
    pub fn ibus_prop_state_get_type() -> GType;

    //=========================================================================
    // IBusPropType
    //=========================================================================
    pub fn ibus_prop_type_get_type() -> GType;

    //=========================================================================
    // IBusXEventType
    //=========================================================================
    pub fn ibus_xevent_type_get_type() -> GType;

    //=========================================================================
    // IBusBusNameFlag
    //=========================================================================
    pub fn ibus_bus_name_flag_get_type() -> GType;

    //=========================================================================
    // IBusCapabilite
    //=========================================================================
    pub fn ibus_capabilite_get_type() -> GType;

    //=========================================================================
    // IBusInputHints
    //=========================================================================
    #[cfg(any(feature = "v1_5_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_5_4")))]
    pub fn ibus_input_hints_get_type() -> GType;

    //=========================================================================
    // IBusModifierType
    //=========================================================================
    pub fn ibus_modifier_type_get_type() -> GType;

    //=========================================================================
    // IBusObjectFlags
    //=========================================================================
    pub fn ibus_object_flags_get_type() -> GType;

    //=========================================================================
    // IBusServiceClass
    //=========================================================================
    pub fn ibus_service_class_add_interfaces(klass: *mut IBusServiceClass, xml_data: *const c_char) -> gboolean;

    //=========================================================================
    // IBusXML
    //=========================================================================
    pub fn ibus_xml_get_type() -> GType;
    pub fn ibus_xml_copy(node: *const IBusXML) -> *mut IBusXML;
    pub fn ibus_xml_free(node: *mut IBusXML);
    pub fn ibus_xml_output(node: *const IBusXML, output: *mut glib::GString);
    pub fn ibus_xml_parse_buffer(buffer: *const c_char) -> *mut IBusXML;
    pub fn ibus_xml_parse_file(name: *const c_char) -> *mut IBusXML;

    //=========================================================================
    // IBusAttrList
    //=========================================================================
    pub fn ibus_attr_list_get_type() -> GType;
    pub fn ibus_attr_list_new() -> *mut IBusAttrList;
    pub fn ibus_attr_list_append(attr_list: *mut IBusAttrList, attr: *mut IBusAttribute);
    pub fn ibus_attr_list_get(attr_list: *mut IBusAttrList, index: c_uint) -> *mut IBusAttribute;

    //=========================================================================
    // IBusAttribute
    //=========================================================================
    pub fn ibus_attribute_get_type() -> GType;
    pub fn ibus_attribute_new(type_: c_uint, value: c_uint, start_index: c_uint, end_index: c_uint) -> *mut IBusAttribute;
    pub fn ibus_attribute_get_attr_type(attr: *mut IBusAttribute) -> c_uint;
    pub fn ibus_attribute_get_end_index(attr: *mut IBusAttribute) -> c_uint;
    pub fn ibus_attribute_get_start_index(attr: *mut IBusAttribute) -> c_uint;
    pub fn ibus_attribute_get_value(attr: *mut IBusAttribute) -> c_uint;

    //=========================================================================
    // IBusBus
    //=========================================================================
    pub fn ibus_bus_get_type() -> GType;
    pub fn ibus_bus_new() -> *mut IBusBus;
    pub fn ibus_bus_new_async() -> *mut IBusBus;
    pub fn ibus_bus_new_async_client() -> *mut IBusBus;
    pub fn ibus_bus_add_match(bus: *mut IBusBus, rule: *const c_char) -> gboolean;
    pub fn ibus_bus_add_match_async(bus: *mut IBusBus, rule: *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_add_match_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_create_input_context(bus: *mut IBusBus, client_name: *const c_char) -> *mut IBusInputContext;
    pub fn ibus_bus_create_input_context_async(bus: *mut IBusBus, client_name: *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_create_input_context_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut IBusInputContext;
    pub fn ibus_bus_current_input_context(bus: *mut IBusBus) -> *mut c_char;
    pub fn ibus_bus_current_input_context_async(bus: *mut IBusBus, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_current_input_context_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn ibus_bus_exit(bus: *mut IBusBus, restart: gboolean) -> gboolean;
    pub fn ibus_bus_exit_async(bus: *mut IBusBus, restart: gboolean, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_exit_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_get_config(bus: *mut IBusBus) -> *mut IBusConfig;
    pub fn ibus_bus_get_connection(bus: *mut IBusBus) -> *mut gio::GDBusConnection;
    pub fn ibus_bus_get_engines_by_names(bus: *mut IBusBus, names: *const *const c_char) -> *mut *mut IBusEngineDesc;
    pub fn ibus_bus_get_global_engine(bus: *mut IBusBus) -> *mut IBusEngineDesc;
    pub fn ibus_bus_get_global_engine_async(bus: *mut IBusBus, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_get_global_engine_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut IBusEngineDesc;
    pub fn ibus_bus_get_ibus_property(bus: *mut IBusBus, property_name: *const c_char) -> *mut glib::GVariant;
    pub fn ibus_bus_get_ibus_property_async(bus: *mut IBusBus, property_name: *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_get_ibus_property_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut glib::GVariant;
    pub fn ibus_bus_get_name_owner(bus: *mut IBusBus, name: *const c_char) -> *mut c_char;
    pub fn ibus_bus_get_name_owner_async(bus: *mut IBusBus, name: *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_get_name_owner_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn ibus_bus_get_service_name(bus: *mut IBusBus) -> *const c_char;
    pub fn ibus_bus_get_use_global_engine(bus: *mut IBusBus) -> gboolean;
    pub fn ibus_bus_get_use_global_engine_async(bus: *mut IBusBus, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_get_use_global_engine_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_get_use_sys_layout(bus: *mut IBusBus) -> gboolean;
    pub fn ibus_bus_get_use_sys_layout_async(bus: *mut IBusBus, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_get_use_sys_layout_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_hello(bus: *mut IBusBus) -> *const c_char;
    pub fn ibus_bus_is_connected(bus: *mut IBusBus) -> gboolean;
    pub fn ibus_bus_is_global_engine_enabled(bus: *mut IBusBus) -> gboolean;
    pub fn ibus_bus_is_global_engine_enabled_async(bus: *mut IBusBus, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_is_global_engine_enabled_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_list_active_engines(bus: *mut IBusBus) -> *mut glib::GList;
    pub fn ibus_bus_list_active_engines_async(bus: *mut IBusBus, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_list_active_engines_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut glib::GList;
    pub fn ibus_bus_list_engines(bus: *mut IBusBus) -> *mut glib::GList;
    pub fn ibus_bus_list_engines_async(bus: *mut IBusBus, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_list_engines_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut glib::GList;
    pub fn ibus_bus_list_names(bus: *mut IBusBus) -> *mut glib::GList;
    pub fn ibus_bus_list_queued_owners(bus: *mut IBusBus, name: *const c_char) -> *mut glib::GList;
    pub fn ibus_bus_name_has_owner(bus: *mut IBusBus, name: *const c_char) -> gboolean;
    pub fn ibus_bus_name_has_owner_async(bus: *mut IBusBus, name: *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_name_has_owner_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_preload_engines(bus: *mut IBusBus, names: *const *const c_char) -> gboolean;
    pub fn ibus_bus_preload_engines_async(bus: *mut IBusBus, names: *const *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_preload_engines_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_register_component(bus: *mut IBusBus, component: *mut IBusComponent) -> gboolean;
    pub fn ibus_bus_register_component_async(bus: *mut IBusBus, component: *mut IBusComponent, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_register_component_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_release_name(bus: *mut IBusBus, name: *const c_char) -> c_uint;
    pub fn ibus_bus_release_name_async(bus: *mut IBusBus, name: *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_release_name_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> c_uint;
    pub fn ibus_bus_remove_match(bus: *mut IBusBus, rule: *const c_char) -> gboolean;
    pub fn ibus_bus_remove_match_async(bus: *mut IBusBus, rule: *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_remove_match_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_request_name(bus: *mut IBusBus, name: *const c_char, flags: u32) -> u32;
    pub fn ibus_bus_request_name_async(bus: *mut IBusBus, name: *const c_char, flags: c_uint, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_request_name_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> c_uint;
    pub fn ibus_bus_set_global_engine(bus: *mut IBusBus, global_engine: *const c_char) -> gboolean;
    pub fn ibus_bus_set_global_engine_async(bus: *mut IBusBus, global_engine: *const c_char, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_set_global_engine_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_set_ibus_property(bus: *mut IBusBus, property_name: *const c_char, value: *mut glib::GVariant);
    pub fn ibus_bus_set_ibus_property_async(bus: *mut IBusBus, property_name: *const c_char, value: *mut glib::GVariant, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_bus_set_ibus_property_async_finish(bus: *mut IBusBus, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_bus_set_watch_dbus_signal(bus: *mut IBusBus, watch: gboolean);
    pub fn ibus_bus_set_watch_ibus_signal(bus: *mut IBusBus, watch: gboolean);

    //=========================================================================
    // IBusComponent
    //=========================================================================
    pub fn ibus_component_get_type() -> GType;
    pub fn ibus_component_new(name: *const c_char, description: *const c_char, version: *const c_char, license: *const c_char, author: *const c_char, homepage: *const c_char, command_line: *const c_char, textdomain: *const c_char) -> *mut IBusComponent;
    pub fn ibus_component_new_from_file(filename: *const c_char) -> *mut IBusComponent;
    pub fn ibus_component_new_from_xml_node(node: *mut IBusXML) -> *mut IBusComponent;
    pub fn ibus_component_new_varargs(first_property_name: *const c_char, ...) -> *mut IBusComponent;
    pub fn ibus_component_add_engine(component: *mut IBusComponent, engine: *mut IBusEngineDesc);
    pub fn ibus_component_add_observed_path(component: *mut IBusComponent, path: *const c_char, access_fs: gboolean);
    pub fn ibus_component_check_modification(component: *mut IBusComponent) -> gboolean;
    pub fn ibus_component_get_author(component: *mut IBusComponent) -> *const c_char;
    pub fn ibus_component_get_description(component: *mut IBusComponent) -> *const c_char;
    pub fn ibus_component_get_engines(component: *mut IBusComponent) -> *mut glib::GList;
    pub fn ibus_component_get_exec(component: *mut IBusComponent) -> *const c_char;
    pub fn ibus_component_get_homepage(component: *mut IBusComponent) -> *const c_char;
    pub fn ibus_component_get_license(component: *mut IBusComponent) -> *const c_char;
    pub fn ibus_component_get_name(component: *mut IBusComponent) -> *const c_char;
    pub fn ibus_component_get_observed_paths(component: *mut IBusComponent) -> *mut glib::GList;
    pub fn ibus_component_get_textdomain(component: *mut IBusComponent) -> *const c_char;
    pub fn ibus_component_get_version(component: *mut IBusComponent) -> *const c_char;
    pub fn ibus_component_output(component: *mut IBusComponent, output: *mut glib::GString, indent: c_int);
    pub fn ibus_component_output_engines(component: *mut IBusComponent, output: *mut glib::GString, indent: c_int);

    //=========================================================================
    // IBusConfig
    //=========================================================================
    pub fn ibus_config_get_type() -> GType;
    pub fn ibus_config_new(connection: *mut gio::GDBusConnection, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut IBusConfig;
    pub fn ibus_config_new_async_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut IBusConfig;
    pub fn ibus_config_new_async(connection: *mut gio::GDBusConnection, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_config_get_value(config: *mut IBusConfig, section: *const c_char, name: *const c_char) -> *mut glib::GVariant;
    pub fn ibus_config_get_value_async(config: *mut IBusConfig, section: *const c_char, name: *const c_char, timeout_ms: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_config_get_value_async_finish(config: *mut IBusConfig, result: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut glib::GVariant;
    pub fn ibus_config_get_values(config: *mut IBusConfig, section: *const c_char) -> *mut glib::GVariant;
    pub fn ibus_config_get_values_async(config: *mut IBusConfig, section: *const c_char, timeout_ms: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_config_get_values_async_finish(config: *mut IBusConfig, result: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut glib::GVariant;
    pub fn ibus_config_set_value(config: *mut IBusConfig, section: *const c_char, name: *const c_char, value: *mut glib::GVariant) -> gboolean;
    pub fn ibus_config_set_value_async(config: *mut IBusConfig, section: *const c_char, name: *const c_char, value: *mut glib::GVariant, timeout_ms: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_config_set_value_async_finish(config: *mut IBusConfig, result: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_config_unset(config: *mut IBusConfig, section: *const c_char, name: *const c_char) -> gboolean;
    pub fn ibus_config_unwatch(config: *mut IBusConfig, section: *const c_char, name: *const c_char) -> gboolean;
    pub fn ibus_config_watch(config: *mut IBusConfig, section: *const c_char, name: *const c_char) -> gboolean;

    //=========================================================================
    // IBusConfigService
    //=========================================================================
    pub fn ibus_config_service_get_type() -> GType;
    pub fn ibus_config_service_new(connection: *mut gio::GDBusConnection) -> *mut IBusConfigService;
    pub fn ibus_config_service_value_changed(config: *mut IBusConfigService, section: *const c_char, name: *const c_char, value: *mut glib::GVariant);

    //=========================================================================
    // IBusEmojiData
    //=========================================================================
    pub fn ibus_emoji_data_get_type() -> GType;
    pub fn ibus_emoji_data_new(first_property_name: *const c_char, ...) -> *mut IBusEmojiData;
    pub fn ibus_emoji_data_load(path: *const c_char) -> *mut glib::GSList;
    pub fn ibus_emoji_data_save(path: *const c_char, list: *mut glib::GSList);
    pub fn ibus_emoji_data_get_annotations(emoji: *mut IBusEmojiData) -> *mut glib::GSList;
    pub fn ibus_emoji_data_get_category(emoji: *mut IBusEmojiData) -> *const c_char;
    pub fn ibus_emoji_data_get_description(emoji: *mut IBusEmojiData) -> *const c_char;
    pub fn ibus_emoji_data_get_emoji(emoji: *mut IBusEmojiData) -> *const c_char;
    pub fn ibus_emoji_data_set_annotations(emoji: *mut IBusEmojiData, annotations: *mut glib::GSList);
    pub fn ibus_emoji_data_set_description(emoji: *mut IBusEmojiData, description: *const c_char);

    //=========================================================================
    // IBusEngine
    //=========================================================================
    pub fn ibus_engine_get_type() -> GType;
    pub fn ibus_engine_new(engine_name: *const c_char, object_path: *const c_char, connection: *mut gio::GDBusConnection) -> *mut IBusEngine;
    pub fn ibus_engine_new_with_type(engine_type: GType, engine_name: *const c_char, object_path: *const c_char, connection: *mut gio::GDBusConnection) -> *mut IBusEngine;
    pub fn ibus_engine_commit_text(engine: *mut IBusEngine, text: *mut IBusText);
    pub fn ibus_engine_delete_surrounding_text(engine: *mut IBusEngine, offset: c_int, nchars: c_uint);
    pub fn ibus_engine_forward_key_event(engine: *mut IBusEngine, keyval: c_uint, keycode: c_uint, state: c_uint);
    pub fn ibus_engine_get_content_type(engine: *mut IBusEngine, purpose: *mut c_uint, hints: *mut c_uint);
    pub fn ibus_engine_get_name(engine: *mut IBusEngine) -> *const c_char;
    pub fn ibus_engine_get_surrounding_text(engine: *mut IBusEngine, text: *mut *mut IBusText, cursor_pos: *mut c_uint, anchor_pos: *mut c_uint);
    pub fn ibus_engine_hide_auxiliary_text(engine: *mut IBusEngine);
    pub fn ibus_engine_hide_lookup_table(engine: *mut IBusEngine);
    pub fn ibus_engine_hide_preedit_text(engine: *mut IBusEngine);
    pub fn ibus_engine_register_properties(engine: *mut IBusEngine, prop_list: *mut IBusPropList);
    pub fn ibus_engine_show_auxiliary_text(engine: *mut IBusEngine);
    pub fn ibus_engine_show_lookup_table(engine: *mut IBusEngine);
    pub fn ibus_engine_show_preedit_text(engine: *mut IBusEngine);
    pub fn ibus_engine_update_auxiliary_text(engine: *mut IBusEngine, text: *mut IBusText, visible: gboolean);
    pub fn ibus_engine_update_lookup_table(engine: *mut IBusEngine, lookup_table: *mut IBusLookupTable, visible: gboolean);
    pub fn ibus_engine_update_lookup_table_fast(engine: *mut IBusEngine, lookup_table: *mut IBusLookupTable, visible: gboolean);
    pub fn ibus_engine_update_preedit_text(engine: *mut IBusEngine, text: *mut IBusText, cursor_pos: c_uint, visible: gboolean);
    pub fn ibus_engine_update_preedit_text_with_mode(engine: *mut IBusEngine, text: *mut IBusText, cursor_pos: c_uint, visible: gboolean, mode: IBusPreeditFocusMode);
    pub fn ibus_engine_update_property(engine: *mut IBusEngine, prop: *mut IBusProperty);

    //=========================================================================
    // IBusEngineDesc
    //=========================================================================
    pub fn ibus_engine_desc_get_type() -> GType;
    pub fn ibus_engine_desc_new(name: *const c_char, longname: *const c_char, description: *const c_char, language: *const c_char, license: *const c_char, author: *const c_char, icon: *const c_char, layout: *const c_char) -> *mut IBusEngineDesc;
    pub fn ibus_engine_desc_new_from_xml_node(node: *mut IBusXML) -> *mut IBusEngineDesc;
    pub fn ibus_engine_desc_new_varargs(first_property_name: *const c_char, ...) -> *mut IBusEngineDesc;
    pub fn ibus_engine_desc_get_author(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_description(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_hotkeys(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_icon(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_icon_prop_key(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_language(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_layout(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_layout_option(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_layout_variant(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_license(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_longname(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_name(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_rank(info: *mut IBusEngineDesc) -> c_uint;
    pub fn ibus_engine_desc_get_setup(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_symbol(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_textdomain(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_get_version(info: *mut IBusEngineDesc) -> *const c_char;
    pub fn ibus_engine_desc_output(info: *mut IBusEngineDesc, output: *mut glib::GString, indent: c_int);

    //=========================================================================
    // IBusEngineSimple
    //=========================================================================
    pub fn ibus_engine_simple_get_type() -> GType;
    pub fn ibus_engine_simple_add_compose_file(simple: *mut IBusEngineSimple, file: *const c_char) -> gboolean;
    pub fn ibus_engine_simple_add_table(simple: *mut IBusEngineSimple, data: *const u16, max_seq_len: c_int, n_seqs: c_int);
    pub fn ibus_engine_simple_add_table_by_locale(simple: *mut IBusEngineSimple, locale: *const c_char) -> gboolean;

    //=========================================================================
    // IBusExtensionEvent
    //=========================================================================
    pub fn ibus_extension_event_get_type() -> GType;
    pub fn ibus_extension_event_new(first_property_name: *const c_char, ...) -> *mut IBusExtensionEvent;
    pub fn ibus_extension_event_get_name(event: *mut IBusExtensionEvent) -> *const c_char;
    pub fn ibus_extension_event_get_params(event: *mut IBusExtensionEvent) -> *const c_char;
    pub fn ibus_extension_event_get_version(event: *mut IBusExtensionEvent) -> c_uint;
    pub fn ibus_extension_event_is_enabled(event: *mut IBusExtensionEvent) -> gboolean;
    pub fn ibus_extension_event_is_extension(event: *mut IBusExtensionEvent) -> gboolean;

    //=========================================================================
    // IBusFactory
    //=========================================================================
    pub fn ibus_factory_get_type() -> GType;
    pub fn ibus_factory_new(connection: *mut gio::GDBusConnection) -> *mut IBusFactory;
    pub fn ibus_factory_add_engine(factory: *mut IBusFactory, engine_name: *const c_char, engine_type: GType);
    pub fn ibus_factory_create_engine(factory: *mut IBusFactory, engine_name: *const c_char) -> *mut IBusEngine;

    //=========================================================================
    // IBusHotkeyProfile
    //=========================================================================
    pub fn ibus_hotkey_profile_get_type() -> GType;
    pub fn ibus_hotkey_profile_new() -> *mut IBusHotkeyProfile;
    pub fn ibus_hotkey_profile_add_hotkey(profile: *mut IBusHotkeyProfile, keyval: c_uint, modifiers: c_uint, event: glib::GQuark) -> gboolean;
    pub fn ibus_hotkey_profile_add_hotkey_from_string(profile: *mut IBusHotkeyProfile, str: *const c_char, event: glib::GQuark) -> gboolean;
    pub fn ibus_hotkey_profile_filter_key_event(profile: *mut IBusHotkeyProfile, keyval: c_uint, modifiers: c_uint, prev_keyval: c_uint, prev_modifiers: c_uint, user_data: gpointer) -> glib::GQuark;
    pub fn ibus_hotkey_profile_lookup_hotkey(profile: *mut IBusHotkeyProfile, keyval: c_uint, modifiers: c_uint) -> glib::GQuark;
    pub fn ibus_hotkey_profile_remove_hotkey(profile: *mut IBusHotkeyProfile, keyval: c_uint, modifiers: c_uint) -> gboolean;
    pub fn ibus_hotkey_profile_remove_hotkey_by_event(profile: *mut IBusHotkeyProfile, event: glib::GQuark) -> gboolean;

    //=========================================================================
    // IBusInputContext
    //=========================================================================
    pub fn ibus_input_context_get_type() -> GType;
    pub fn ibus_input_context_new(path: *const c_char, connection: *mut gio::GDBusConnection, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut IBusInputContext;
    pub fn ibus_input_context_new_async_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut IBusInputContext;
    pub fn ibus_input_context_get_input_context(path: *const c_char, connection: *mut gio::GDBusConnection) -> *mut IBusInputContext;
    pub fn ibus_input_context_get_input_context_async(path: *const c_char, connection: *mut gio::GDBusConnection, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_input_context_get_input_context_async_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut IBusInputContext;
    pub fn ibus_input_context_new_async(path: *const c_char, connection: *mut gio::GDBusConnection, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_input_context_cancel_hand_writing(context: *mut IBusInputContext, n_strokes: c_uint);
    pub fn ibus_input_context_focus_in(context: *mut IBusInputContext);
    pub fn ibus_input_context_focus_out(context: *mut IBusInputContext);
    pub fn ibus_input_context_get_engine(context: *mut IBusInputContext) -> *mut IBusEngineDesc;
    pub fn ibus_input_context_get_engine_async(context: *mut IBusInputContext, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_input_context_get_engine_async_finish(context: *mut IBusInputContext, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut IBusEngineDesc;
    pub fn ibus_input_context_needs_surrounding_text(context: *mut IBusInputContext) -> gboolean;
    pub fn ibus_input_context_process_hand_writing_event(context: *mut IBusInputContext, coordinates: *const c_double, coordinates_len: c_uint);
    pub fn ibus_input_context_process_key_event(context: *mut IBusInputContext, keyval: u32, keycode: u32, state: u32) -> gboolean;
    pub fn ibus_input_context_process_key_event_async(context: *mut IBusInputContext, keyval: u32, keycode: u32, state: u32, timeout_msec: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn ibus_input_context_process_key_event_async_finish(context: *mut IBusInputContext, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_input_context_property_activate(context: *mut IBusInputContext, prop_name: *const c_char, state: u32);
    pub fn ibus_input_context_reset(context: *mut IBusInputContext);
    pub fn ibus_input_context_set_capabilities(context: *mut IBusInputContext, capabilities: u32);
    pub fn ibus_input_context_set_client_commit_preedit(context: *mut IBusInputContext, client_commit: gboolean);
    pub fn ibus_input_context_set_content_type(context: *mut IBusInputContext, purpose: c_uint, hints: c_uint);
    pub fn ibus_input_context_set_cursor_location(context: *mut IBusInputContext, x: i32, y: i32, w: i32, h: i32);
    pub fn ibus_input_context_set_cursor_location_relative(context: *mut IBusInputContext, x: i32, y: i32, w: i32, h: i32);
    pub fn ibus_input_context_set_engine(context: *mut IBusInputContext, name: *const c_char);
    pub fn ibus_input_context_set_surrounding_text(context: *mut IBusInputContext, text: *mut IBusText, cursor_pos: u32, anchor_pos: u32);

    //=========================================================================
    // IBusKeymap
    //=========================================================================
    pub fn ibus_keymap_get_type() -> GType;
    pub fn ibus_keymap_new(name: *const c_char) -> *mut IBusKeymap;
    pub fn ibus_keymap_get(name: *const c_char) -> *mut IBusKeymap;
    pub fn ibus_keymap_lookup_keysym(keymap: *mut IBusKeymap, keycode: u16, state: u32) -> c_uint;

    //=========================================================================
    // IBusLookupTable
    //=========================================================================
    pub fn ibus_lookup_table_get_type() -> GType;
    pub fn ibus_lookup_table_new(page_size: c_uint, cursor_pos: c_uint, cursor_visible: gboolean, round: gboolean) -> *mut IBusLookupTable;
    pub fn ibus_lookup_table_append_candidate(table: *mut IBusLookupTable, text: *mut IBusText);
    pub fn ibus_lookup_table_append_label(table: *mut IBusLookupTable, text: *mut IBusText);
    pub fn ibus_lookup_table_clear(table: *mut IBusLookupTable);
    pub fn ibus_lookup_table_cursor_down(table: *mut IBusLookupTable) -> gboolean;
    pub fn ibus_lookup_table_cursor_up(table: *mut IBusLookupTable) -> gboolean;
    pub fn ibus_lookup_table_get_candidate(table: *mut IBusLookupTable, index: c_uint) -> *mut IBusText;
    pub fn ibus_lookup_table_get_cursor_in_page(table: *mut IBusLookupTable) -> c_uint;
    pub fn ibus_lookup_table_get_cursor_pos(table: *mut IBusLookupTable) -> c_uint;
    pub fn ibus_lookup_table_get_label(table: *mut IBusLookupTable, index: c_uint) -> *mut IBusText;
    pub fn ibus_lookup_table_get_number_of_candidates(table: *mut IBusLookupTable) -> c_uint;
    pub fn ibus_lookup_table_get_orientation(table: *mut IBusLookupTable) -> c_int;
    pub fn ibus_lookup_table_get_page_size(table: *mut IBusLookupTable) -> c_uint;
    pub fn ibus_lookup_table_is_cursor_visible(table: *mut IBusLookupTable) -> gboolean;
    pub fn ibus_lookup_table_is_round(table: *mut IBusLookupTable) -> gboolean;
    pub fn ibus_lookup_table_page_down(table: *mut IBusLookupTable) -> gboolean;
    pub fn ibus_lookup_table_page_up(table: *mut IBusLookupTable) -> gboolean;
    pub fn ibus_lookup_table_set_cursor_pos(table: *mut IBusLookupTable, cursor_pos: c_uint);
    pub fn ibus_lookup_table_set_cursor_visible(table: *mut IBusLookupTable, visible: gboolean);
    pub fn ibus_lookup_table_set_label(table: *mut IBusLookupTable, index: c_uint, text: *mut IBusText);
    pub fn ibus_lookup_table_set_orientation(table: *mut IBusLookupTable, orientation: c_int);
    pub fn ibus_lookup_table_set_page_size(table: *mut IBusLookupTable, page_size: c_uint);
    pub fn ibus_lookup_table_set_round(table: *mut IBusLookupTable, round: gboolean);

    //=========================================================================
    // IBusObject
    //=========================================================================
    pub fn ibus_object_get_type() -> GType;
    pub fn ibus_object_new() -> *mut IBusObject;
    pub fn ibus_object_destroy(object: *mut IBusObject);

    //=========================================================================
    // IBusObservedPath
    //=========================================================================
    pub fn ibus_observed_path_get_type() -> GType;
    pub fn ibus_observed_path_new(path: *const c_char, fill_stat: gboolean) -> *mut IBusObservedPath;
    pub fn ibus_observed_path_new_from_xml_node(node: *mut IBusXML, fill_stat: gboolean) -> *mut IBusObservedPath;
    pub fn ibus_observed_path_check_modification(path: *mut IBusObservedPath) -> gboolean;
    pub fn ibus_observed_path_output(path: *mut IBusObservedPath, output: *mut glib::GString, indent: c_int);
    pub fn ibus_observed_path_traverse(path: *mut IBusObservedPath, dir_only: gboolean) -> *mut glib::GList;

    //=========================================================================
    // IBusPanelService
    //=========================================================================
    pub fn ibus_panel_service_get_type() -> GType;
    pub fn ibus_panel_service_new(connection: *mut gio::GDBusConnection) -> *mut IBusPanelService;
    pub fn ibus_panel_service_candidate_clicked(panel: *mut IBusPanelService, index: c_uint, button: c_uint, state: c_uint);
    pub fn ibus_panel_service_commit_text(panel: *mut IBusPanelService, text: *mut IBusText);
    pub fn ibus_panel_service_cursor_down(panel: *mut IBusPanelService);
    pub fn ibus_panel_service_cursor_up(panel: *mut IBusPanelService);
    pub fn ibus_panel_service_hide_preedit_text_received(panel: *mut IBusPanelService);
    pub fn ibus_panel_service_page_down(panel: *mut IBusPanelService);
    pub fn ibus_panel_service_page_up(panel: *mut IBusPanelService);
    pub fn ibus_panel_service_panel_extension(panel: *mut IBusPanelService, event: *mut IBusExtensionEvent);
    pub fn ibus_panel_service_panel_extension_register_keys(panel: *mut IBusPanelService, first_property_name: *const c_char, ...);
    pub fn ibus_panel_service_property_activate(panel: *mut IBusPanelService, prop_name: *const c_char, prop_state: c_uint);
    pub fn ibus_panel_service_property_hide(panel: *mut IBusPanelService, prop_name: *const c_char);
    pub fn ibus_panel_service_property_show(panel: *mut IBusPanelService, prop_name: *const c_char);
    pub fn ibus_panel_service_show_preedit_text_received(panel: *mut IBusPanelService);
    pub fn ibus_panel_service_update_auxiliary_text_received(panel: *mut IBusPanelService, text: *mut IBusText, visible: gboolean);
    pub fn ibus_panel_service_update_lookup_table_received(panel: *mut IBusPanelService, table: *mut IBusLookupTable, visible: gboolean);
    pub fn ibus_panel_service_update_preedit_text_received(panel: *mut IBusPanelService, text: *mut IBusText, cursor_pos: c_uint, visible: gboolean);

    //=========================================================================
    // IBusPropList
    //=========================================================================
    pub fn ibus_prop_list_get_type() -> GType;
    pub fn ibus_prop_list_new() -> *mut IBusPropList;
    pub fn ibus_prop_list_append(prop_list: *mut IBusPropList, prop: *mut IBusProperty);
    pub fn ibus_prop_list_get(prop_list: *mut IBusPropList, index: c_uint) -> *mut IBusProperty;
    pub fn ibus_prop_list_update_property(prop_list: *mut IBusPropList, prop: *mut IBusProperty) -> gboolean;

    //=========================================================================
    // IBusProperty
    //=========================================================================
    pub fn ibus_property_get_type() -> GType;
    pub fn ibus_property_new(key: *const c_char, type_: IBusPropType, label: *mut IBusText, icon: *const c_char, tooltip: *mut IBusText, sensitive: gboolean, visible: gboolean, state: IBusPropState, prop_list: *mut IBusPropList) -> *mut IBusProperty;
    pub fn ibus_property_new_varargs(first_property_name: *const c_char, ...) -> *mut IBusProperty;
    pub fn ibus_property_get_icon(prop: *mut IBusProperty) -> *const c_char;
    pub fn ibus_property_get_key(prop: *mut IBusProperty) -> *const c_char;
    pub fn ibus_property_get_label(prop: *mut IBusProperty) -> *mut IBusText;
    pub fn ibus_property_get_prop_type(prop: *mut IBusProperty) -> IBusPropType;
    pub fn ibus_property_get_sensitive(prop: *mut IBusProperty) -> gboolean;
    pub fn ibus_property_get_state(prop: *mut IBusProperty) -> IBusPropState;
    pub fn ibus_property_get_sub_props(prop: *mut IBusProperty) -> *mut IBusPropList;
    pub fn ibus_property_get_symbol(prop: *mut IBusProperty) -> *mut IBusText;
    pub fn ibus_property_get_tooltip(prop: *mut IBusProperty) -> *mut IBusText;
    pub fn ibus_property_get_visible(prop: *mut IBusProperty) -> gboolean;
    pub fn ibus_property_set_icon(prop: *mut IBusProperty, icon: *const c_char);
    pub fn ibus_property_set_label(prop: *mut IBusProperty, label: *mut IBusText);
    pub fn ibus_property_set_sensitive(prop: *mut IBusProperty, sensitive: gboolean);
    pub fn ibus_property_set_state(prop: *mut IBusProperty, state: IBusPropState);
    pub fn ibus_property_set_sub_props(prop: *mut IBusProperty, prop_list: *mut IBusPropList);
    pub fn ibus_property_set_symbol(prop: *mut IBusProperty, symbol: *mut IBusText);
    pub fn ibus_property_set_tooltip(prop: *mut IBusProperty, tooltip: *mut IBusText);
    pub fn ibus_property_set_visible(prop: *mut IBusProperty, visible: gboolean);
    pub fn ibus_property_update(prop: *mut IBusProperty, prop_update: *mut IBusProperty) -> gboolean;

    //=========================================================================
    // IBusProxy
    //=========================================================================
    pub fn ibus_proxy_get_type() -> GType;
    pub fn ibus_proxy_destroy(proxy: *mut IBusProxy);

    //=========================================================================
    // IBusRegistry
    //=========================================================================
    pub fn ibus_registry_get_type() -> GType;
    pub fn ibus_registry_new() -> *mut IBusRegistry;
    pub fn ibus_registry_check_modification(registry: *mut IBusRegistry) -> gboolean;
    pub fn ibus_registry_get_components(registry: *mut IBusRegistry) -> *mut glib::GList;
    pub fn ibus_registry_get_observed_paths(registry: *mut IBusRegistry) -> *mut glib::GList;
    pub fn ibus_registry_load(registry: *mut IBusRegistry);
    pub fn ibus_registry_load_cache(registry: *mut IBusRegistry, is_user: gboolean) -> gboolean;
    pub fn ibus_registry_load_cache_file(registry: *mut IBusRegistry, filename: *const c_char) -> gboolean;
    pub fn ibus_registry_load_in_dir(registry: *mut IBusRegistry, dirname: *const c_char);
    pub fn ibus_registry_output(registry: *mut IBusRegistry, output: *mut glib::GString, indent: c_int);
    pub fn ibus_registry_save_cache(registry: *mut IBusRegistry, is_user: gboolean) -> gboolean;
    pub fn ibus_registry_save_cache_file(registry: *mut IBusRegistry, filename: *const c_char) -> gboolean;
    pub fn ibus_registry_start_monitor_changes(registry: *mut IBusRegistry);

    //=========================================================================
    // IBusSerializable
    //=========================================================================
    pub fn ibus_serializable_get_type() -> GType;
    pub fn ibus_serializable_new() -> *mut IBusSerializable;
    pub fn ibus_serializable_deserialize_object(variant: *mut glib::GVariant) -> *mut IBusSerializable;
    pub fn ibus_serializable_copy(serializable: *mut IBusSerializable) -> *mut IBusSerializable;
    pub fn ibus_serializable_get_qattachment(serializable: *mut IBusSerializable, key: glib::GQuark) -> *mut glib::GVariant;
    pub fn ibus_serializable_remove_qattachment(serializable: *mut IBusSerializable, key: glib::GQuark);
    pub fn ibus_serializable_serialize_object(serializable: *mut IBusSerializable) -> *mut glib::GVariant;
    pub fn ibus_serializable_set_qattachment(serializable: *mut IBusSerializable, key: glib::GQuark, value: *mut glib::GVariant);

    //=========================================================================
    // IBusService
    //=========================================================================
    pub fn ibus_service_get_type() -> GType;
    pub fn ibus_service_new(connection: *mut gio::GDBusConnection, path: *const c_char) -> *mut IBusService;
    pub fn ibus_service_emit_signal(service: *mut IBusService, dest_bus_name: *const c_char, interface_name: *const c_char, signal_name: *const c_char, parameters: *mut glib::GVariant, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_service_get_connection(service: *mut IBusService) -> *mut gio::GDBusConnection;
    pub fn ibus_service_get_object_path(service: *mut IBusService) -> *const c_char;
    pub fn ibus_service_register(service: *mut IBusService, connection: *mut gio::GDBusConnection, error: *mut *mut glib::GError) -> gboolean;
    pub fn ibus_service_unregister(service: *mut IBusService, connection: *mut gio::GDBusConnection);

    //=========================================================================
    // IBusText
    //=========================================================================
    pub fn ibus_text_get_type() -> GType;
    pub fn ibus_text_new_from_printf(fmt: *const c_char, ...) -> *mut IBusText;
    pub fn ibus_text_new_from_static_string(str: *const c_char) -> *mut IBusText;
    pub fn ibus_text_new_from_string(str: *const c_char) -> *mut IBusText;
    pub fn ibus_text_new_from_ucs4(str: *const u32) -> *mut IBusText;
    pub fn ibus_text_new_from_unichar(c: u32) -> *mut IBusText;
    pub fn ibus_text_append_attribute(text: *mut IBusText, type_: c_uint, value: c_uint, start_index: c_uint, end_index: c_int);
    pub fn ibus_text_get_attributes(text: *mut IBusText) -> *mut IBusAttrList;
    pub fn ibus_text_get_is_static(text: *mut IBusText) -> gboolean;
    pub fn ibus_text_get_length(text: *mut IBusText) -> c_uint;
    pub fn ibus_text_get_text(text: *mut IBusText) -> *const c_char;
    pub fn ibus_text_set_attributes(text: *mut IBusText, attrs: *mut IBusAttrList);

    //=========================================================================
    // IBusUnicodeBlock
    //=========================================================================
    pub fn ibus_unicode_block_get_type() -> GType;
    pub fn ibus_unicode_block_new(first_property_name: *const c_char, ...) -> *mut IBusUnicodeBlock;
    pub fn ibus_unicode_block_load(path: *const c_char) -> *mut glib::GSList;
    pub fn ibus_unicode_block_save(path: *const c_char, list: *mut glib::GSList);
    pub fn ibus_unicode_block_get_end(block: *mut IBusUnicodeBlock) -> u32;
    pub fn ibus_unicode_block_get_name(block: *mut IBusUnicodeBlock) -> *const c_char;
    pub fn ibus_unicode_block_get_start(block: *mut IBusUnicodeBlock) -> u32;

    //=========================================================================
    // IBusUnicodeData
    //=========================================================================
    pub fn ibus_unicode_data_get_type() -> GType;
    pub fn ibus_unicode_data_new(first_property_name: *const c_char, ...) -> *mut IBusUnicodeData;
    pub fn ibus_unicode_data_load(path: *const c_char, object: *mut gobject::GObject) -> *mut glib::GSList;
    pub fn ibus_unicode_data_load_async(path: *const c_char, object: *mut gobject::GObject, cancellable: *mut gio::GCancellable, callback: IBusUnicodeDataLoadAsyncFinish, user_data: gpointer);
    pub fn ibus_unicode_data_save(path: *const c_char, list: *mut glib::GSList);
    pub fn ibus_unicode_data_get_alias(unicode: *mut IBusUnicodeData) -> *const c_char;
    pub fn ibus_unicode_data_get_block_name(unicode: *mut IBusUnicodeData) -> *const c_char;
    pub fn ibus_unicode_data_get_code(unicode: *mut IBusUnicodeData) -> u32;
    pub fn ibus_unicode_data_get_name(unicode: *mut IBusUnicodeData) -> *const c_char;
    pub fn ibus_unicode_data_set_block_name(unicode: *mut IBusUnicodeData, block_name: *const c_char);

    //=========================================================================
    // IBusXEvent
    //=========================================================================
    pub fn ibus_x_event_get_type() -> GType;
    pub fn ibus_x_event_new(first_property_name: *const c_char, ...) -> *mut IBusXEvent;
    pub fn ibus_x_event_get_event_type(event: *mut IBusXEvent) -> IBusXEventType;
    pub fn ibus_x_event_get_group(event: *mut IBusXEvent) -> u8;
    pub fn ibus_x_event_get_hardware_keycode(event: *mut IBusXEvent) -> u16;
    pub fn ibus_x_event_get_is_modifier(event: *mut IBusXEvent) -> gboolean;
    pub fn ibus_x_event_get_keyval(event: *mut IBusXEvent) -> c_uint;
    pub fn ibus_x_event_get_length(event: *mut IBusXEvent) -> c_int;
    pub fn ibus_x_event_get_purpose(event: *mut IBusXEvent) -> *const c_char;
    pub fn ibus_x_event_get_root(event: *mut IBusXEvent) -> u32;
    pub fn ibus_x_event_get_same_screen(event: *mut IBusXEvent) -> gboolean;
    pub fn ibus_x_event_get_send_event(event: *mut IBusXEvent) -> i8;
    pub fn ibus_x_event_get_serial(event: *mut IBusXEvent) -> c_ulong;
    pub fn ibus_x_event_get_state(event: *mut IBusXEvent) -> c_uint;
    pub fn ibus_x_event_get_string(event: *mut IBusXEvent) -> *const c_char;
    pub fn ibus_x_event_get_subwindow(event: *mut IBusXEvent) -> u32;
    pub fn ibus_x_event_get_time(event: *mut IBusXEvent) -> u32;
    pub fn ibus_x_event_get_version(event: *mut IBusXEvent) -> c_uint;
    pub fn ibus_x_event_get_window(event: *mut IBusXEvent) -> u32;
    pub fn ibus_x_event_get_x(event: *mut IBusXEvent) -> c_int;
    pub fn ibus_x_event_get_x_root(event: *mut IBusXEvent) -> c_int;
    pub fn ibus_x_event_get_y(event: *mut IBusXEvent) -> c_int;
    pub fn ibus_x_event_get_y_root(event: *mut IBusXEvent) -> c_int;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn ibus_accelerator_name(accelerator_key: c_uint, accelerator_mods: IBusModifierType) -> *mut c_char;
    #[cfg(any(feature = "v1_5_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_5_18")))]
    pub fn ibus_accelerator_parse(accelerator: *const c_char, accelerator_key: *mut c_uint, accelerator_mods: *mut IBusModifierType);
    pub fn ibus_accelerator_valid(keyval: c_uint, modifiers: IBusModifierType) -> gboolean;
    pub fn ibus_attr_background_new(color: c_uint, start_index: c_uint, end_index: c_uint) -> *mut IBusAttribute;
    pub fn ibus_attr_foreground_new(color: c_uint, start_index: c_uint, end_index: c_uint) -> *mut IBusAttribute;
    pub fn ibus_emoji_dict_load(path: *const c_char) -> *mut glib::GHashTable;
    pub fn ibus_emoji_dict_lookup(dict: *mut glib::GHashTable, emoji: *const c_char) -> *mut IBusEmojiData;
    pub fn ibus_emoji_dict_save(path: *const c_char, dict: *mut glib::GHashTable);
    pub fn ibus_free_strv(strv: *mut *mut c_char);
    pub fn ibus_get_address() -> *const c_char;
    pub fn ibus_get_daemon_uid() -> c_long;
    pub fn ibus_get_language_name(_locale: *const c_char) -> *mut c_char;
    pub fn ibus_get_local_machine_id() -> *const c_char;
    pub fn ibus_get_socket_path() -> *const c_char;
    pub fn ibus_get_timeout() -> c_int;
    pub fn ibus_get_untranslated_language_name(_locale: *const c_char) -> *mut c_char;
    pub fn ibus_get_user_name() -> *const c_char;
    pub fn ibus_init();
    pub fn ibus_key_event_from_string(string: *const c_char, keyval: *mut c_uint, modifiers: *mut c_uint) -> gboolean;
    pub fn ibus_key_event_to_string(keyval: c_uint, modifiers: c_uint) -> *mut c_char;
    pub fn ibus_keyval_convert_case(symbol: c_uint, lower: *mut c_uint, upper: *mut c_uint);
    pub fn ibus_keyval_from_name(keyval_name: *const c_char) -> c_uint;
    pub fn ibus_keyval_name(keyval: c_uint) -> *const c_char;
    pub fn ibus_keyval_to_lower(keyval: c_uint) -> c_uint;
    pub fn ibus_keyval_to_unicode(keyval: c_uint) -> u32;
    pub fn ibus_keyval_to_upper(keyval: c_uint) -> c_uint;
    pub fn ibus_main();
    pub fn ibus_quit();
    pub fn ibus_set_display(display: *const c_char);
    pub fn ibus_set_log_handler(verbose: gboolean);
    pub fn ibus_unicode_to_keyval(wc: u32) -> c_uint;
    pub fn ibus_unset_log_handler();
    pub fn ibus_write_address(address: *const c_char);

}
