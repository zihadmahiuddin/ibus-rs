// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{ExtensionEvent,LookupTable,Object,PropList,Property,Service,Text};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute};

glib::wrapper! {
    #[doc(alias = "IBusPanelService")]
    pub struct PanelService(Object<ffi::IBusPanelService, ffi::IBusPanelServiceClass>) @extends Service, Object;

    match fn {
        type_ => || ffi::ibus_panel_service_get_type(),
    }
}

impl PanelService {
        pub const NONE: Option<&'static PanelService> = None;
    

    #[doc(alias = "ibus_panel_service_new")]
    pub fn new(connection: &gio::DBusConnection) -> PanelService {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_panel_service_new(connection.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`PanelService`] objects.
            ///
            /// This method returns an instance of [`PanelServiceBuilder`](crate::builders::PanelServiceBuilder) which can be used to create [`PanelService`] objects.
            pub fn builder() -> PanelServiceBuilder {
                PanelServiceBuilder::new()
            }
        
}

impl Default for PanelService {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`PanelService`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct PanelServiceBuilder {
            builder: glib::object::ObjectBuilder<'static, PanelService>,
        }

        impl PanelServiceBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn connection(self, connection: &gio::DBusConnection) -> Self {
                            Self { builder: self.builder.property("connection", connection.clone()), }
                        }

                            pub fn object_path(self, object_path: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("object-path", object_path.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`PanelService`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> PanelService {
    self.builder.build() }
}

pub trait PanelServiceExt: 'static {
    #[doc(alias = "ibus_panel_service_candidate_clicked")]
    fn candidate_clicked(&self, index: u32, button: u32, state: u32);

    #[doc(alias = "ibus_panel_service_commit_text")]
    fn commit_text(&self, text: &impl IsA<Text>);

    #[doc(alias = "ibus_panel_service_cursor_down")]
    fn cursor_down(&self);

    #[doc(alias = "ibus_panel_service_cursor_up")]
    fn cursor_up(&self);

    #[doc(alias = "ibus_panel_service_hide_preedit_text_received")]
    fn hide_preedit_text_received(&self);

    #[doc(alias = "ibus_panel_service_page_down")]
    fn page_down(&self);

    #[doc(alias = "ibus_panel_service_page_up")]
    fn page_up(&self);

    #[doc(alias = "ibus_panel_service_panel_extension")]
    fn panel_extension(&self, event: impl IsA<ExtensionEvent>);

    //#[doc(alias = "ibus_panel_service_panel_extension_register_keys")]
    //fn panel_extension_register_keys(&self, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs);

    #[doc(alias = "ibus_panel_service_property_activate")]
    fn property_activate(&self, prop_name: &str, prop_state: u32);

    #[doc(alias = "ibus_panel_service_property_hide")]
    fn property_hide(&self, prop_name: &str);

    #[doc(alias = "ibus_panel_service_property_show")]
    fn property_show(&self, prop_name: &str);

    #[doc(alias = "ibus_panel_service_show_preedit_text_received")]
    fn show_preedit_text_received(&self);

    #[doc(alias = "ibus_panel_service_update_auxiliary_text_received")]
    fn update_auxiliary_text_received(&self, text: &impl IsA<Text>, visible: bool);

    #[doc(alias = "ibus_panel_service_update_lookup_table_received")]
    fn update_lookup_table_received(&self, table: &impl IsA<LookupTable>, visible: bool);

    #[doc(alias = "ibus_panel_service_update_preedit_text_received")]
    fn update_preedit_text_received(&self, text: &impl IsA<Text>, cursor_pos: u32, visible: bool);

    #[doc(alias = "candidate-clicked-lookup-table")]
    fn connect_candidate_clicked_lookup_table<F: Fn(&Self, u32, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "commit-text-received")]
    fn connect_commit_text_received<F: Fn(&Self, &Text) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-down-lookup-table")]
    fn connect_cursor_down_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-up-lookup-table")]
    fn connect_cursor_up_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "destroy-context")]
    fn connect_destroy_context<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "focus-in")]
    fn connect_focus_in<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "focus-out")]
    fn connect_focus_out<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hide-auxiliary-text")]
    fn connect_hide_auxiliary_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hide-language-bar")]
    fn connect_hide_language_bar<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hide-lookup-table")]
    fn connect_hide_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hide-preedit-text")]
    fn connect_hide_preedit_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "page-down-lookup-table")]
    fn connect_page_down_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "page-up-lookup-table")]
    fn connect_page_up_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "panel-extension-received")]
    fn connect_panel_extension_received<F: Fn(&Self, &ExtensionEvent) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "process-key-event")]
    fn connect_process_key_event<F: Fn(&Self, u32, u32, u32) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "register-properties")]
    fn connect_register_properties<F: Fn(&Self, &PropList) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "reset")]
    fn connect_reset<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "set-content-type")]
    fn connect_set_content_type<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "set-cursor-location")]
    fn connect_set_cursor_location<F: Fn(&Self, i32, i32, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "set-cursor-location-relative")]
    fn connect_set_cursor_location_relative<F: Fn(&Self, i32, i32, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-auxiliary-text")]
    fn connect_show_auxiliary_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-language-bar")]
    fn connect_show_language_bar<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-lookup-table")]
    fn connect_show_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-preedit-text")]
    fn connect_show_preedit_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "start-setup")]
    fn connect_start_setup<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "state-changed")]
    fn connect_state_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-auxiliary-text")]
    fn connect_update_auxiliary_text<F: Fn(&Self, &Text, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-lookup-table")]
    fn connect_update_lookup_table<F: Fn(&Self, &LookupTable, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-preedit-text")]
    fn connect_update_preedit_text<F: Fn(&Self, &Text, u32, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "update-property")]
    fn connect_update_property<F: Fn(&Self, &Property) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<PanelService>> PanelServiceExt for O {
    fn candidate_clicked(&self, index: u32, button: u32, state: u32) {
        unsafe {
            ffi::ibus_panel_service_candidate_clicked(self.as_ref().to_glib_none().0, index, button, state);
        }
    }

    fn commit_text(&self, text: &impl IsA<Text>) {
        unsafe {
            ffi::ibus_panel_service_commit_text(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0);
        }
    }

    fn cursor_down(&self) {
        unsafe {
            ffi::ibus_panel_service_cursor_down(self.as_ref().to_glib_none().0);
        }
    }

    fn cursor_up(&self) {
        unsafe {
            ffi::ibus_panel_service_cursor_up(self.as_ref().to_glib_none().0);
        }
    }

    fn hide_preedit_text_received(&self) {
        unsafe {
            ffi::ibus_panel_service_hide_preedit_text_received(self.as_ref().to_glib_none().0);
        }
    }

    fn page_down(&self) {
        unsafe {
            ffi::ibus_panel_service_page_down(self.as_ref().to_glib_none().0);
        }
    }

    fn page_up(&self) {
        unsafe {
            ffi::ibus_panel_service_page_up(self.as_ref().to_glib_none().0);
        }
    }

    fn panel_extension(&self, event: impl IsA<ExtensionEvent>) {
        unsafe {
            ffi::ibus_panel_service_panel_extension(self.as_ref().to_glib_none().0, event.upcast().into_glib_ptr());
        }
    }

    //fn panel_extension_register_keys(&self, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) {
    //    unsafe { TODO: call ffi:ibus_panel_service_panel_extension_register_keys() }
    //}

    fn property_activate(&self, prop_name: &str, prop_state: u32) {
        unsafe {
            ffi::ibus_panel_service_property_activate(self.as_ref().to_glib_none().0, prop_name.to_glib_none().0, prop_state);
        }
    }

    fn property_hide(&self, prop_name: &str) {
        unsafe {
            ffi::ibus_panel_service_property_hide(self.as_ref().to_glib_none().0, prop_name.to_glib_none().0);
        }
    }

    fn property_show(&self, prop_name: &str) {
        unsafe {
            ffi::ibus_panel_service_property_show(self.as_ref().to_glib_none().0, prop_name.to_glib_none().0);
        }
    }

    fn show_preedit_text_received(&self) {
        unsafe {
            ffi::ibus_panel_service_show_preedit_text_received(self.as_ref().to_glib_none().0);
        }
    }

    fn update_auxiliary_text_received(&self, text: &impl IsA<Text>, visible: bool) {
        unsafe {
            ffi::ibus_panel_service_update_auxiliary_text_received(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0, visible.into_glib());
        }
    }

    fn update_lookup_table_received(&self, table: &impl IsA<LookupTable>, visible: bool) {
        unsafe {
            ffi::ibus_panel_service_update_lookup_table_received(self.as_ref().to_glib_none().0, table.as_ref().to_glib_none().0, visible.into_glib());
        }
    }

    fn update_preedit_text_received(&self, text: &impl IsA<Text>, cursor_pos: u32, visible: bool) {
        unsafe {
            ffi::ibus_panel_service_update_preedit_text_received(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0, cursor_pos, visible.into_glib());
        }
    }

    fn connect_candidate_clicked_lookup_table<F: Fn(&Self, u32, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn candidate_clicked_lookup_table_trampoline<P: IsA<PanelService>, F: Fn(&P, u32, u32, u32) + 'static>(this: *mut ffi::IBusPanelService, object: libc::c_uint, p0: libc::c_uint, p1: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), object, p0, p1)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"candidate-clicked-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(candidate_clicked_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_commit_text_received<F: Fn(&Self, &Text) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn commit_text_received_trampoline<P: IsA<PanelService>, F: Fn(&P, &Text) + 'static>(this: *mut ffi::IBusPanelService, text: *mut ffi::IBusText, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(text))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"commit-text-received\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(commit_text_received_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cursor_down_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_down_lookup_table_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cursor-down-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cursor_down_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cursor_up_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_up_lookup_table_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cursor-up-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cursor_up_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_destroy_context<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn destroy_context_trampoline<P: IsA<PanelService>, F: Fn(&P, &str) + 'static>(this: *mut ffi::IBusPanelService, input_context_path: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(input_context_path))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"destroy-context\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(destroy_context_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_focus_in<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn focus_in_trampoline<P: IsA<PanelService>, F: Fn(&P, &str) + 'static>(this: *mut ffi::IBusPanelService, input_context_path: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(input_context_path))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"focus-in\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(focus_in_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_focus_out<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn focus_out_trampoline<P: IsA<PanelService>, F: Fn(&P, &str) + 'static>(this: *mut ffi::IBusPanelService, input_context_path: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(input_context_path))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"focus-out\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(focus_out_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_hide_auxiliary_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_auxiliary_text_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide-auxiliary-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hide_auxiliary_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_hide_language_bar<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_language_bar_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide-language-bar\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hide_language_bar_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_hide_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_lookup_table_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hide_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_hide_preedit_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_preedit_text_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide-preedit-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hide_preedit_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_page_down_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn page_down_lookup_table_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"page-down-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(page_down_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_page_up_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn page_up_lookup_table_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"page-up-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(page_up_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_panel_extension_received<F: Fn(&Self, &ExtensionEvent) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn panel_extension_received_trampoline<P: IsA<PanelService>, F: Fn(&P, &ExtensionEvent) + 'static>(this: *mut ffi::IBusPanelService, data: *mut ffi::IBusExtensionEvent, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(data))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"panel-extension-received\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(panel_extension_received_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_process_key_event<F: Fn(&Self, u32, u32, u32) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn process_key_event_trampoline<P: IsA<PanelService>, F: Fn(&P, u32, u32, u32) -> bool + 'static>(this: *mut ffi::IBusPanelService, keyval: libc::c_uint, keycode: libc::c_uint, state: libc::c_uint, f: glib::ffi::gpointer) -> glib::ffi::gboolean {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), keyval, keycode, state).into_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"process-key-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(process_key_event_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_register_properties<F: Fn(&Self, &PropList) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn register_properties_trampoline<P: IsA<PanelService>, F: Fn(&P, &PropList) + 'static>(this: *mut ffi::IBusPanelService, prop_list: *mut ffi::IBusPropList, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(prop_list))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"register-properties\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(register_properties_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_reset<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn reset_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"reset\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(reset_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_set_content_type<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn set_content_type_trampoline<P: IsA<PanelService>, F: Fn(&P, u32, u32) + 'static>(this: *mut ffi::IBusPanelService, purpose: libc::c_uint, hints: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), purpose, hints)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"set-content-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(set_content_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_set_cursor_location<F: Fn(&Self, i32, i32, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn set_cursor_location_trampoline<P: IsA<PanelService>, F: Fn(&P, i32, i32, i32, i32) + 'static>(this: *mut ffi::IBusPanelService, x: libc::c_int, y: libc::c_int, w: libc::c_int, h: libc::c_int, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), x, y, w, h)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"set-cursor-location\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(set_cursor_location_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_set_cursor_location_relative<F: Fn(&Self, i32, i32, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn set_cursor_location_relative_trampoline<P: IsA<PanelService>, F: Fn(&P, i32, i32, i32, i32) + 'static>(this: *mut ffi::IBusPanelService, x: libc::c_int, y: libc::c_int, w: libc::c_int, h: libc::c_int, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), x, y, w, h)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"set-cursor-location-relative\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(set_cursor_location_relative_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_show_auxiliary_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_auxiliary_text_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-auxiliary-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_auxiliary_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_show_language_bar<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_language_bar_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-language-bar\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_language_bar_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_show_lookup_table<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_lookup_table_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_show_preedit_text<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_preedit_text_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-preedit-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_preedit_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_start_setup<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn start_setup_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"start-setup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(start_setup_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_state_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn state_changed_trampoline<P: IsA<PanelService>, F: Fn(&P) + 'static>(this: *mut ffi::IBusPanelService, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"state-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(state_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_auxiliary_text<F: Fn(&Self, &Text, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_auxiliary_text_trampoline<P: IsA<PanelService>, F: Fn(&P, &Text, bool) + 'static>(this: *mut ffi::IBusPanelService, text: *mut ffi::IBusText, visible: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(text), from_glib(visible))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-auxiliary-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_auxiliary_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_lookup_table<F: Fn(&Self, &LookupTable, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_lookup_table_trampoline<P: IsA<PanelService>, F: Fn(&P, &LookupTable, bool) + 'static>(this: *mut ffi::IBusPanelService, lookup_table: *mut ffi::IBusLookupTable, visible: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(lookup_table), from_glib(visible))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-lookup-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_lookup_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_preedit_text<F: Fn(&Self, &Text, u32, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_preedit_text_trampoline<P: IsA<PanelService>, F: Fn(&P, &Text, u32, bool) + 'static>(this: *mut ffi::IBusPanelService, text: *mut ffi::IBusText, cursor_pos: libc::c_uint, visible: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(text), cursor_pos, from_glib(visible))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-preedit-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_preedit_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_update_property<F: Fn(&Self, &Property) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn update_property_trampoline<P: IsA<PanelService>, F: Fn(&P, &Property) + 'static>(this: *mut ffi::IBusPanelService, prop: *mut ffi::IBusProperty, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PanelService::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(prop))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"update-property\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(update_property_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for PanelService {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("PanelService")
    }
}
