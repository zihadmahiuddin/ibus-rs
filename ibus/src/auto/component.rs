// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{EngineDesc,Object,ObservedPath,Serializable,XML};
use glib::{prelude::*,translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "IBusComponent")]
    pub struct Component(Object<ffi::IBusComponent, ffi::IBusComponentClass>) @extends Serializable, Object;

    match fn {
        type_ => || ffi::ibus_component_get_type(),
    }
}

impl Component {
        pub const NONE: Option<&'static Component> = None;
    

    #[doc(alias = "ibus_component_new")]
    pub fn new(name: &str, description: &str, version: &str, license: &str, author: &str, homepage: &str, command_line: &str, textdomain: &str) -> Component {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_component_new(name.to_glib_none().0, description.to_glib_none().0, version.to_glib_none().0, license.to_glib_none().0, author.to_glib_none().0, homepage.to_glib_none().0, command_line.to_glib_none().0, textdomain.to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_component_new_from_file")]
    #[doc(alias = "new_from_file")]
    pub fn from_file(filename: &str) -> Component {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_component_new_from_file(filename.to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_component_new_from_xml_node")]
    #[doc(alias = "new_from_xml_node")]
    pub fn from_xml_node(node: &mut XML) -> Component {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_component_new_from_xml_node(node.to_glib_none_mut().0))
        }
    }

    //#[doc(alias = "ibus_component_new_varargs")]
    //pub fn new_varargs(first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) -> Component {
    //    unsafe { TODO: call ffi:ibus_component_new_varargs() }
    //}

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Component`] objects.
            ///
            /// This method returns an instance of [`ComponentBuilder`](crate::builders::ComponentBuilder) which can be used to create [`Component`] objects.
            pub fn builder() -> ComponentBuilder {
                ComponentBuilder::new()
            }
        
}

impl Default for Component {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Component`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ComponentBuilder {
            builder: glib::object::ObjectBuilder<'static, Component>,
        }

        impl ComponentBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn author(self, author: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("author", author.into()), }
                        }

                            pub fn command_line(self, command_line: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("command-line", command_line.into()), }
                        }

                            pub fn description(self, description: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("description", description.into()), }
                        }

                            pub fn homepage(self, homepage: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("homepage", homepage.into()), }
                        }

                            pub fn license(self, license: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("license", license.into()), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn textdomain(self, textdomain: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("textdomain", textdomain.into()), }
                        }

                            pub fn version(self, version: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("version", version.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Component`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Component {
    self.builder.build() }
}

pub trait ComponentExt: 'static {
    #[doc(alias = "ibus_component_add_engine")]
    fn add_engine(&self, engine: &impl IsA<EngineDesc>);

    #[doc(alias = "ibus_component_add_observed_path")]
    fn add_observed_path(&self, path: &str, access_fs: bool);

    #[doc(alias = "ibus_component_check_modification")]
    fn check_modification(&self) -> bool;

    #[doc(alias = "ibus_component_get_author")]
    #[doc(alias = "get_author")]
    fn author(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_component_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_component_get_engines")]
    #[doc(alias = "get_engines")]
    fn engines(&self) -> Vec<EngineDesc>;

    #[doc(alias = "ibus_component_get_exec")]
    #[doc(alias = "get_exec")]
    fn exec(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_component_get_homepage")]
    #[doc(alias = "get_homepage")]
    fn homepage(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_component_get_license")]
    #[doc(alias = "get_license")]
    fn license(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_component_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_component_get_observed_paths")]
    #[doc(alias = "get_observed_paths")]
    fn observed_paths(&self) -> Vec<ObservedPath>;

    #[doc(alias = "ibus_component_get_textdomain")]
    #[doc(alias = "get_textdomain")]
    fn textdomain(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_component_get_version")]
    #[doc(alias = "get_version")]
    fn version(&self) -> Option<glib::GString>;

    #[doc(alias = "command-line")]
    fn command_line(&self) -> Option<glib::GString>;
}

impl<O: IsA<Component>> ComponentExt for O {
    fn add_engine(&self, engine: &impl IsA<EngineDesc>) {
        unsafe {
            ffi::ibus_component_add_engine(self.as_ref().to_glib_none().0, engine.as_ref().to_glib_none().0);
        }
    }

    fn add_observed_path(&self, path: &str, access_fs: bool) {
        unsafe {
            ffi::ibus_component_add_observed_path(self.as_ref().to_glib_none().0, path.to_glib_none().0, access_fs.into_glib());
        }
    }

    fn check_modification(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_component_check_modification(self.as_ref().to_glib_none().0))
        }
    }

    fn author(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_component_get_author(self.as_ref().to_glib_none().0))
        }
    }

    fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_component_get_description(self.as_ref().to_glib_none().0))
        }
    }

    fn engines(&self) -> Vec<EngineDesc> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::ibus_component_get_engines(self.as_ref().to_glib_none().0))
        }
    }

    fn exec(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_component_get_exec(self.as_ref().to_glib_none().0))
        }
    }

    fn homepage(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_component_get_homepage(self.as_ref().to_glib_none().0))
        }
    }

    fn license(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_component_get_license(self.as_ref().to_glib_none().0))
        }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_component_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn observed_paths(&self) -> Vec<ObservedPath> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::ibus_component_get_observed_paths(self.as_ref().to_glib_none().0))
        }
    }

    fn textdomain(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_component_get_textdomain(self.as_ref().to_glib_none().0))
        }
    }

    fn version(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_component_get_version(self.as_ref().to_glib_none().0))
        }
    }

    fn command_line(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "command-line")
    }
}

impl fmt::Display for Component {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Component")
    }
}
