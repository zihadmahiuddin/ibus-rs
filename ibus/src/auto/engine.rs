// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{LookupTable,Object,PreeditFocusMode,PropList,Property,Service,Text};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem,mem::transmute,ptr};

glib::wrapper! {
    #[doc(alias = "IBusEngine")]
    pub struct Engine(Object<ffi::IBusEngine, ffi::IBusEngineClass>) @extends Service, Object;

    match fn {
        type_ => || ffi::ibus_engine_get_type(),
    }
}

impl Engine {
        pub const NONE: Option<&'static Engine> = None;
    

    #[doc(alias = "ibus_engine_new")]
    pub fn new(engine_name: &str, object_path: &str, connection: &gio::DBusConnection) -> Engine {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_engine_new(engine_name.to_glib_none().0, object_path.to_glib_none().0, connection.to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_engine_new_with_type")]
    #[doc(alias = "new_with_type")]
    pub fn with_type(engine_type: glib::types::Type, engine_name: &str, object_path: &str, connection: &gio::DBusConnection) -> Engine {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_engine_new_with_type(engine_type.into_glib(), engine_name.to_glib_none().0, object_path.to_glib_none().0, connection.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Engine`] objects.
            ///
            /// This method returns an instance of [`EngineBuilder`](crate::builders::EngineBuilder) which can be used to create [`Engine`] objects.
            pub fn builder() -> EngineBuilder {
                EngineBuilder::new()
            }
        
}

impl Default for Engine {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Engine`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct EngineBuilder {
            builder: glib::object::ObjectBuilder<'static, Engine>,
        }

        impl EngineBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn engine_name(self, engine_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("engine-name", engine_name.into()), }
                        }

                            pub fn has_focus_id(self, has_focus_id: bool) -> Self {
                            Self { builder: self.builder.property("has-focus-id", has_focus_id), }
                        }

                            pub fn connection(self, connection: &gio::DBusConnection) -> Self {
                            Self { builder: self.builder.property("connection", connection.clone()), }
                        }

                            pub fn object_path(self, object_path: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("object-path", object_path.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Engine`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Engine {
    self.builder.build() }
}

pub trait EngineExt: 'static {
    #[doc(alias = "ibus_engine_commit_text")]
    fn commit_text(&self, text: &impl IsA<Text>);

    #[doc(alias = "ibus_engine_delete_surrounding_text")]
    fn delete_surrounding_text(&self, offset: i32, nchars: u32);

    #[doc(alias = "ibus_engine_forward_key_event")]
    fn forward_key_event(&self, keyval: u32, keycode: u32, state: u32);

    #[doc(alias = "ibus_engine_get_content_type")]
    #[doc(alias = "get_content_type")]
    fn content_type(&self) -> (u32, u32);

    #[doc(alias = "ibus_engine_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_engine_get_surrounding_text")]
    #[doc(alias = "get_surrounding_text")]
    fn surrounding_text(&self) -> (Text, u32, u32);

    #[doc(alias = "ibus_engine_hide_auxiliary_text")]
    fn hide_auxiliary_text(&self);

    #[doc(alias = "ibus_engine_hide_lookup_table")]
    fn hide_lookup_table(&self);

    #[doc(alias = "ibus_engine_hide_preedit_text")]
    fn hide_preedit_text(&self);

    #[doc(alias = "ibus_engine_register_properties")]
    fn register_properties(&self, prop_list: &impl IsA<PropList>);

    #[doc(alias = "ibus_engine_show_auxiliary_text")]
    fn show_auxiliary_text(&self);

    #[doc(alias = "ibus_engine_show_lookup_table")]
    fn show_lookup_table(&self);

    #[doc(alias = "ibus_engine_show_preedit_text")]
    fn show_preedit_text(&self);

    #[doc(alias = "ibus_engine_update_auxiliary_text")]
    fn update_auxiliary_text(&self, text: &impl IsA<Text>, visible: bool);

    #[doc(alias = "ibus_engine_update_lookup_table")]
    fn update_lookup_table(&self, lookup_table: &impl IsA<LookupTable>, visible: bool);

    #[doc(alias = "ibus_engine_update_lookup_table_fast")]
    fn update_lookup_table_fast(&self, lookup_table: &impl IsA<LookupTable>, visible: bool);

    #[doc(alias = "ibus_engine_update_preedit_text")]
    fn update_preedit_text(&self, text: &impl IsA<Text>, cursor_pos: u32, visible: bool);

    #[doc(alias = "ibus_engine_update_preedit_text_with_mode")]
    fn update_preedit_text_with_mode(&self, text: &impl IsA<Text>, cursor_pos: u32, visible: bool, mode: PreeditFocusMode);

    #[doc(alias = "ibus_engine_update_property")]
    fn update_property(&self, prop: &impl IsA<Property>);

    #[doc(alias = "engine-name")]
    fn engine_name(&self) -> Option<glib::GString>;

    #[doc(alias = "has-focus-id")]
    fn has_focus_id(&self) -> bool;

    #[doc(alias = "cancel-hand-writing")]
    fn connect_cancel_hand_writing<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "candidate-clicked")]
    fn connect_candidate_clicked<F: Fn(&Self, u32, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-down")]
    fn connect_cursor_down<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cursor-up")]
    fn connect_cursor_up<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "disable")]
    fn connect_disable<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "enable")]
    fn connect_enable<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "focus-in")]
    fn connect_focus_in<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "focus-in-id")]
    fn connect_focus_in_id<F: Fn(&Self, &str, &str) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "focus-out")]
    fn connect_focus_out<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "focus-out-id")]
    fn connect_focus_out_id<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "page-down")]
    fn connect_page_down<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "page-up")]
    fn connect_page_up<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    //#[doc(alias = "process-hand-writing-event")]
    //fn connect_process_hand_writing_event<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "process-key-event")]
    fn connect_process_key_event<F: Fn(&Self, u32, u32, u32) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "property-activate")]
    fn connect_property_activate<F: Fn(&Self, &str, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "property-hide")]
    fn connect_property_hide<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "property-show")]
    fn connect_property_show<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "reset")]
    fn connect_reset<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "set-capabilities")]
    fn connect_set_capabilities<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "set-content-type")]
    fn connect_set_content_type<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "set-cursor-location")]
    fn connect_set_cursor_location<F: Fn(&Self, i32, i32, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "set-surrounding-text")]
    fn connect_set_surrounding_text<F: Fn(&Self, &glib::Object, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Engine>> EngineExt for O {
    fn commit_text(&self, text: &impl IsA<Text>) {
        unsafe {
            ffi::ibus_engine_commit_text(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0);
        }
    }

    fn delete_surrounding_text(&self, offset: i32, nchars: u32) {
        unsafe {
            ffi::ibus_engine_delete_surrounding_text(self.as_ref().to_glib_none().0, offset, nchars);
        }
    }

    fn forward_key_event(&self, keyval: u32, keycode: u32, state: u32) {
        unsafe {
            ffi::ibus_engine_forward_key_event(self.as_ref().to_glib_none().0, keyval, keycode, state);
        }
    }

    fn content_type(&self) -> (u32, u32) {
        unsafe {
            let mut purpose = mem::MaybeUninit::uninit();
            let mut hints = mem::MaybeUninit::uninit();
            ffi::ibus_engine_get_content_type(self.as_ref().to_glib_none().0, purpose.as_mut_ptr(), hints.as_mut_ptr());
            (purpose.assume_init(), hints.assume_init())
        }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_engine_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn surrounding_text(&self) -> (Text, u32, u32) {
        unsafe {
            let mut text = ptr::null_mut();
            let mut cursor_pos = mem::MaybeUninit::uninit();
            let mut anchor_pos = mem::MaybeUninit::uninit();
            ffi::ibus_engine_get_surrounding_text(self.as_ref().to_glib_none().0, &mut text, cursor_pos.as_mut_ptr(), anchor_pos.as_mut_ptr());
            (from_glib_none(text), cursor_pos.assume_init(), anchor_pos.assume_init())
        }
    }

    fn hide_auxiliary_text(&self) {
        unsafe {
            ffi::ibus_engine_hide_auxiliary_text(self.as_ref().to_glib_none().0);
        }
    }

    fn hide_lookup_table(&self) {
        unsafe {
            ffi::ibus_engine_hide_lookup_table(self.as_ref().to_glib_none().0);
        }
    }

    fn hide_preedit_text(&self) {
        unsafe {
            ffi::ibus_engine_hide_preedit_text(self.as_ref().to_glib_none().0);
        }
    }

    fn register_properties(&self, prop_list: &impl IsA<PropList>) {
        unsafe {
            ffi::ibus_engine_register_properties(self.as_ref().to_glib_none().0, prop_list.as_ref().to_glib_none().0);
        }
    }

    fn show_auxiliary_text(&self) {
        unsafe {
            ffi::ibus_engine_show_auxiliary_text(self.as_ref().to_glib_none().0);
        }
    }

    fn show_lookup_table(&self) {
        unsafe {
            ffi::ibus_engine_show_lookup_table(self.as_ref().to_glib_none().0);
        }
    }

    fn show_preedit_text(&self) {
        unsafe {
            ffi::ibus_engine_show_preedit_text(self.as_ref().to_glib_none().0);
        }
    }

    fn update_auxiliary_text(&self, text: &impl IsA<Text>, visible: bool) {
        unsafe {
            ffi::ibus_engine_update_auxiliary_text(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0, visible.into_glib());
        }
    }

    fn update_lookup_table(&self, lookup_table: &impl IsA<LookupTable>, visible: bool) {
        unsafe {
            ffi::ibus_engine_update_lookup_table(self.as_ref().to_glib_none().0, lookup_table.as_ref().to_glib_none().0, visible.into_glib());
        }
    }

    fn update_lookup_table_fast(&self, lookup_table: &impl IsA<LookupTable>, visible: bool) {
        unsafe {
            ffi::ibus_engine_update_lookup_table_fast(self.as_ref().to_glib_none().0, lookup_table.as_ref().to_glib_none().0, visible.into_glib());
        }
    }

    fn update_preedit_text(&self, text: &impl IsA<Text>, cursor_pos: u32, visible: bool) {
        unsafe {
            ffi::ibus_engine_update_preedit_text(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0, cursor_pos, visible.into_glib());
        }
    }

    fn update_preedit_text_with_mode(&self, text: &impl IsA<Text>, cursor_pos: u32, visible: bool, mode: PreeditFocusMode) {
        unsafe {
            ffi::ibus_engine_update_preedit_text_with_mode(self.as_ref().to_glib_none().0, text.as_ref().to_glib_none().0, cursor_pos, visible.into_glib(), mode.into_glib());
        }
    }

    fn update_property(&self, prop: &impl IsA<Property>) {
        unsafe {
            ffi::ibus_engine_update_property(self.as_ref().to_glib_none().0, prop.as_ref().to_glib_none().0);
        }
    }

    fn engine_name(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "engine-name")
    }

    fn has_focus_id(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "has-focus-id")
    }

    fn connect_cancel_hand_writing<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cancel_hand_writing_trampoline<P: IsA<Engine>, F: Fn(&P, u32) + 'static>(this: *mut ffi::IBusEngine, n_strokes: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), n_strokes)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cancel-hand-writing\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cancel_hand_writing_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_candidate_clicked<F: Fn(&Self, u32, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn candidate_clicked_trampoline<P: IsA<Engine>, F: Fn(&P, u32, u32, u32) + 'static>(this: *mut ffi::IBusEngine, index: libc::c_uint, button: libc::c_uint, state: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), index, button, state)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"candidate-clicked\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(candidate_clicked_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cursor_down<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_down_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cursor-down\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cursor_down_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cursor_up<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_up_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cursor-up\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cursor_up_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_disable<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn disable_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"disable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(disable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_enable<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn enable_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(enable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_focus_in<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn focus_in_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"focus-in\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(focus_in_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_focus_in_id<F: Fn(&Self, &str, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn focus_in_id_trampoline<P: IsA<Engine>, F: Fn(&P, &str, &str) + 'static>(this: *mut ffi::IBusEngine, object_path: *mut libc::c_char, client: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(object_path), &glib::GString::from_glib_borrow(client))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"focus-in-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(focus_in_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_focus_out<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn focus_out_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"focus-out\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(focus_out_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_focus_out_id<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn focus_out_id_trampoline<P: IsA<Engine>, F: Fn(&P, &str) + 'static>(this: *mut ffi::IBusEngine, object_path: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(object_path))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"focus-out-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(focus_out_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_page_down<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn page_down_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"page-down\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(page_down_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_page_up<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn page_up_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"page-up\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(page_up_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    //fn connect_process_hand_writing_event<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Unimplemented coordinates: *.Pointer
    //}

    fn connect_process_key_event<F: Fn(&Self, u32, u32, u32) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn process_key_event_trampoline<P: IsA<Engine>, F: Fn(&P, u32, u32, u32) -> bool + 'static>(this: *mut ffi::IBusEngine, keyval: libc::c_uint, keycode: libc::c_uint, state: libc::c_uint, f: glib::ffi::gpointer) -> glib::ffi::gboolean {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), keyval, keycode, state).into_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"process-key-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(process_key_event_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_activate<F: Fn(&Self, &str, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn property_activate_trampoline<P: IsA<Engine>, F: Fn(&P, &str, u32) + 'static>(this: *mut ffi::IBusEngine, name: *mut libc::c_char, state: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(name), state)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"property-activate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(property_activate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_hide<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn property_hide_trampoline<P: IsA<Engine>, F: Fn(&P, &str) + 'static>(this: *mut ffi::IBusEngine, name: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(name))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"property-hide\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(property_hide_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_show<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn property_show_trampoline<P: IsA<Engine>, F: Fn(&P, &str) + 'static>(this: *mut ffi::IBusEngine, name: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(name))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"property-show\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(property_show_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_reset<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn reset_trampoline<P: IsA<Engine>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEngine, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"reset\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(reset_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_set_capabilities<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn set_capabilities_trampoline<P: IsA<Engine>, F: Fn(&P, u32) + 'static>(this: *mut ffi::IBusEngine, caps: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), caps)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"set-capabilities\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(set_capabilities_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_set_content_type<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn set_content_type_trampoline<P: IsA<Engine>, F: Fn(&P, u32, u32) + 'static>(this: *mut ffi::IBusEngine, purpose: libc::c_uint, hints: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), purpose, hints)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"set-content-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(set_content_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_set_cursor_location<F: Fn(&Self, i32, i32, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn set_cursor_location_trampoline<P: IsA<Engine>, F: Fn(&P, i32, i32, i32, i32) + 'static>(this: *mut ffi::IBusEngine, x: libc::c_int, y: libc::c_int, w: libc::c_int, h: libc::c_int, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), x, y, w, h)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"set-cursor-location\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(set_cursor_location_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_set_surrounding_text<F: Fn(&Self, &glib::Object, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn set_surrounding_text_trampoline<P: IsA<Engine>, F: Fn(&P, &glib::Object, u32, u32) + 'static>(this: *mut ffi::IBusEngine, text: *mut glib::gobject_ffi::GObject, cursor_pos: libc::c_uint, anchor_pos: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Engine::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(text), cursor_pos, anchor_pos)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"set-surrounding-text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(set_surrounding_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Engine {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Engine")
    }
}
