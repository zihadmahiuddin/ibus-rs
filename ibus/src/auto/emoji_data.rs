// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{Object,Serializable};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute};

glib::wrapper! {
    #[doc(alias = "IBusEmojiData")]
    pub struct EmojiData(Object<ffi::IBusEmojiData, ffi::IBusEmojiDataClass>) @extends Serializable, Object;

    match fn {
        type_ => || ffi::ibus_emoji_data_get_type(),
    }
}

impl EmojiData {
        pub const NONE: Option<&'static EmojiData> = None;
    

    //#[doc(alias = "ibus_emoji_data_new")]
    //pub fn new(first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) -> EmojiData {
    //    unsafe { TODO: call ffi:ibus_emoji_data_new() }
    //}

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`EmojiData`] objects.
            ///
            /// This method returns an instance of [`EmojiDataBuilder`](crate::builders::EmojiDataBuilder) which can be used to create [`EmojiData`] objects.
            pub fn builder() -> EmojiDataBuilder {
                EmojiDataBuilder::new()
            }
        

    #[doc(alias = "ibus_emoji_data_load")]
    pub fn load(path: &str) -> Vec<EmojiData> {
        assert_initialized_main_thread!();
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ibus_emoji_data_load(path.to_glib_none().0))
        }
    }
}

impl Default for EmojiData {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`EmojiData`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct EmojiDataBuilder {
            builder: glib::object::ObjectBuilder<'static, EmojiData>,
        }

        impl EmojiDataBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            //pub fn annotations(self, annotations: /*Unimplemented*/Basic: Pointer) -> Self {
                        //    Self { builder: self.builder.property("annotations", annotations), }
                        //}

                            pub fn category(self, category: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("category", category.into()), }
                        }

                            pub fn description(self, description: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("description", description.into()), }
                        }

                            pub fn emoji(self, emoji: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("emoji", emoji.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`EmojiData`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> EmojiData {
    self.builder.build() }
}

pub trait EmojiDataExt: 'static {
    #[doc(alias = "ibus_emoji_data_get_annotations")]
    #[doc(alias = "get_annotations")]
    fn annotations(&self) -> Vec<glib::GString>;

    #[doc(alias = "ibus_emoji_data_get_category")]
    #[doc(alias = "get_category")]
    fn category(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_emoji_data_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_emoji_data_get_emoji")]
    #[doc(alias = "get_emoji")]
    fn emoji(&self) -> Option<glib::GString>;

    #[doc(alias = "ibus_emoji_data_set_description")]
    fn set_description(&self, description: &str);

    //fn set_annotations(&self, annotations: /*Unimplemented*/Basic: Pointer);

    #[doc(alias = "annotations")]
    fn connect_annotations_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<EmojiData>> EmojiDataExt for O {
    fn annotations(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::ibus_emoji_data_get_annotations(self.as_ref().to_glib_none().0))
        }
    }

    fn category(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_emoji_data_get_category(self.as_ref().to_glib_none().0))
        }
    }

    fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_emoji_data_get_description(self.as_ref().to_glib_none().0))
        }
    }

    fn emoji(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_emoji_data_get_emoji(self.as_ref().to_glib_none().0))
        }
    }

    fn set_description(&self, description: &str) {
        unsafe {
            ffi::ibus_emoji_data_set_description(self.as_ref().to_glib_none().0, description.to_glib_none().0);
        }
    }

    //fn set_annotations(&self, annotations: /*Unimplemented*/Basic: Pointer) {
    //    glib::ObjectExt::set_property(self.as_ref(),"annotations", &annotations)
    //}

    fn connect_annotations_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_annotations_trampoline<P: IsA<EmojiData>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEmojiData, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(EmojiData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::annotations\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_annotations_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P: IsA<EmojiData>, F: Fn(&P) + 'static>(this: *mut ffi::IBusEmojiData, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(EmojiData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_description_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for EmojiData {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("EmojiData")
    }
}
