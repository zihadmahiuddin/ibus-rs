// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use crate::{Proxy};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute,ptr};

#[cfg(any(feature = "gio_v2_26", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
glib::wrapper! {
    #[doc(alias = "IBusConfig")]
    pub struct Config(Object<ffi::IBusConfig, ffi::IBusConfigClass>) @extends Proxy, gio::DBusProxy, @implements gio::AsyncInitable, gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::ibus_config_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_26", feature = "dox")))]
#[cfg(any(feature = "gio_v2_22", feature = "dox"))]
glib::wrapper! {
    #[doc(alias = "IBusConfig")]
    pub struct Config(Object<ffi::IBusConfig, ffi::IBusConfigClass>) @extends Proxy, @implements gio::AsyncInitable, gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::ibus_config_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_22", feature = "dox")))]
#[cfg(any(feature = "gio_v2_30", feature = "dox"))]
glib::wrapper! {
    #[doc(alias = "IBusConfig")]
    pub struct Config(Object<ffi::IBusConfig, ffi::IBusConfigClass>) @extends Proxy, @implements gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::ibus_config_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_30", feature = "dox")))]
#[cfg(any(feature = "gio_v2_22", feature = "dox"))]
glib::wrapper! {
    #[doc(alias = "IBusConfig")]
    pub struct Config(Object<ffi::IBusConfig, ffi::IBusConfigClass>) @extends Proxy, @implements gio::Initable;

    match fn {
        type_ => || ffi::ibus_config_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_22", feature = "dox")))]
glib::wrapper! {
    #[doc(alias = "IBusConfig")]
    pub struct Config(Object<ffi::IBusConfig, ffi::IBusConfigClass>) @extends Proxy;

    match fn {
        type_ => || ffi::ibus_config_get_type(),
    }
}

impl Config {
        pub const NONE: Option<&'static Config> = None;
    

    #[doc(alias = "ibus_config_new")]
    pub fn new(connection: &gio::DBusConnection, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<Config, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::ibus_config_new(connection.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Config`] objects.
            ///
            /// This method returns an instance of [`ConfigBuilder`](crate::builders::ConfigBuilder) which can be used to create [`Config`] objects.
            pub fn builder() -> ConfigBuilder {
                ConfigBuilder::new()
            }
        

    //#[doc(alias = "ibus_config_new_async")]
    //pub fn new_async<P: FnOnce(Result<(), glib::Error>) + 'static>(connection: &gio::DBusConnection, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_config_new_async() }
    //}
}

impl Default for Config {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Config`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ConfigBuilder {
            builder: glib::object::ObjectBuilder<'static, Config>,
        }

        impl ConfigBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                        //    #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    //pub fn g_bus_type(self, g_bus_type: /*Ignored*/gio::BusType) -> Self {
                        //    Self { builder: self.builder.property("g-bus-type", g_bus_type), }
                        //}

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_connection(self, g_connection: &gio::DBusConnection) -> Self {
                            Self { builder: self.builder.property("g-connection", g_connection.clone()), }
                        }

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_default_timeout(self, g_default_timeout: i32) -> Self {
                            Self { builder: self.builder.property("g-default-timeout", g_default_timeout), }
                        }

                        //    #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    //pub fn g_flags(self, g_flags: /*Ignored*/gio::DBusProxyFlags) -> Self {
                        //    Self { builder: self.builder.property("g-flags", g_flags), }
                        //}

                        //    #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    //pub fn g_interface_info(self, g_interface_info: /*Ignored*/&gio::DBusInterfaceInfo) -> Self {
                        //    Self { builder: self.builder.property("g-interface-info", g_interface_info), }
                        //}

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_interface_name(self, g_interface_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("g-interface-name", g_interface_name.into()), }
                        }

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_name(self, g_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("g-name", g_name.into()), }
                        }

                            #[cfg(any(feature = "gio_v2_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gio_v2_26")))]
    pub fn g_object_path(self, g_object_path: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("g-object-path", g_object_path.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Config`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Config {
    self.builder.build() }
}

pub trait ConfigExt: 'static {
    #[doc(alias = "ibus_config_get_value")]
    #[doc(alias = "get_value")]
    fn value(&self, section: &str, name: &str) -> Option<glib::Variant>;

    //#[doc(alias = "ibus_config_get_value_async")]
    //#[doc(alias = "get_value_async")]
    //fn value_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, section: &str, name: &str, timeout_ms: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P);

    #[doc(alias = "ibus_config_get_values")]
    #[doc(alias = "get_values")]
    fn values(&self, section: &str) -> Option<glib::Variant>;

    //#[doc(alias = "ibus_config_get_values_async")]
    //#[doc(alias = "get_values_async")]
    //fn values_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, section: &str, timeout_ms: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P);

    #[doc(alias = "ibus_config_set_value")]
    fn set_value(&self, section: &str, name: &str, value: &glib::Variant) -> bool;

    //#[doc(alias = "ibus_config_set_value_async")]
    //fn set_value_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, section: &str, name: &str, value: &glib::Variant, timeout_ms: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P);

    #[doc(alias = "ibus_config_unset")]
    fn unset(&self, section: &str, name: &str) -> bool;

    #[doc(alias = "ibus_config_unwatch")]
    fn unwatch(&self, section: Option<&str>, name: Option<&str>) -> bool;

    #[doc(alias = "ibus_config_watch")]
    fn watch(&self, section: Option<&str>, name: Option<&str>) -> bool;

    #[doc(alias = "value-changed")]
    fn connect_value_changed<F: Fn(&Self, &str, &str, &glib::Variant) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Config>> ConfigExt for O {
    fn value(&self, section: &str, name: &str) -> Option<glib::Variant> {
        unsafe {
            from_glib_full(ffi::ibus_config_get_value(self.as_ref().to_glib_none().0, section.to_glib_none().0, name.to_glib_none().0))
        }
    }

    //fn value_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, section: &str, name: &str, timeout_ms: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_config_get_value_async() }
    //}

    fn values(&self, section: &str) -> Option<glib::Variant> {
        unsafe {
            from_glib_full(ffi::ibus_config_get_values(self.as_ref().to_glib_none().0, section.to_glib_none().0))
        }
    }

    //fn values_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, section: &str, timeout_ms: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_config_get_values_async() }
    //}

    fn set_value(&self, section: &str, name: &str, value: &glib::Variant) -> bool {
        unsafe {
            from_glib(ffi::ibus_config_set_value(self.as_ref().to_glib_none().0, section.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0))
        }
    }

    //fn set_value_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, section: &str, name: &str, value: &glib::Variant, timeout_ms: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_config_set_value_async() }
    //}

    fn unset(&self, section: &str, name: &str) -> bool {
        unsafe {
            from_glib(ffi::ibus_config_unset(self.as_ref().to_glib_none().0, section.to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn unwatch(&self, section: Option<&str>, name: Option<&str>) -> bool {
        unsafe {
            from_glib(ffi::ibus_config_unwatch(self.as_ref().to_glib_none().0, section.to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn watch(&self, section: Option<&str>, name: Option<&str>) -> bool {
        unsafe {
            from_glib(ffi::ibus_config_watch(self.as_ref().to_glib_none().0, section.to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn connect_value_changed<F: Fn(&Self, &str, &str, &glib::Variant) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn value_changed_trampoline<P: IsA<Config>, F: Fn(&P, &str, &str, &glib::Variant) + 'static>(this: *mut ffi::IBusConfig, section: *mut libc::c_char, name: *mut libc::c_char, value: *mut glib::ffi::GVariant, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Config::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(section), &glib::GString::from_glib_borrow(name), &from_glib_borrow(value))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"value-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(value_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Config {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Config")
    }
}
